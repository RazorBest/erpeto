import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class CentralState(enum.Enum):
    ABSENT = 'absent'
    POWERED_OFF = 'powered-off'
    POWERED_ON = 'powered-on'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CentralState: ...

class GATTOperationType(enum.Enum):
    CONNECTION = 'connection'
    DISCOVERY = 'discovery'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> GATTOperationType: ...

class CharacteristicWriteType(enum.Enum):
    WRITE_DEFAULT_DEPRECATED = 'write-default-deprecated'
    WRITE_WITH_RESPONSE = 'write-with-response'
    WRITE_WITHOUT_RESPONSE = 'write-without-response'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CharacteristicWriteType: ...

class CharacteristicOperationType(enum.Enum):
    READ = 'read'
    WRITE = 'write'
    SUBSCRIBE_TO_NOTIFICATIONS = 'subscribe-to-notifications'
    UNSUBSCRIBE_FROM_NOTIFICATIONS = 'unsubscribe-from-notifications'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CharacteristicOperationType: ...

class DescriptorOperationType(enum.Enum):
    READ = 'read'
    WRITE = 'write'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> DescriptorOperationType: ...

@dataclass
class ManufacturerData:
    key: int
    data: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ManufacturerData: ...

@dataclass
class ScanRecord:
    name: str | None = ...
    uuids: list[str] | None = ...
    appearance: int | None = ...
    tx_power: int | None = ...
    manufacturer_data: list[ManufacturerData] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScanRecord: ...

@dataclass
class ScanEntry:
    device_address: str
    rssi: int
    scan_record: ScanRecord
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScanEntry: ...

@dataclass
class CharacteristicProperties:
    broadcast: bool | None = ...
    read: bool | None = ...
    write_without_response: bool | None = ...
    write: bool | None = ...
    notify: bool | None = ...
    indicate: bool | None = ...
    authenticated_signed_writes: bool | None = ...
    extended_properties: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CharacteristicProperties: ...

def enable(state: CentralState, le_supported: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_simulated_central_state(state: CentralState) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_preconnected_peripheral(address: str, name: str, manufacturer_data: list[ManufacturerData], known_service_uuids: list[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_advertisement(entry: ScanEntry) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_gatt_operation_response(address: str, type_: GATTOperationType, code: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_characteristic_operation_response(characteristic_id: str, type_: CharacteristicOperationType, code: int, data: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_descriptor_operation_response(descriptor_id: str, type_: DescriptorOperationType, code: int, data: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_service(address: str, service_uuid: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def remove_service(service_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_characteristic(service_id: str, characteristic_uuid: str, properties: CharacteristicProperties) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def remove_characteristic(characteristic_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_descriptor(characteristic_id: str, descriptor_uuid: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def remove_descriptor(descriptor_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_gatt_disconnection(address: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class GattOperationReceived:
    address: str
    type_: GATTOperationType
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> GattOperationReceived: ...

@dataclass
class CharacteristicOperationReceived:
    characteristic_id: str
    type_: CharacteristicOperationType
    data: str | None
    write_type: CharacteristicWriteType | None
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CharacteristicOperationReceived: ...

@dataclass
class DescriptorOperationReceived:
    descriptor_id: str
    type_: DescriptorOperationType
    data: str | None
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DescriptorOperationReceived: ...
