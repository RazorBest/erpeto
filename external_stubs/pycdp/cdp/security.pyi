import enum
import typing
from . import network as network
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class CertificateId(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> CertificateId: ...

class MixedContentType(enum.Enum):
    BLOCKABLE: str
    OPTIONALLY_BLOCKABLE: str
    NONE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> MixedContentType: ...

class SecurityState(enum.Enum):
    UNKNOWN: str
    NEUTRAL: str
    INSECURE: str
    SECURE: str
    INFO: str
    INSECURE_BROKEN: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SecurityState: ...

@dataclass
class CertificateSecurityState:
    protocol: str
    key_exchange: str
    cipher: str
    certificate: typing.List[str]
    subject_name: str
    issuer: str
    valid_from: network.TimeSinceEpoch
    valid_to: network.TimeSinceEpoch
    certificate_has_weak_signature: bool
    certificate_has_sha1_signature: bool
    modern_ssl: bool
    obsolete_ssl_protocol: bool
    obsolete_ssl_key_exchange: bool
    obsolete_ssl_cipher: bool
    obsolete_ssl_signature: bool
    key_exchange_group: typing.Optional[str] = ...
    mac: typing.Optional[str] = ...
    certificate_network_error: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CertificateSecurityState: ...
    def __init__(self, protocol, key_exchange, cipher, certificate, subject_name, issuer, valid_from, valid_to, certificate_has_weak_signature, certificate_has_sha1_signature, modern_ssl, obsolete_ssl_protocol, obsolete_ssl_key_exchange, obsolete_ssl_cipher, obsolete_ssl_signature, key_exchange_group, mac, certificate_network_error) -> None: ...

class SafetyTipStatus(enum.Enum):
    BAD_REPUTATION: str
    LOOKALIKE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SafetyTipStatus: ...

@dataclass
class SafetyTipInfo:
    safety_tip_status: SafetyTipStatus
    safe_url: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SafetyTipInfo: ...
    def __init__(self, safety_tip_status, safe_url) -> None: ...

@dataclass
class VisibleSecurityState:
    security_state: SecurityState
    security_state_issue_ids: typing.List[str]
    certificate_security_state: typing.Optional[CertificateSecurityState] = ...
    safety_tip_info: typing.Optional[SafetyTipInfo] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VisibleSecurityState: ...
    def __init__(self, security_state, security_state_issue_ids, certificate_security_state, safety_tip_info) -> None: ...

@dataclass
class SecurityStateExplanation:
    security_state: SecurityState
    title: str
    summary: str
    description: str
    mixed_content_type: MixedContentType
    certificate: typing.List[str]
    recommendations: typing.Optional[typing.List[str]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SecurityStateExplanation: ...
    def __init__(self, security_state, title, summary, description, mixed_content_type, certificate, recommendations) -> None: ...

@dataclass
class InsecureContentStatus:
    ran_mixed_content: bool
    displayed_mixed_content: bool
    contained_mixed_form: bool
    ran_content_with_cert_errors: bool
    displayed_content_with_cert_errors: bool
    ran_insecure_content_style: SecurityState
    displayed_insecure_content_style: SecurityState
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InsecureContentStatus: ...
    def __init__(self, ran_mixed_content, displayed_mixed_content, contained_mixed_form, ran_content_with_cert_errors, displayed_content_with_cert_errors, ran_insecure_content_style, displayed_insecure_content_style) -> None: ...

class CertificateErrorAction(enum.Enum):
    CONTINUE: str
    CANCEL: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CertificateErrorAction: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_ignore_certificate_errors(ignore: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def handle_certificate_error(event_id: int, action: CertificateErrorAction) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_override_certificate_errors(override: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class CertificateError:
    event_id: int
    error_type: str
    request_url: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CertificateError: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, event_id, error_type, request_url) -> None: ...

@dataclass
class VisibleSecurityStateChanged:
    visible_security_state: VisibleSecurityState
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VisibleSecurityStateChanged: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, visible_security_state) -> None: ...

@dataclass
class SecurityStateChanged:
    security_state: SecurityState
    scheme_is_cryptographic: bool
    explanations: typing.List[SecurityStateExplanation]
    insecure_content_status: InsecureContentStatus
    summary: typing.Optional[str]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SecurityStateChanged: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, security_state, scheme_is_cryptographic, explanations, insecure_content_status, summary) -> None: ...
