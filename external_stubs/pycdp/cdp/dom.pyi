import enum
import typing
from . import page as page, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class NodeId(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> NodeId: ...

class BackendNodeId(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> BackendNodeId: ...

@dataclass
class BackendNode:
    node_type: int
    node_name: str
    backend_node_id: BackendNodeId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BackendNode: ...
    def __init__(self, node_type, node_name, backend_node_id) -> None: ...

class PseudoType(enum.Enum):
    FIRST_LINE: str
    FIRST_LETTER: str
    BEFORE: str
    AFTER: str
    MARKER: str
    BACKDROP: str
    SELECTION: str
    TARGET_TEXT: str
    SPELLING_ERROR: str
    GRAMMAR_ERROR: str
    HIGHLIGHT: str
    FIRST_LINE_INHERITED: str
    SCROLLBAR: str
    SCROLLBAR_THUMB: str
    SCROLLBAR_BUTTON: str
    SCROLLBAR_TRACK: str
    SCROLLBAR_TRACK_PIECE: str
    SCROLLBAR_CORNER: str
    RESIZER: str
    INPUT_LIST_BUTTON: str
    VIEW_TRANSITION: str
    VIEW_TRANSITION_GROUP: str
    VIEW_TRANSITION_IMAGE_PAIR: str
    VIEW_TRANSITION_OLD: str
    VIEW_TRANSITION_NEW: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PseudoType: ...

class ShadowRootType(enum.Enum):
    USER_AGENT: str
    OPEN_: str
    CLOSED: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ShadowRootType: ...

class CompatibilityMode(enum.Enum):
    QUIRKS_MODE: str
    LIMITED_QUIRKS_MODE: str
    NO_QUIRKS_MODE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CompatibilityMode: ...

class PhysicalAxes(enum.Enum):
    HORIZONTAL: str
    VERTICAL: str
    BOTH: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PhysicalAxes: ...

class LogicalAxes(enum.Enum):
    INLINE: str
    BLOCK: str
    BOTH: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> LogicalAxes: ...

@dataclass
class Node:
    node_id: NodeId
    backend_node_id: BackendNodeId
    node_type: int
    node_name: str
    local_name: str
    node_value: str
    parent_id: typing.Optional[NodeId] = ...
    child_node_count: typing.Optional[int] = ...
    children: typing.Optional[typing.List[Node]] = ...
    attributes: typing.Optional[typing.List[str]] = ...
    document_url: typing.Optional[str] = ...
    base_url: typing.Optional[str] = ...
    public_id: typing.Optional[str] = ...
    system_id: typing.Optional[str] = ...
    internal_subset: typing.Optional[str] = ...
    xml_version: typing.Optional[str] = ...
    name: typing.Optional[str] = ...
    value: typing.Optional[str] = ...
    pseudo_type: typing.Optional[PseudoType] = ...
    pseudo_identifier: typing.Optional[str] = ...
    shadow_root_type: typing.Optional[ShadowRootType] = ...
    frame_id: typing.Optional[page.FrameId] = ...
    content_document: typing.Optional[Node] = ...
    shadow_roots: typing.Optional[typing.List[Node]] = ...
    template_content: typing.Optional[Node] = ...
    pseudo_elements: typing.Optional[typing.List[Node]] = ...
    imported_document: typing.Optional[Node] = ...
    distributed_nodes: typing.Optional[typing.List[BackendNode]] = ...
    is_svg: typing.Optional[bool] = ...
    compatibility_mode: typing.Optional[CompatibilityMode] = ...
    assigned_slot: typing.Optional[BackendNode] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Node: ...
    def __init__(self, node_id, backend_node_id, node_type, node_name, local_name, node_value, parent_id, child_node_count, children, attributes, document_url, base_url, public_id, system_id, internal_subset, xml_version, name, value, pseudo_type, pseudo_identifier, shadow_root_type, frame_id, content_document, shadow_roots, template_content, pseudo_elements, imported_document, distributed_nodes, is_svg, compatibility_mode, assigned_slot) -> None: ...

@dataclass
class RGBA:
    r: int
    g: int
    b: int
    a: typing.Optional[float] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RGBA: ...
    def __init__(self, r, g, b, a) -> None: ...

class Quad(list):
    def to_json(self) -> typing.List[float]: ...
    @classmethod
    def from_json(cls, json: typing.List[float]) -> Quad: ...

@dataclass
class BoxModel:
    content: Quad
    padding: Quad
    border: Quad
    margin: Quad
    width: int
    height: int
    shape_outside: typing.Optional[ShapeOutsideInfo] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BoxModel: ...
    def __init__(self, content, padding, border, margin, width, height, shape_outside) -> None: ...

@dataclass
class ShapeOutsideInfo:
    bounds: Quad
    shape: typing.List[typing.Any]
    margin_shape: typing.List[typing.Any]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShapeOutsideInfo: ...
    def __init__(self, bounds, shape, margin_shape) -> None: ...

@dataclass
class Rect:
    x: float
    y: float
    width: float
    height: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Rect: ...
    def __init__(self, x, y, width, height) -> None: ...

@dataclass
class CSSComputedStyleProperty:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSComputedStyleProperty: ...
    def __init__(self, name, value) -> None: ...

def collect_class_names_from_subtree(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]: ...
def copy_to(node_id: NodeId, target_node_id: NodeId, insert_before_node_id: typing.Optional[NodeId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def describe_node(node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None, depth: typing.Optional[int] = None, pierce: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Node]: ...
def scroll_into_view_if_needed(node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None, rect: typing.Optional[Rect] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def discard_search_results(search_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable(include_whitespace: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def focus(node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_attributes(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]: ...
def get_box_model(node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, BoxModel]: ...
def get_content_quads(node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Quad]]: ...
def get_document(depth: typing.Optional[int] = None, pierce: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Node]: ...
def get_flattened_document(depth: typing.Optional[int] = None, pierce: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Node]]: ...
def get_nodes_for_subtree_by_style(node_id: NodeId, computed_styles: typing.List[CSSComputedStyleProperty], pierce: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]: ...
def get_node_for_location(x: int, y: int, include_user_agent_shadow_dom: typing.Optional[bool] = None, ignore_pointer_events_none: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[BackendNodeId, page.FrameId, typing.Optional[NodeId]]]: ...
def get_outer_html(node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_relayout_boundary(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def get_search_results(search_id: str, from_index: int, to_index: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]: ...
def hide_highlight() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_node() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_rect() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def mark_undoable_state() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def move_to(node_id: NodeId, target_node_id: NodeId, insert_before_node_id: typing.Optional[NodeId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def perform_search(query: str, include_user_agent_shadow_dom: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, int]]: ...
def push_node_by_path_to_frontend(path: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def push_nodes_by_backend_ids_to_frontend(backend_node_ids: typing.List[BackendNodeId]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]: ...
def query_selector(node_id: NodeId, selector: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def query_selector_all(node_id: NodeId, selector: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]: ...
def get_top_layer_elements() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]: ...
def redo() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_attribute(node_id: NodeId, name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_node(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def request_child_nodes(node_id: NodeId, depth: typing.Optional[int] = None, pierce: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def request_node(object_id: runtime.RemoteObjectId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def resolve_node(node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_group: typing.Optional[str] = None, execution_context_id: typing.Optional[runtime.ExecutionContextId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.RemoteObject]: ...
def set_attribute_value(node_id: NodeId, name: str, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_attributes_as_text(node_id: NodeId, text: str, name: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_file_input_files(files: typing.List[str], node_id: typing.Optional[NodeId] = None, backend_node_id: typing.Optional[BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_node_stack_traces_enabled(enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_node_stack_traces(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[runtime.StackTrace]]: ...
def get_file_info(object_id: runtime.RemoteObjectId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def set_inspected_node(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_node_name(node_id: NodeId, name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def set_node_value(node_id: NodeId, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_outer_html(node_id: NodeId, outer_html: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def undo() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_frame_owner(frame_id: page.FrameId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[BackendNodeId, typing.Optional[NodeId]]]: ...
def get_container_for_node(node_id: NodeId, container_name: typing.Optional[str] = None, physical_axes: typing.Optional[PhysicalAxes] = None, logical_axes: typing.Optional[LogicalAxes] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[NodeId]]: ...
def get_querying_descendants_for_container(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]: ...

@dataclass
class AttributeModified:
    node_id: NodeId
    name: str
    value: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributeModified: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, node_id, name, value) -> None: ...

@dataclass
class AttributeRemoved:
    node_id: NodeId
    name: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributeRemoved: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, node_id, name) -> None: ...

@dataclass
class CharacterDataModified:
    node_id: NodeId
    character_data: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CharacterDataModified: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, node_id, character_data) -> None: ...

@dataclass
class ChildNodeCountUpdated:
    node_id: NodeId
    child_node_count: int
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ChildNodeCountUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, node_id, child_node_count) -> None: ...

@dataclass
class ChildNodeInserted:
    parent_node_id: NodeId
    previous_node_id: NodeId
    node: Node
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ChildNodeInserted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, parent_node_id, previous_node_id, node) -> None: ...

@dataclass
class ChildNodeRemoved:
    parent_node_id: NodeId
    node_id: NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ChildNodeRemoved: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, parent_node_id, node_id) -> None: ...

@dataclass
class DistributedNodesUpdated:
    insertion_point_id: NodeId
    distributed_nodes: typing.List[BackendNode]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DistributedNodesUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, insertion_point_id, distributed_nodes) -> None: ...

@dataclass
class DocumentUpdated:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DocumentUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...

@dataclass
class InlineStyleInvalidated:
    node_ids: typing.List[NodeId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InlineStyleInvalidated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, node_ids) -> None: ...

@dataclass
class PseudoElementAdded:
    parent_id: NodeId
    pseudo_element: Node
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PseudoElementAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, parent_id, pseudo_element) -> None: ...

@dataclass
class TopLayerElementsUpdated:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TopLayerElementsUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...

@dataclass
class PseudoElementRemoved:
    parent_id: NodeId
    pseudo_element_id: NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PseudoElementRemoved: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, parent_id, pseudo_element_id) -> None: ...

@dataclass
class SetChildNodes:
    parent_id: NodeId
    nodes: typing.List[Node]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SetChildNodes: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, parent_id, nodes) -> None: ...

@dataclass
class ShadowRootPopped:
    host_id: NodeId
    root_id: NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShadowRootPopped: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, host_id, root_id) -> None: ...

@dataclass
class ShadowRootPushed:
    host_id: NodeId
    root: Node
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShadowRootPushed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, host_id, root) -> None: ...
