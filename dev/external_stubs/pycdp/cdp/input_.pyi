import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class TouchPoint:
    x: float
    y: float
    radius_x: typing.Optional[float] = ...
    radius_y: typing.Optional[float] = ...
    rotation_angle: typing.Optional[float] = ...
    force: typing.Optional[float] = ...
    tangential_pressure: typing.Optional[float] = ...
    tilt_x: typing.Optional[float] = ...
    tilt_y: typing.Optional[float] = ...
    twist: typing.Optional[int] = ...
    id_: typing.Optional[float] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TouchPoint: ...
    def __init__(self, x, y, radius_x, radius_y, rotation_angle, force, tangential_pressure, tilt_x, tilt_y, twist, id_) -> None: ...

class GestureSourceType(enum.Enum):
    DEFAULT: str
    TOUCH: str
    MOUSE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> GestureSourceType: ...

class MouseButton(enum.Enum):
    NONE: str
    LEFT: str
    MIDDLE: str
    RIGHT: str
    BACK: str
    FORWARD: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> MouseButton: ...

class TimeSinceEpoch(float):
    def to_json(self) -> float: ...
    @classmethod
    def from_json(cls, json: float) -> TimeSinceEpoch: ...

@dataclass
class DragDataItem:
    mime_type: str
    data: str
    title: typing.Optional[str] = ...
    base_url: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DragDataItem: ...
    def __init__(self, mime_type, data, title, base_url) -> None: ...

@dataclass
class DragData:
    items: typing.List[DragDataItem]
    drag_operations_mask: int
    files: typing.Optional[typing.List[str]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DragData: ...
    def __init__(self, items, drag_operations_mask, files) -> None: ...

def dispatch_drag_event(type_: str, x: float, y: float, data: DragData, modifiers: typing.Optional[int] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def dispatch_key_event(type_: str, modifiers: typing.Optional[int] = None, timestamp: typing.Optional[TimeSinceEpoch] = None, text: typing.Optional[str] = None, unmodified_text: typing.Optional[str] = None, key_identifier: typing.Optional[str] = None, code: typing.Optional[str] = None, key: typing.Optional[str] = None, windows_virtual_key_code: typing.Optional[int] = None, native_virtual_key_code: typing.Optional[int] = None, auto_repeat: typing.Optional[bool] = None, is_keypad: typing.Optional[bool] = None, is_system_key: typing.Optional[bool] = None, location: typing.Optional[int] = None, commands: typing.Optional[typing.List[str]] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def insert_text(text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def ime_set_composition(text: str, selection_start: int, selection_end: int, replacement_start: typing.Optional[int] = None, replacement_end: typing.Optional[int] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def dispatch_mouse_event(type_: str, x: float, y: float, modifiers: typing.Optional[int] = None, timestamp: typing.Optional[TimeSinceEpoch] = None, button: typing.Optional[MouseButton] = None, buttons: typing.Optional[int] = None, click_count: typing.Optional[int] = None, force: typing.Optional[float] = None, tangential_pressure: typing.Optional[float] = None, tilt_x: typing.Optional[float] = None, tilt_y: typing.Optional[float] = None, twist: typing.Optional[int] = None, delta_x: typing.Optional[float] = None, delta_y: typing.Optional[float] = None, pointer_type: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def dispatch_touch_event(type_: str, touch_points: typing.List[TouchPoint], modifiers: typing.Optional[int] = None, timestamp: typing.Optional[TimeSinceEpoch] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def cancel_dragging() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def emulate_touch_from_mouse_event(type_: str, x: int, y: int, button: MouseButton, timestamp: typing.Optional[TimeSinceEpoch] = None, delta_x: typing.Optional[float] = None, delta_y: typing.Optional[float] = None, modifiers: typing.Optional[int] = None, click_count: typing.Optional[int] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_ignore_input_events(ignore: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_intercept_drags(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def synthesize_pinch_gesture(x: float, y: float, scale_factor: float, relative_speed: typing.Optional[int] = None, gesture_source_type: typing.Optional[GestureSourceType] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def synthesize_scroll_gesture(x: float, y: float, x_distance: typing.Optional[float] = None, y_distance: typing.Optional[float] = None, x_overscroll: typing.Optional[float] = None, y_overscroll: typing.Optional[float] = None, prevent_fling: typing.Optional[bool] = None, speed: typing.Optional[int] = None, gesture_source_type: typing.Optional[GestureSourceType] = None, repeat_count: typing.Optional[int] = None, repeat_delay_ms: typing.Optional[int] = None, interaction_marker_name: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def synthesize_tap_gesture(x: float, y: float, duration: typing.Optional[int] = None, tap_count: typing.Optional[int] = None, gesture_source_type: typing.Optional[GestureSourceType] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class DragIntercepted:
    data: DragData
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DragIntercepted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, data) -> None: ...
