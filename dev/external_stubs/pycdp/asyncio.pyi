from pycdp.exceptions import *
import asyncio
import typing as t
from _typeshed import Incomplete
from aiohttp import ClientSession
from aiohttp.client import ClientWebSocketResponse as ClientWebSocketResponse
from collections.abc import Generator
from pycdp import cdp as cdp
from pycdp.base import IEventLoop as IEventLoop
from pycdp.utils import ContextLoggerMixin as ContextLoggerMixin, LoggerMixin as LoggerMixin, SingleTaskWorker as SingleTaskWorker, retry_on as retry_on

T = t.TypeVar('T')

class AsyncIOEventLoop(IEventLoop):
    async def sleep(self, delay: float) -> None: ...

loop: Incomplete

class CDPEventListener:
    def __init__(self, queue: asyncio.Queue) -> None: ...
    @property
    def closed(self): ...
    def put(self, elem: dict): ...
    def close(self) -> None: ...
    async def __aiter__(self) -> Generator[Incomplete, None, None]: ...

class CDPBase(LoggerMixin):
    def __init__(self, ws: ClientWebSocketResponse = None, session_id: Incomplete | None = None, target_id: Incomplete | None = None) -> None: ...
    @property
    def session_id(self) -> cdp.target.SessionID: ...
    async def execute(self, cmd: t.Generator[dict, dict, T]) -> T: ...
    def listen(self, *event_types: t.Type[T], buffer_size: int = 100) -> t.AsyncIterator[T]: ...
    async def wait_for(self, event_type: t.Type[T]) -> t.AsyncGenerator[T, None]: ...
    def safe_wait_for(self, event_type: t.Type[T]) -> t.Generator[t.Awaitable[T], None]: ...
    def close_listeners(self) -> None: ...

class CDPConnection(CDPBase, SingleTaskWorker):
    def __init__(self, debugging_url: str, http_client: ClientSession) -> None: ...
    @property
    def closed(self) -> bool: ...
    @property
    def had_normal_closure(self) -> bool: ...
    async def connect(self) -> None: ...
    def add_session(self, session_id: str, target_id: str) -> CDPSession: ...
    def remove_session(self, session_id: str): ...
    async def connect_session(self, target_id: cdp.target.TargetID) -> CDPSession: ...

class CDPSession(CDPBase, ContextLoggerMixin):
    def __init__(self, ws: ClientWebSocketResponse, session_id: cdp.target.SessionID, target_id: cdp.target.TargetID) -> None: ...
    async def dom_enable(self) -> Generator[None, None, None]: ...
    async def page_enable(self) -> Generator[None, None, None]: ...
    def close(self) -> None: ...

async def connect_cdp(url: str) -> CDPConnection: ...
