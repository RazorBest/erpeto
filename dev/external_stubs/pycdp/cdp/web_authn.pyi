import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class AuthenticatorId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AuthenticatorId: ...

class AuthenticatorProtocol(enum.Enum):
    U2F: str
    CTAP2: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AuthenticatorProtocol: ...

class Ctap2Version(enum.Enum):
    CTAP2_0: str
    CTAP2_1: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> Ctap2Version: ...

class AuthenticatorTransport(enum.Enum):
    USB: str
    NFC: str
    BLE: str
    CABLE: str
    INTERNAL: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AuthenticatorTransport: ...

@dataclass
class VirtualAuthenticatorOptions:
    protocol: AuthenticatorProtocol
    transport: AuthenticatorTransport
    ctap2_version: typing.Optional[Ctap2Version] = ...
    has_resident_key: typing.Optional[bool] = ...
    has_user_verification: typing.Optional[bool] = ...
    has_large_blob: typing.Optional[bool] = ...
    has_cred_blob: typing.Optional[bool] = ...
    has_min_pin_length: typing.Optional[bool] = ...
    has_prf: typing.Optional[bool] = ...
    automatic_presence_simulation: typing.Optional[bool] = ...
    is_user_verified: typing.Optional[bool] = ...
    default_backup_eligibility: typing.Optional[bool] = ...
    default_backup_state: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VirtualAuthenticatorOptions: ...
    def __init__(self, protocol, transport, ctap2_version, has_resident_key, has_user_verification, has_large_blob, has_cred_blob, has_min_pin_length, has_prf, automatic_presence_simulation, is_user_verified, default_backup_eligibility, default_backup_state) -> None: ...

@dataclass
class Credential:
    credential_id: str
    is_resident_credential: bool
    private_key: str
    sign_count: int
    rp_id: typing.Optional[str] = ...
    user_handle: typing.Optional[str] = ...
    large_blob: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Credential: ...
    def __init__(self, credential_id, is_resident_credential, private_key, sign_count, rp_id, user_handle, large_blob) -> None: ...

def enable(enable_ui: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_virtual_authenticator(options: VirtualAuthenticatorOptions) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, AuthenticatorId]: ...
def set_response_override_bits(authenticator_id: AuthenticatorId, is_bogus_signature: typing.Optional[bool] = None, is_bad_uv: typing.Optional[bool] = None, is_bad_up: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_virtual_authenticator(authenticator_id: AuthenticatorId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_credential(authenticator_id: AuthenticatorId, credential: Credential) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_credential(authenticator_id: AuthenticatorId, credential_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Credential]: ...
def get_credentials(authenticator_id: AuthenticatorId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Credential]]: ...
def remove_credential(authenticator_id: AuthenticatorId, credential_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_credentials(authenticator_id: AuthenticatorId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_user_verified(authenticator_id: AuthenticatorId, is_user_verified: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_automatic_presence_simulation(authenticator_id: AuthenticatorId, enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class CredentialAdded:
    authenticator_id: AuthenticatorId
    credential: Credential
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CredentialAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, authenticator_id, credential) -> None: ...

@dataclass
class CredentialAsserted:
    authenticator_id: AuthenticatorId
    credential: Credential
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CredentialAsserted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, authenticator_id, credential) -> None: ...
