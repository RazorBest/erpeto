import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class Metric:
    name: str
    value: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Metric: ...
    def __init__(self, name, value) -> None: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable(time_domain: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_time_domain(time_domain: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_metrics() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Metric]]: ...

@dataclass
class Metrics:
    metrics: typing.List[Metric]
    title: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Metrics: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, metrics, title) -> None: ...
