import typing
from . import browser as browser, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class TargetID(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> TargetID: ...

class SessionID(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SessionID: ...

@dataclass
class TargetInfo:
    target_id: TargetID
    type_: str
    title: str
    url: str
    attached: bool
    can_access_opener: bool
    opener_id: typing.Optional[TargetID] = ...
    opener_frame_id: typing.Optional[page.FrameId] = ...
    browser_context_id: typing.Optional[browser.BrowserContextID] = ...
    subtype: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TargetInfo: ...
    def __init__(self, target_id, type_, title, url, attached, can_access_opener, opener_id, opener_frame_id, browser_context_id, subtype) -> None: ...

@dataclass
class FilterEntry:
    exclude: typing.Optional[bool] = ...
    type_: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FilterEntry: ...
    def __init__(self, exclude, type_) -> None: ...

class TargetFilter(list):
    def to_json(self) -> typing.List[FilterEntry]: ...
    @classmethod
    def from_json(cls, json: typing.List[FilterEntry]) -> TargetFilter: ...

@dataclass
class RemoteLocation:
    host: str
    port: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RemoteLocation: ...
    def __init__(self, host, port) -> None: ...

def activate_target(target_id: TargetID) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def attach_to_target(target_id: TargetID, flatten: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SessionID]: ...
def attach_to_browser_target() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SessionID]: ...
def close_target(target_id: TargetID) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def expose_dev_tools_protocol(target_id: TargetID, binding_name: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def create_browser_context(dispose_on_detach: typing.Optional[bool] = None, proxy_server: typing.Optional[str] = None, proxy_bypass_list: typing.Optional[str] = None, origins_with_universal_network_access: typing.Optional[typing.List[str]] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, browser.BrowserContextID]: ...
def get_browser_contexts() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[browser.BrowserContextID]]: ...
def create_target(url: str, width: typing.Optional[int] = None, height: typing.Optional[int] = None, browser_context_id: typing.Optional[browser.BrowserContextID] = None, enable_begin_frame_control: typing.Optional[bool] = None, new_window: typing.Optional[bool] = None, background: typing.Optional[bool] = None, for_tab: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, TargetID]: ...
def detach_from_target(session_id: typing.Optional[SessionID] = None, target_id: typing.Optional[TargetID] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def dispose_browser_context(browser_context_id: browser.BrowserContextID) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_target_info(target_id: typing.Optional[TargetID] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, TargetInfo]: ...
def get_targets(filter_: typing.Optional[TargetFilter] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[TargetInfo]]: ...
def send_message_to_target(message: str, session_id: typing.Optional[SessionID] = None, target_id: typing.Optional[TargetID] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_auto_attach(auto_attach: bool, wait_for_debugger_on_start: bool, flatten: typing.Optional[bool] = None, filter_: typing.Optional[TargetFilter] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def auto_attach_related(target_id: TargetID, wait_for_debugger_on_start: bool, filter_: typing.Optional[TargetFilter] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_discover_targets(discover: bool, filter_: typing.Optional[TargetFilter] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_remote_locations(locations: typing.List[RemoteLocation]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class AttachedToTarget:
    session_id: SessionID
    target_info: TargetInfo
    waiting_for_debugger: bool
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttachedToTarget: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, session_id, target_info, waiting_for_debugger) -> None: ...

@dataclass
class DetachedFromTarget:
    session_id: SessionID
    target_id: typing.Optional[TargetID]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DetachedFromTarget: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, session_id, target_id) -> None: ...

@dataclass
class ReceivedMessageFromTarget:
    session_id: SessionID
    message: str
    target_id: typing.Optional[TargetID]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ReceivedMessageFromTarget: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, session_id, message, target_id) -> None: ...

@dataclass
class TargetCreated:
    target_info: TargetInfo
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TargetCreated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, target_info) -> None: ...

@dataclass
class TargetDestroyed:
    target_id: TargetID
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TargetDestroyed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, target_id) -> None: ...

@dataclass
class TargetCrashed:
    target_id: TargetID
    status: str
    error_code: int
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TargetCrashed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, target_id, status, error_code) -> None: ...

@dataclass
class TargetInfoChanged:
    target_info: TargetInfo
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TargetInfoChanged: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, target_info) -> None: ...
