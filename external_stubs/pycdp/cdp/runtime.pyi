import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class ScriptId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ScriptId: ...

@dataclass
class SerializationOptions:
    serialization: str
    max_depth: typing.Optional[int] = ...
    additional_parameters: typing.Optional[dict] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SerializationOptions: ...
    def __init__(self, serialization, max_depth, additional_parameters) -> None: ...

@dataclass
class DeepSerializedValue:
    type_: str
    value: typing.Optional[typing.Any] = ...
    object_id: typing.Optional[str] = ...
    weak_local_object_reference: typing.Optional[int] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DeepSerializedValue: ...
    def __init__(self, type_, value, object_id, weak_local_object_reference) -> None: ...

class RemoteObjectId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> RemoteObjectId: ...

class UnserializableValue(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> UnserializableValue: ...

@dataclass
class RemoteObject:
    type_: str
    subtype: typing.Optional[str] = ...
    class_name: typing.Optional[str] = ...
    value: typing.Optional[typing.Any] = ...
    unserializable_value: typing.Optional[UnserializableValue] = ...
    description: typing.Optional[str] = ...
    deep_serialized_value: typing.Optional[DeepSerializedValue] = ...
    object_id: typing.Optional[RemoteObjectId] = ...
    preview: typing.Optional[ObjectPreview] = ...
    custom_preview: typing.Optional[CustomPreview] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RemoteObject: ...
    def __init__(self, type_, subtype, class_name, value, unserializable_value, description, deep_serialized_value, object_id, preview, custom_preview) -> None: ...

@dataclass
class CustomPreview:
    header: str
    body_getter_id: typing.Optional[RemoteObjectId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CustomPreview: ...
    def __init__(self, header, body_getter_id) -> None: ...

@dataclass
class ObjectPreview:
    type_: str
    overflow: bool
    properties: typing.List[PropertyPreview]
    subtype: typing.Optional[str] = ...
    description: typing.Optional[str] = ...
    entries: typing.Optional[typing.List[EntryPreview]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ObjectPreview: ...
    def __init__(self, type_, overflow, properties, subtype, description, entries) -> None: ...

@dataclass
class PropertyPreview:
    name: str
    type_: str
    value: typing.Optional[str] = ...
    value_preview: typing.Optional[ObjectPreview] = ...
    subtype: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PropertyPreview: ...
    def __init__(self, name, type_, value, value_preview, subtype) -> None: ...

@dataclass
class EntryPreview:
    value: ObjectPreview
    key: typing.Optional[ObjectPreview] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> EntryPreview: ...
    def __init__(self, value, key) -> None: ...

@dataclass
class PropertyDescriptor:
    name: str
    configurable: bool
    enumerable: bool
    value: typing.Optional[RemoteObject] = ...
    writable: typing.Optional[bool] = ...
    get: typing.Optional[RemoteObject] = ...
    set_: typing.Optional[RemoteObject] = ...
    was_thrown: typing.Optional[bool] = ...
    is_own: typing.Optional[bool] = ...
    symbol: typing.Optional[RemoteObject] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PropertyDescriptor: ...
    def __init__(self, name, configurable, enumerable, value, writable, get, set_, was_thrown, is_own, symbol) -> None: ...

@dataclass
class InternalPropertyDescriptor:
    name: str
    value: typing.Optional[RemoteObject] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InternalPropertyDescriptor: ...
    def __init__(self, name, value) -> None: ...

@dataclass
class PrivatePropertyDescriptor:
    name: str
    value: typing.Optional[RemoteObject] = ...
    get: typing.Optional[RemoteObject] = ...
    set_: typing.Optional[RemoteObject] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PrivatePropertyDescriptor: ...
    def __init__(self, name, value, get, set_) -> None: ...

@dataclass
class CallArgument:
    value: typing.Optional[typing.Any] = ...
    unserializable_value: typing.Optional[UnserializableValue] = ...
    object_id: typing.Optional[RemoteObjectId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CallArgument: ...
    def __init__(self, value, unserializable_value, object_id) -> None: ...

class ExecutionContextId(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> ExecutionContextId: ...

@dataclass
class ExecutionContextDescription:
    id_: ExecutionContextId
    origin: str
    name: str
    unique_id: str
    aux_data: typing.Optional[dict] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ExecutionContextDescription: ...
    def __init__(self, id_, origin, name, unique_id, aux_data) -> None: ...

@dataclass
class ExceptionDetails:
    exception_id: int
    text: str
    line_number: int
    column_number: int
    script_id: typing.Optional[ScriptId] = ...
    url: typing.Optional[str] = ...
    stack_trace: typing.Optional[StackTrace] = ...
    exception: typing.Optional[RemoteObject] = ...
    execution_context_id: typing.Optional[ExecutionContextId] = ...
    exception_meta_data: typing.Optional[dict] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ExceptionDetails: ...
    def __init__(self, exception_id, text, line_number, column_number, script_id, url, stack_trace, exception, execution_context_id, exception_meta_data) -> None: ...

class Timestamp(float):
    def to_json(self) -> float: ...
    @classmethod
    def from_json(cls, json: float) -> Timestamp: ...

class TimeDelta(float):
    def to_json(self) -> float: ...
    @classmethod
    def from_json(cls, json: float) -> TimeDelta: ...

@dataclass
class CallFrame:
    function_name: str
    script_id: ScriptId
    url: str
    line_number: int
    column_number: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CallFrame: ...
    def __init__(self, function_name, script_id, url, line_number, column_number) -> None: ...

@dataclass
class StackTrace:
    call_frames: typing.List[CallFrame]
    description: typing.Optional[str] = ...
    parent: typing.Optional[StackTrace] = ...
    parent_id: typing.Optional[StackTraceId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StackTrace: ...
    def __init__(self, call_frames, description, parent, parent_id) -> None: ...

class UniqueDebuggerId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> UniqueDebuggerId: ...

@dataclass
class StackTraceId:
    id_: str
    debugger_id: typing.Optional[UniqueDebuggerId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StackTraceId: ...
    def __init__(self, id_, debugger_id) -> None: ...

def await_promise(promise_object_id: RemoteObjectId, return_by_value: typing.Optional[bool] = None, generate_preview: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]]]: ...
def call_function_on(function_declaration: str, object_id: typing.Optional[RemoteObjectId] = None, arguments: typing.Optional[typing.List[CallArgument]] = None, silent: typing.Optional[bool] = None, return_by_value: typing.Optional[bool] = None, generate_preview: typing.Optional[bool] = None, user_gesture: typing.Optional[bool] = None, await_promise: typing.Optional[bool] = None, execution_context_id: typing.Optional[ExecutionContextId] = None, object_group: typing.Optional[str] = None, throw_on_side_effect: typing.Optional[bool] = None, unique_context_id: typing.Optional[str] = None, serialization_options: typing.Optional[SerializationOptions] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]]]: ...
def compile_script(expression: str, source_url: str, persist_script: bool, execution_context_id: typing.Optional[ExecutionContextId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[ScriptId], typing.Optional[ExceptionDetails]]]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def discard_console_entries() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def evaluate(expression: str, object_group: typing.Optional[str] = None, include_command_line_api: typing.Optional[bool] = None, silent: typing.Optional[bool] = None, context_id: typing.Optional[ExecutionContextId] = None, return_by_value: typing.Optional[bool] = None, generate_preview: typing.Optional[bool] = None, user_gesture: typing.Optional[bool] = None, await_promise: typing.Optional[bool] = None, throw_on_side_effect: typing.Optional[bool] = None, timeout: typing.Optional[TimeDelta] = None, disable_breaks: typing.Optional[bool] = None, repl_mode: typing.Optional[bool] = None, allow_unsafe_eval_blocked_by_csp: typing.Optional[bool] = None, unique_context_id: typing.Optional[str] = None, serialization_options: typing.Optional[SerializationOptions] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]]]: ...
def get_isolate_id() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_heap_usage() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[float, float]]: ...
def get_properties(object_id: RemoteObjectId, own_properties: typing.Optional[bool] = None, accessor_properties_only: typing.Optional[bool] = None, generate_preview: typing.Optional[bool] = None, non_indexed_properties_only: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[PropertyDescriptor], typing.Optional[typing.List[InternalPropertyDescriptor]], typing.Optional[typing.List[PrivatePropertyDescriptor]], typing.Optional[ExceptionDetails]]]: ...
def global_lexical_scope_names(execution_context_id: typing.Optional[ExecutionContextId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]: ...
def query_objects(prototype_object_id: RemoteObjectId, object_group: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, RemoteObject]: ...
def release_object(object_id: RemoteObjectId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def release_object_group(object_group: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def run_if_waiting_for_debugger() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def run_script(script_id: ScriptId, execution_context_id: typing.Optional[ExecutionContextId] = None, object_group: typing.Optional[str] = None, silent: typing.Optional[bool] = None, include_command_line_api: typing.Optional[bool] = None, return_by_value: typing.Optional[bool] = None, generate_preview: typing.Optional[bool] = None, await_promise: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]]]: ...
def set_async_call_stack_depth(max_depth: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_custom_object_formatter_enabled(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_max_call_stack_size_to_capture(size: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def terminate_execution() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_binding(name: str, execution_context_id: typing.Optional[ExecutionContextId] = None, execution_context_name: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_binding(name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_exception_details(error_object_id: RemoteObjectId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[ExceptionDetails]]: ...

@dataclass
class BindingCalled:
    name: str
    payload: str
    execution_context_id: ExecutionContextId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BindingCalled: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, name, payload, execution_context_id) -> None: ...

@dataclass
class ConsoleAPICalled:
    type_: str
    args: typing.List[RemoteObject]
    execution_context_id: ExecutionContextId
    timestamp: Timestamp
    stack_trace: typing.Optional[StackTrace]
    context: typing.Optional[str]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ConsoleAPICalled: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, type_, args, execution_context_id, timestamp, stack_trace, context) -> None: ...

@dataclass
class ExceptionRevoked:
    reason: str
    exception_id: int
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ExceptionRevoked: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, reason, exception_id) -> None: ...

@dataclass
class ExceptionThrown:
    timestamp: Timestamp
    exception_details: ExceptionDetails
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ExceptionThrown: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, timestamp, exception_details) -> None: ...

@dataclass
class ExecutionContextCreated:
    context: ExecutionContextDescription
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ExecutionContextCreated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, context) -> None: ...

@dataclass
class ExecutionContextDestroyed:
    execution_context_id: ExecutionContextId
    execution_context_unique_id: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ExecutionContextDestroyed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, execution_context_id, execution_context_unique_id) -> None: ...

@dataclass
class ExecutionContextsCleared:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ExecutionContextsCleared: ...
    def to_json(self) -> T_JSON_DICT: ...

@dataclass
class InspectRequested:
    object_: RemoteObject
    hints: dict
    execution_context_id: typing.Optional[ExecutionContextId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InspectRequested: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, object_, hints, execution_context_id) -> None: ...
