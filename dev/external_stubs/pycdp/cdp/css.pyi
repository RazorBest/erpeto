import enum
import typing
from . import dom as dom, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class StyleSheetId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StyleSheetId: ...

class StyleSheetOrigin(enum.Enum):
    INJECTED = 'injected'
    USER_AGENT = 'user-agent'
    INSPECTOR = 'inspector'
    REGULAR = 'regular'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StyleSheetOrigin: ...

@dataclass
class PseudoElementMatches:
    pseudo_type: dom.PseudoType
    matches: list[RuleMatch]
    pseudo_identifier: str | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PseudoElementMatches: ...

@dataclass
class CSSAnimationStyle:
    style: CSSStyle
    name: str | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSAnimationStyle: ...

@dataclass
class InheritedStyleEntry:
    matched_css_rules: list[RuleMatch]
    inline_style: CSSStyle | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InheritedStyleEntry: ...

@dataclass
class InheritedAnimatedStyleEntry:
    animation_styles: list[CSSAnimationStyle] | None = ...
    transitions_style: CSSStyle | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InheritedAnimatedStyleEntry: ...

@dataclass
class InheritedPseudoElementMatches:
    pseudo_elements: list[PseudoElementMatches]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InheritedPseudoElementMatches: ...

@dataclass
class RuleMatch:
    rule: CSSRule
    matching_selectors: list[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RuleMatch: ...

@dataclass
class Value:
    text: str
    range_: SourceRange | None = ...
    specificity: Specificity | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Value: ...

@dataclass
class Specificity:
    a: int
    b: int
    c: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Specificity: ...

@dataclass
class SelectorList:
    selectors: list[Value]
    text: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SelectorList: ...

@dataclass
class CSSStyleSheetHeader:
    style_sheet_id: StyleSheetId
    frame_id: page.FrameId
    source_url: str
    origin: StyleSheetOrigin
    title: str
    disabled: bool
    is_inline: bool
    is_mutable: bool
    is_constructed: bool
    start_line: float
    start_column: float
    length: float
    end_line: float
    end_column: float
    source_map_url: str | None = ...
    owner_node: dom.BackendNodeId | None = ...
    has_source_url: bool | None = ...
    loading_failed: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSStyleSheetHeader: ...

@dataclass
class CSSRule:
    selector_list: SelectorList
    origin: StyleSheetOrigin
    style: CSSStyle
    style_sheet_id: StyleSheetId | None = ...
    nesting_selectors: list[str] | None = ...
    media: list[CSSMedia] | None = ...
    container_queries: list[CSSContainerQuery] | None = ...
    supports: list[CSSSupports] | None = ...
    layers: list[CSSLayer] | None = ...
    scopes: list[CSSScope] | None = ...
    rule_types: list[CSSRuleType] | None = ...
    starting_styles: list[CSSStartingStyle] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSRule: ...

class CSSRuleType(enum.Enum):
    MEDIA_RULE = 'MediaRule'
    SUPPORTS_RULE = 'SupportsRule'
    CONTAINER_RULE = 'ContainerRule'
    LAYER_RULE = 'LayerRule'
    SCOPE_RULE = 'ScopeRule'
    STYLE_RULE = 'StyleRule'
    STARTING_STYLE_RULE = 'StartingStyleRule'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CSSRuleType: ...

@dataclass
class RuleUsage:
    style_sheet_id: StyleSheetId
    start_offset: float
    end_offset: float
    used: bool
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RuleUsage: ...

@dataclass
class SourceRange:
    start_line: int
    start_column: int
    end_line: int
    end_column: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SourceRange: ...

@dataclass
class ShorthandEntry:
    name: str
    value: str
    important: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShorthandEntry: ...

@dataclass
class CSSComputedStyleProperty:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSComputedStyleProperty: ...

@dataclass
class CSSStyle:
    css_properties: list[CSSProperty]
    shorthand_entries: list[ShorthandEntry]
    style_sheet_id: StyleSheetId | None = ...
    css_text: str | None = ...
    range_: SourceRange | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSStyle: ...

@dataclass
class CSSProperty:
    name: str
    value: str
    important: bool | None = ...
    implicit: bool | None = ...
    text: str | None = ...
    parsed_ok: bool | None = ...
    disabled: bool | None = ...
    range_: SourceRange | None = ...
    longhand_properties: list[CSSProperty] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSProperty: ...

@dataclass
class CSSMedia:
    text: str
    source: str
    source_url: str | None = ...
    range_: SourceRange | None = ...
    style_sheet_id: StyleSheetId | None = ...
    media_list: list[MediaQuery] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSMedia: ...

@dataclass
class MediaQuery:
    expressions: list[MediaQueryExpression]
    active: bool
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaQuery: ...

@dataclass
class MediaQueryExpression:
    value: float
    unit: str
    feature: str
    value_range: SourceRange | None = ...
    computed_length: float | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaQueryExpression: ...

@dataclass
class CSSContainerQuery:
    text: str
    range_: SourceRange | None = ...
    style_sheet_id: StyleSheetId | None = ...
    name: str | None = ...
    physical_axes: dom.PhysicalAxes | None = ...
    logical_axes: dom.LogicalAxes | None = ...
    queries_scroll_state: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSContainerQuery: ...

@dataclass
class CSSSupports:
    text: str
    active: bool
    range_: SourceRange | None = ...
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSSupports: ...

@dataclass
class CSSScope:
    text: str
    range_: SourceRange | None = ...
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSScope: ...

@dataclass
class CSSLayer:
    text: str
    range_: SourceRange | None = ...
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSLayer: ...

@dataclass
class CSSStartingStyle:
    range_: SourceRange | None = ...
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSStartingStyle: ...

@dataclass
class CSSLayerData:
    name: str
    order: float
    sub_layers: list[CSSLayerData] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSLayerData: ...

@dataclass
class PlatformFontUsage:
    family_name: str
    post_script_name: str
    is_custom_font: bool
    glyph_count: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlatformFontUsage: ...

@dataclass
class FontVariationAxis:
    tag: str
    name: str
    min_value: float
    max_value: float
    default_value: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FontVariationAxis: ...

@dataclass
class FontFace:
    font_family: str
    font_style: str
    font_variant: str
    font_weight: str
    font_stretch: str
    font_display: str
    unicode_range: str
    src: str
    platform_font_family: str
    font_variation_axes: list[FontVariationAxis] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FontFace: ...

@dataclass
class CSSTryRule:
    origin: StyleSheetOrigin
    style: CSSStyle
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSTryRule: ...

@dataclass
class CSSPositionTryRule:
    name: Value
    origin: StyleSheetOrigin
    style: CSSStyle
    active: bool
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSPositionTryRule: ...

@dataclass
class CSSKeyframesRule:
    animation_name: Value
    keyframes: list[CSSKeyframeRule]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSKeyframesRule: ...

@dataclass
class CSSPropertyRegistration:
    property_name: str
    inherits: bool
    syntax: str
    initial_value: Value | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSPropertyRegistration: ...

@dataclass
class CSSFontPaletteValuesRule:
    origin: StyleSheetOrigin
    font_palette_name: Value
    style: CSSStyle
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSFontPaletteValuesRule: ...

@dataclass
class CSSPropertyRule:
    origin: StyleSheetOrigin
    property_name: Value
    style: CSSStyle
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSPropertyRule: ...

@dataclass
class CSSFunctionParameter:
    name: str
    type_: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSFunctionParameter: ...

@dataclass
class CSSFunctionConditionNode:
    children: list[CSSFunctionNode]
    condition_text: str
    media: CSSMedia | None = ...
    container_queries: CSSContainerQuery | None = ...
    supports: CSSSupports | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSFunctionConditionNode: ...

@dataclass
class CSSFunctionNode:
    condition: CSSFunctionConditionNode | None = ...
    style: CSSStyle | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSFunctionNode: ...

@dataclass
class CSSFunctionRule:
    name: Value
    origin: StyleSheetOrigin
    parameters: list[CSSFunctionParameter]
    children: list[CSSFunctionNode]
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSFunctionRule: ...

@dataclass
class CSSKeyframeRule:
    origin: StyleSheetOrigin
    key_text: Value
    style: CSSStyle
    style_sheet_id: StyleSheetId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSKeyframeRule: ...

@dataclass
class StyleDeclarationEdit:
    style_sheet_id: StyleSheetId
    range_: SourceRange
    text: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleDeclarationEdit: ...

def add_rule(style_sheet_id: StyleSheetId, rule_text: str, location: SourceRange, node_for_property_syntax_validation: dom.NodeId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSRule]: ...
def collect_class_names(style_sheet_id: StyleSheetId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[str]]: ...
def create_style_sheet(frame_id: page.FrameId, force: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, StyleSheetId]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def force_pseudo_state(node_id: dom.NodeId, forced_pseudo_classes: list[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def force_starting_style(node_id: dom.NodeId, forced: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_background_colors(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[list[str] | None, str | None, str | None]]: ...
def get_computed_style_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[CSSComputedStyleProperty]]: ...
def resolve_values(values: list[str], node_id: dom.NodeId, property_name: str | None = None, pseudo_type: dom.PseudoType | None = None, pseudo_identifier: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[str]]: ...
def get_longhand_properties(shorthand_name: str, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[CSSProperty]]: ...
def get_inline_styles_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[CSSStyle | None, CSSStyle | None]]: ...
def get_animated_styles_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[list[CSSAnimationStyle] | None, CSSStyle | None, list[InheritedAnimatedStyleEntry] | None]]: ...
def get_matched_styles_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[CSSStyle | None, CSSStyle | None, list[RuleMatch] | None, list[PseudoElementMatches] | None, list[InheritedStyleEntry] | None, list[InheritedPseudoElementMatches] | None, list[CSSKeyframesRule] | None, list[CSSPositionTryRule] | None, int | None, list[CSSPropertyRule] | None, list[CSSPropertyRegistration] | None, CSSFontPaletteValuesRule | None, dom.NodeId | None, list[CSSFunctionRule] | None]]: ...
def get_media_queries() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[CSSMedia]]: ...
def get_platform_fonts_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[PlatformFontUsage]]: ...
def get_style_sheet_text(style_sheet_id: StyleSheetId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_layers_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSLayerData]: ...
def get_location_for_selector(style_sheet_id: StyleSheetId, selector_text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[SourceRange]]: ...
def track_computed_style_updates_for_node(node_id: dom.NodeId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def track_computed_style_updates(properties_to_track: list[CSSComputedStyleProperty]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def take_computed_style_updates() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[dom.NodeId]]: ...
def set_effective_property_value_for_node(node_id: dom.NodeId, property_name: str, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_property_rule_property_name(style_sheet_id: StyleSheetId, range_: SourceRange, property_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Value]: ...
def set_keyframe_key(style_sheet_id: StyleSheetId, range_: SourceRange, key_text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Value]: ...
def set_media_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSMedia]: ...
def set_container_query_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSContainerQuery]: ...
def set_supports_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSSupports]: ...
def set_scope_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSScope]: ...
def set_rule_selector(style_sheet_id: StyleSheetId, range_: SourceRange, selector: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SelectorList]: ...
def set_style_sheet_text(style_sheet_id: StyleSheetId, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str | None]: ...
def set_style_texts(edits: list[StyleDeclarationEdit], node_for_property_syntax_validation: dom.NodeId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[CSSStyle]]: ...
def start_rule_usage_tracking() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def stop_rule_usage_tracking() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[RuleUsage]]: ...
def take_coverage_delta() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[list[RuleUsage], float]]: ...
def set_local_fonts_enabled(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class FontsUpdated:
    font: FontFace | None
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FontsUpdated: ...

@dataclass
class MediaQueryResultChanged:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaQueryResultChanged: ...

@dataclass
class StyleSheetAdded:
    header: CSSStyleSheetHeader
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleSheetAdded: ...

@dataclass
class StyleSheetChanged:
    style_sheet_id: StyleSheetId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleSheetChanged: ...

@dataclass
class StyleSheetRemoved:
    style_sheet_id: StyleSheetId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleSheetRemoved: ...

@dataclass
class ComputedStyleUpdated:
    node_id: dom.NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ComputedStyleUpdated: ...
