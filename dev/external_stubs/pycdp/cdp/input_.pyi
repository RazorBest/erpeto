import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class TouchPoint:
    x: float
    y: float
    radius_x: float | None = ...
    radius_y: float | None = ...
    rotation_angle: float | None = ...
    force: float | None = ...
    tangential_pressure: float | None = ...
    tilt_x: float | None = ...
    tilt_y: float | None = ...
    twist: int | None = ...
    id_: float | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TouchPoint: ...

class GestureSourceType(enum.Enum):
    DEFAULT = 'default'
    TOUCH = 'touch'
    MOUSE = 'mouse'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> GestureSourceType: ...

class MouseButton(enum.Enum):
    NONE = 'none'
    LEFT = 'left'
    MIDDLE = 'middle'
    RIGHT = 'right'
    BACK = 'back'
    FORWARD = 'forward'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> MouseButton: ...

class TimeSinceEpoch(float):
    def to_json(self) -> float: ...
    @classmethod
    def from_json(cls, json: float) -> TimeSinceEpoch: ...

@dataclass
class DragDataItem:
    mime_type: str
    data: str
    title: str | None = ...
    base_url: str | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DragDataItem: ...

@dataclass
class DragData:
    items: list[DragDataItem]
    drag_operations_mask: int
    files: list[str] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DragData: ...

def dispatch_drag_event(type_: str, x: float, y: float, data: DragData, modifiers: int | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def dispatch_key_event(type_: str, modifiers: int | None = None, timestamp: TimeSinceEpoch | None = None, text: str | None = None, unmodified_text: str | None = None, key_identifier: str | None = None, code: str | None = None, key: str | None = None, windows_virtual_key_code: int | None = None, native_virtual_key_code: int | None = None, auto_repeat: bool | None = None, is_keypad: bool | None = None, is_system_key: bool | None = None, location: int | None = None, commands: list[str] | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def insert_text(text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def ime_set_composition(text: str, selection_start: int, selection_end: int, replacement_start: int | None = None, replacement_end: int | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def dispatch_mouse_event(type_: str, x: float, y: float, modifiers: int | None = None, timestamp: TimeSinceEpoch | None = None, button: MouseButton | None = None, buttons: int | None = None, click_count: int | None = None, force: float | None = None, tangential_pressure: float | None = None, tilt_x: float | None = None, tilt_y: float | None = None, twist: int | None = None, delta_x: float | None = None, delta_y: float | None = None, pointer_type: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def dispatch_touch_event(type_: str, touch_points: list[TouchPoint], modifiers: int | None = None, timestamp: TimeSinceEpoch | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def cancel_dragging() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def emulate_touch_from_mouse_event(type_: str, x: int, y: int, button: MouseButton, timestamp: TimeSinceEpoch | None = None, delta_x: float | None = None, delta_y: float | None = None, modifiers: int | None = None, click_count: int | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_ignore_input_events(ignore: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_intercept_drags(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def synthesize_pinch_gesture(x: float, y: float, scale_factor: float, relative_speed: int | None = None, gesture_source_type: GestureSourceType | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def synthesize_scroll_gesture(x: float, y: float, x_distance: float | None = None, y_distance: float | None = None, x_overscroll: float | None = None, y_overscroll: float | None = None, prevent_fling: bool | None = None, speed: int | None = None, gesture_source_type: GestureSourceType | None = None, repeat_count: int | None = None, repeat_delay_ms: int | None = None, interaction_marker_name: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def synthesize_tap_gesture(x: float, y: float, duration: int | None = None, tap_count: int | None = None, gesture_source_type: GestureSourceType | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class DragIntercepted:
    data: DragData
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DragIntercepted: ...
