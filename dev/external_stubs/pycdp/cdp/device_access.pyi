import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class RequestId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> RequestId: ...

class DeviceId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> DeviceId: ...

@dataclass
class PromptDevice:
    id_: DeviceId
    name: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PromptDevice: ...
    def __init__(self, id_, name) -> None: ...

def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def select_prompt(id_: RequestId, device_id: DeviceId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def cancel_prompt(id_: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class DeviceRequestPrompted:
    id_: RequestId
    devices: typing.List[PromptDevice]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DeviceRequestPrompted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, id_, devices) -> None: ...
