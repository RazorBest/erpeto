import enum
import typing
from . import dom as dom, network as network, page as page, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class AffectedCookie:
    name: str
    path: str
    domain: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AffectedCookie: ...
    def __init__(self, name, path, domain) -> None: ...

@dataclass
class AffectedRequest:
    request_id: network.RequestId
    url: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AffectedRequest: ...
    def __init__(self, request_id, url) -> None: ...

@dataclass
class AffectedFrame:
    frame_id: page.FrameId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AffectedFrame: ...
    def __init__(self, frame_id) -> None: ...

class CookieExclusionReason(enum.Enum):
    EXCLUDE_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX: str
    EXCLUDE_SAME_SITE_NONE_INSECURE: str
    EXCLUDE_SAME_SITE_LAX: str
    EXCLUDE_SAME_SITE_STRICT: str
    EXCLUDE_INVALID_SAME_PARTY: str
    EXCLUDE_SAME_PARTY_CROSS_PARTY_CONTEXT: str
    EXCLUDE_DOMAIN_NON_ASCII: str
    EXCLUDE_THIRD_PARTY_COOKIE_BLOCKED_IN_FIRST_PARTY_SET: str
    EXCLUDE_THIRD_PARTY_PHASEOUT: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CookieExclusionReason: ...

class CookieWarningReason(enum.Enum):
    WARN_SAME_SITE_UNSPECIFIED_CROSS_SITE_CONTEXT: str
    WARN_SAME_SITE_NONE_INSECURE: str
    WARN_SAME_SITE_UNSPECIFIED_LAX_ALLOW_UNSAFE: str
    WARN_SAME_SITE_STRICT_LAX_DOWNGRADE_STRICT: str
    WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_STRICT: str
    WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_LAX: str
    WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_STRICT: str
    WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_LAX: str
    WARN_ATTRIBUTE_VALUE_EXCEEDS_MAX_SIZE: str
    WARN_DOMAIN_NON_ASCII: str
    WARN_THIRD_PARTY_PHASEOUT: str
    WARN_CROSS_SITE_REDIRECT_DOWNGRADE_CHANGES_INCLUSION: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CookieWarningReason: ...

class CookieOperation(enum.Enum):
    SET_COOKIE: str
    READ_COOKIE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CookieOperation: ...

@dataclass
class CookieIssueDetails:
    cookie_warning_reasons: typing.List[CookieWarningReason]
    cookie_exclusion_reasons: typing.List[CookieExclusionReason]
    operation: CookieOperation
    cookie: typing.Optional[AffectedCookie] = ...
    raw_cookie_line: typing.Optional[str] = ...
    site_for_cookies: typing.Optional[str] = ...
    cookie_url: typing.Optional[str] = ...
    request: typing.Optional[AffectedRequest] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CookieIssueDetails: ...
    def __init__(self, cookie_warning_reasons, cookie_exclusion_reasons, operation, cookie, raw_cookie_line, site_for_cookies, cookie_url, request) -> None: ...

class MixedContentResolutionStatus(enum.Enum):
    MIXED_CONTENT_BLOCKED: str
    MIXED_CONTENT_AUTOMATICALLY_UPGRADED: str
    MIXED_CONTENT_WARNING: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> MixedContentResolutionStatus: ...

class MixedContentResourceType(enum.Enum):
    ATTRIBUTION_SRC: str
    AUDIO: str
    BEACON: str
    CSP_REPORT: str
    DOWNLOAD: str
    EVENT_SOURCE: str
    FAVICON: str
    FONT: str
    FORM: str
    FRAME: str
    IMAGE: str
    IMPORT: str
    MANIFEST: str
    PING: str
    PLUGIN_DATA: str
    PLUGIN_RESOURCE: str
    PREFETCH: str
    RESOURCE: str
    SCRIPT: str
    SERVICE_WORKER: str
    SHARED_WORKER: str
    SPECULATION_RULES: str
    STYLESHEET: str
    TRACK: str
    VIDEO: str
    WORKER: str
    XML_HTTP_REQUEST: str
    XSLT: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> MixedContentResourceType: ...

@dataclass
class MixedContentIssueDetails:
    resolution_status: MixedContentResolutionStatus
    insecure_url: str
    main_resource_url: str
    resource_type: typing.Optional[MixedContentResourceType] = ...
    request: typing.Optional[AffectedRequest] = ...
    frame: typing.Optional[AffectedFrame] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MixedContentIssueDetails: ...
    def __init__(self, resolution_status, insecure_url, main_resource_url, resource_type, request, frame) -> None: ...

class BlockedByResponseReason(enum.Enum):
    COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER: str
    COOP_SANDBOXED_I_FRAME_CANNOT_NAVIGATE_TO_COOP_PAGE: str
    CORP_NOT_SAME_ORIGIN: str
    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP: str
    CORP_NOT_SAME_SITE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> BlockedByResponseReason: ...

@dataclass
class BlockedByResponseIssueDetails:
    request: AffectedRequest
    reason: BlockedByResponseReason
    parent_frame: typing.Optional[AffectedFrame] = ...
    blocked_frame: typing.Optional[AffectedFrame] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BlockedByResponseIssueDetails: ...
    def __init__(self, request, reason, parent_frame, blocked_frame) -> None: ...

class HeavyAdResolutionStatus(enum.Enum):
    HEAVY_AD_BLOCKED: str
    HEAVY_AD_WARNING: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> HeavyAdResolutionStatus: ...

class HeavyAdReason(enum.Enum):
    NETWORK_TOTAL_LIMIT: str
    CPU_TOTAL_LIMIT: str
    CPU_PEAK_LIMIT: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> HeavyAdReason: ...

@dataclass
class HeavyAdIssueDetails:
    resolution: HeavyAdResolutionStatus
    reason: HeavyAdReason
    frame: AffectedFrame
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> HeavyAdIssueDetails: ...
    def __init__(self, resolution, reason, frame) -> None: ...

class ContentSecurityPolicyViolationType(enum.Enum):
    K_INLINE_VIOLATION: str
    K_EVAL_VIOLATION: str
    K_URL_VIOLATION: str
    K_TRUSTED_TYPES_SINK_VIOLATION: str
    K_TRUSTED_TYPES_POLICY_VIOLATION: str
    K_WASM_EVAL_VIOLATION: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ContentSecurityPolicyViolationType: ...

@dataclass
class SourceCodeLocation:
    url: str
    line_number: int
    column_number: int
    script_id: typing.Optional[runtime.ScriptId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SourceCodeLocation: ...
    def __init__(self, url, line_number, column_number, script_id) -> None: ...

@dataclass
class ContentSecurityPolicyIssueDetails:
    violated_directive: str
    is_report_only: bool
    content_security_policy_violation_type: ContentSecurityPolicyViolationType
    blocked_url: typing.Optional[str] = ...
    frame_ancestor: typing.Optional[AffectedFrame] = ...
    source_code_location: typing.Optional[SourceCodeLocation] = ...
    violating_node_id: typing.Optional[dom.BackendNodeId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ContentSecurityPolicyIssueDetails: ...
    def __init__(self, violated_directive, is_report_only, content_security_policy_violation_type, blocked_url, frame_ancestor, source_code_location, violating_node_id) -> None: ...

class SharedArrayBufferIssueType(enum.Enum):
    TRANSFER_ISSUE: str
    CREATION_ISSUE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SharedArrayBufferIssueType: ...

@dataclass
class SharedArrayBufferIssueDetails:
    source_code_location: SourceCodeLocation
    is_warning: bool
    type_: SharedArrayBufferIssueType
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SharedArrayBufferIssueDetails: ...
    def __init__(self, source_code_location, is_warning, type_) -> None: ...

@dataclass
class LowTextContrastIssueDetails:
    violating_node_id: dom.BackendNodeId
    violating_node_selector: str
    contrast_ratio: float
    threshold_aa: float
    threshold_aaa: float
    font_size: str
    font_weight: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LowTextContrastIssueDetails: ...
    def __init__(self, violating_node_id, violating_node_selector, contrast_ratio, threshold_aa, threshold_aaa, font_size, font_weight) -> None: ...

@dataclass
class CorsIssueDetails:
    cors_error_status: network.CorsErrorStatus
    is_warning: bool
    request: AffectedRequest
    location: typing.Optional[SourceCodeLocation] = ...
    initiator_origin: typing.Optional[str] = ...
    resource_ip_address_space: typing.Optional[network.IPAddressSpace] = ...
    client_security_state: typing.Optional[network.ClientSecurityState] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CorsIssueDetails: ...
    def __init__(self, cors_error_status, is_warning, request, location, initiator_origin, resource_ip_address_space, client_security_state) -> None: ...

class AttributionReportingIssueType(enum.Enum):
    PERMISSION_POLICY_DISABLED: str
    UNTRUSTWORTHY_REPORTING_ORIGIN: str
    INSECURE_CONTEXT: str
    INVALID_HEADER: str
    INVALID_REGISTER_TRIGGER_HEADER: str
    SOURCE_AND_TRIGGER_HEADERS: str
    SOURCE_IGNORED: str
    TRIGGER_IGNORED: str
    OS_SOURCE_IGNORED: str
    OS_TRIGGER_IGNORED: str
    INVALID_REGISTER_OS_SOURCE_HEADER: str
    INVALID_REGISTER_OS_TRIGGER_HEADER: str
    WEB_AND_OS_HEADERS: str
    NO_WEB_OR_OS_SUPPORT: str
    NAVIGATION_REGISTRATION_WITHOUT_TRANSIENT_USER_ACTIVATION: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AttributionReportingIssueType: ...

@dataclass
class AttributionReportingIssueDetails:
    violation_type: AttributionReportingIssueType
    request: typing.Optional[AffectedRequest] = ...
    violating_node_id: typing.Optional[dom.BackendNodeId] = ...
    invalid_parameter: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingIssueDetails: ...
    def __init__(self, violation_type, request, violating_node_id, invalid_parameter) -> None: ...

@dataclass
class QuirksModeIssueDetails:
    is_limited_quirks_mode: bool
    document_node_id: dom.BackendNodeId
    url: str
    frame_id: page.FrameId
    loader_id: network.LoaderId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> QuirksModeIssueDetails: ...
    def __init__(self, is_limited_quirks_mode, document_node_id, url, frame_id, loader_id) -> None: ...

@dataclass
class NavigatorUserAgentIssueDetails:
    url: str
    location: typing.Optional[SourceCodeLocation] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> NavigatorUserAgentIssueDetails: ...
    def __init__(self, url, location) -> None: ...

class GenericIssueErrorType(enum.Enum):
    CROSS_ORIGIN_PORTAL_POST_MESSAGE_ERROR: str
    FORM_LABEL_FOR_NAME_ERROR: str
    FORM_DUPLICATE_ID_FOR_INPUT_ERROR: str
    FORM_INPUT_WITH_NO_LABEL_ERROR: str
    FORM_AUTOCOMPLETE_ATTRIBUTE_EMPTY_ERROR: str
    FORM_EMPTY_ID_AND_NAME_ATTRIBUTES_FOR_INPUT_ERROR: str
    FORM_ARIA_LABELLED_BY_TO_NON_EXISTING_ID: str
    FORM_INPUT_ASSIGNED_AUTOCOMPLETE_VALUE_TO_ID_OR_NAME_ATTRIBUTE_ERROR: str
    FORM_LABEL_HAS_NEITHER_FOR_NOR_NESTED_INPUT: str
    FORM_LABEL_FOR_MATCHES_NON_EXISTING_ID_ERROR: str
    FORM_INPUT_HAS_WRONG_BUT_WELL_INTENDED_AUTOCOMPLETE_VALUE_ERROR: str
    RESPONSE_WAS_BLOCKED_BY_ORB: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> GenericIssueErrorType: ...

@dataclass
class GenericIssueDetails:
    error_type: GenericIssueErrorType
    frame_id: typing.Optional[page.FrameId] = ...
    violating_node_id: typing.Optional[dom.BackendNodeId] = ...
    violating_node_attribute: typing.Optional[str] = ...
    request: typing.Optional[AffectedRequest] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> GenericIssueDetails: ...
    def __init__(self, error_type, frame_id, violating_node_id, violating_node_attribute, request) -> None: ...

@dataclass
class DeprecationIssueDetails:
    source_code_location: SourceCodeLocation
    type_: str
    affected_frame: typing.Optional[AffectedFrame] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DeprecationIssueDetails: ...
    def __init__(self, source_code_location, type_, affected_frame) -> None: ...

@dataclass
class BounceTrackingIssueDetails:
    tracking_sites: typing.List[str]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BounceTrackingIssueDetails: ...
    def __init__(self, tracking_sites) -> None: ...

@dataclass
class CookieDeprecationMetadataIssueDetails:
    allowed_sites: typing.List[str]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CookieDeprecationMetadataIssueDetails: ...
    def __init__(self, allowed_sites) -> None: ...

class ClientHintIssueReason(enum.Enum):
    META_TAG_ALLOW_LIST_INVALID_ORIGIN: str
    META_TAG_MODIFIED_HTML: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ClientHintIssueReason: ...

@dataclass
class FederatedAuthRequestIssueDetails:
    federated_auth_request_issue_reason: FederatedAuthRequestIssueReason
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FederatedAuthRequestIssueDetails: ...
    def __init__(self, federated_auth_request_issue_reason) -> None: ...

class FederatedAuthRequestIssueReason(enum.Enum):
    SHOULD_EMBARGO: str
    TOO_MANY_REQUESTS: str
    WELL_KNOWN_HTTP_NOT_FOUND: str
    WELL_KNOWN_NO_RESPONSE: str
    WELL_KNOWN_INVALID_RESPONSE: str
    WELL_KNOWN_LIST_EMPTY: str
    WELL_KNOWN_INVALID_CONTENT_TYPE: str
    CONFIG_NOT_IN_WELL_KNOWN: str
    WELL_KNOWN_TOO_BIG: str
    CONFIG_HTTP_NOT_FOUND: str
    CONFIG_NO_RESPONSE: str
    CONFIG_INVALID_RESPONSE: str
    CONFIG_INVALID_CONTENT_TYPE: str
    CLIENT_METADATA_HTTP_NOT_FOUND: str
    CLIENT_METADATA_NO_RESPONSE: str
    CLIENT_METADATA_INVALID_RESPONSE: str
    CLIENT_METADATA_INVALID_CONTENT_TYPE: str
    DISABLED_IN_SETTINGS: str
    ERROR_FETCHING_SIGNIN: str
    INVALID_SIGNIN_RESPONSE: str
    ACCOUNTS_HTTP_NOT_FOUND: str
    ACCOUNTS_NO_RESPONSE: str
    ACCOUNTS_INVALID_RESPONSE: str
    ACCOUNTS_LIST_EMPTY: str
    ACCOUNTS_INVALID_CONTENT_TYPE: str
    ID_TOKEN_HTTP_NOT_FOUND: str
    ID_TOKEN_NO_RESPONSE: str
    ID_TOKEN_INVALID_RESPONSE: str
    ID_TOKEN_IDP_ERROR_RESPONSE: str
    ID_TOKEN_CROSS_SITE_IDP_ERROR_RESPONSE: str
    ID_TOKEN_INVALID_REQUEST: str
    ID_TOKEN_INVALID_CONTENT_TYPE: str
    ERROR_ID_TOKEN: str
    CANCELED: str
    RP_PAGE_NOT_VISIBLE: str
    SILENT_MEDIATION_FAILURE: str
    THIRD_PARTY_COOKIES_BLOCKED: str
    NOT_SIGNED_IN_WITH_IDP: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> FederatedAuthRequestIssueReason: ...

@dataclass
class FederatedAuthUserInfoRequestIssueDetails:
    federated_auth_user_info_request_issue_reason: FederatedAuthUserInfoRequestIssueReason
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FederatedAuthUserInfoRequestIssueDetails: ...
    def __init__(self, federated_auth_user_info_request_issue_reason) -> None: ...

class FederatedAuthUserInfoRequestIssueReason(enum.Enum):
    NOT_SAME_ORIGIN: str
    NOT_IFRAME: str
    NOT_POTENTIALLY_TRUSTWORTHY: str
    NO_API_PERMISSION: str
    NOT_SIGNED_IN_WITH_IDP: str
    NO_ACCOUNT_SHARING_PERMISSION: str
    INVALID_CONFIG_OR_WELL_KNOWN: str
    INVALID_ACCOUNTS_RESPONSE: str
    NO_RETURNING_USER_FROM_FETCHED_ACCOUNTS: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> FederatedAuthUserInfoRequestIssueReason: ...

@dataclass
class ClientHintIssueDetails:
    source_code_location: SourceCodeLocation
    client_hint_issue_reason: ClientHintIssueReason
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ClientHintIssueDetails: ...
    def __init__(self, source_code_location, client_hint_issue_reason) -> None: ...

@dataclass
class FailedRequestInfo:
    url: str
    failure_message: str
    request_id: typing.Optional[network.RequestId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FailedRequestInfo: ...
    def __init__(self, url, failure_message, request_id) -> None: ...

class StyleSheetLoadingIssueReason(enum.Enum):
    LATE_IMPORT_RULE: str
    REQUEST_FAILED: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StyleSheetLoadingIssueReason: ...

@dataclass
class StylesheetLoadingIssueDetails:
    source_code_location: SourceCodeLocation
    style_sheet_loading_issue_reason: StyleSheetLoadingIssueReason
    failed_request_info: typing.Optional[FailedRequestInfo] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StylesheetLoadingIssueDetails: ...
    def __init__(self, source_code_location, style_sheet_loading_issue_reason, failed_request_info) -> None: ...

class PropertyRuleIssueReason(enum.Enum):
    INVALID_SYNTAX: str
    INVALID_INITIAL_VALUE: str
    INVALID_INHERITS: str
    INVALID_NAME: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PropertyRuleIssueReason: ...

@dataclass
class PropertyRuleIssueDetails:
    source_code_location: SourceCodeLocation
    property_rule_issue_reason: PropertyRuleIssueReason
    property_value: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PropertyRuleIssueDetails: ...
    def __init__(self, source_code_location, property_rule_issue_reason, property_value) -> None: ...

class InspectorIssueCode(enum.Enum):
    COOKIE_ISSUE: str
    MIXED_CONTENT_ISSUE: str
    BLOCKED_BY_RESPONSE_ISSUE: str
    HEAVY_AD_ISSUE: str
    CONTENT_SECURITY_POLICY_ISSUE: str
    SHARED_ARRAY_BUFFER_ISSUE: str
    LOW_TEXT_CONTRAST_ISSUE: str
    CORS_ISSUE: str
    ATTRIBUTION_REPORTING_ISSUE: str
    QUIRKS_MODE_ISSUE: str
    NAVIGATOR_USER_AGENT_ISSUE: str
    GENERIC_ISSUE: str
    DEPRECATION_ISSUE: str
    CLIENT_HINT_ISSUE: str
    FEDERATED_AUTH_REQUEST_ISSUE: str
    BOUNCE_TRACKING_ISSUE: str
    COOKIE_DEPRECATION_METADATA_ISSUE: str
    STYLESHEET_LOADING_ISSUE: str
    FEDERATED_AUTH_USER_INFO_REQUEST_ISSUE: str
    PROPERTY_RULE_ISSUE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> InspectorIssueCode: ...

@dataclass
class InspectorIssueDetails:
    cookie_issue_details: typing.Optional[CookieIssueDetails] = ...
    mixed_content_issue_details: typing.Optional[MixedContentIssueDetails] = ...
    blocked_by_response_issue_details: typing.Optional[BlockedByResponseIssueDetails] = ...
    heavy_ad_issue_details: typing.Optional[HeavyAdIssueDetails] = ...
    content_security_policy_issue_details: typing.Optional[ContentSecurityPolicyIssueDetails] = ...
    shared_array_buffer_issue_details: typing.Optional[SharedArrayBufferIssueDetails] = ...
    low_text_contrast_issue_details: typing.Optional[LowTextContrastIssueDetails] = ...
    cors_issue_details: typing.Optional[CorsIssueDetails] = ...
    attribution_reporting_issue_details: typing.Optional[AttributionReportingIssueDetails] = ...
    quirks_mode_issue_details: typing.Optional[QuirksModeIssueDetails] = ...
    navigator_user_agent_issue_details: typing.Optional[NavigatorUserAgentIssueDetails] = ...
    generic_issue_details: typing.Optional[GenericIssueDetails] = ...
    deprecation_issue_details: typing.Optional[DeprecationIssueDetails] = ...
    client_hint_issue_details: typing.Optional[ClientHintIssueDetails] = ...
    federated_auth_request_issue_details: typing.Optional[FederatedAuthRequestIssueDetails] = ...
    bounce_tracking_issue_details: typing.Optional[BounceTrackingIssueDetails] = ...
    cookie_deprecation_metadata_issue_details: typing.Optional[CookieDeprecationMetadataIssueDetails] = ...
    stylesheet_loading_issue_details: typing.Optional[StylesheetLoadingIssueDetails] = ...
    property_rule_issue_details: typing.Optional[PropertyRuleIssueDetails] = ...
    federated_auth_user_info_request_issue_details: typing.Optional[FederatedAuthUserInfoRequestIssueDetails] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InspectorIssueDetails: ...
    def __init__(self, cookie_issue_details, mixed_content_issue_details, blocked_by_response_issue_details, heavy_ad_issue_details, content_security_policy_issue_details, shared_array_buffer_issue_details, low_text_contrast_issue_details, cors_issue_details, attribution_reporting_issue_details, quirks_mode_issue_details, navigator_user_agent_issue_details, generic_issue_details, deprecation_issue_details, client_hint_issue_details, federated_auth_request_issue_details, bounce_tracking_issue_details, cookie_deprecation_metadata_issue_details, stylesheet_loading_issue_details, property_rule_issue_details, federated_auth_user_info_request_issue_details) -> None: ...

class IssueId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> IssueId: ...

@dataclass
class InspectorIssue:
    code: InspectorIssueCode
    details: InspectorIssueDetails
    issue_id: typing.Optional[IssueId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InspectorIssue: ...
    def __init__(self, code, details, issue_id) -> None: ...

def get_encoded_response(request_id: network.RequestId, encoding: str, quality: typing.Optional[float] = None, size_only: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[str], int, int]]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def check_contrast(report_aaa: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def check_forms_issues() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[GenericIssueDetails]]: ...

@dataclass
class IssueAdded:
    issue: InspectorIssue
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> IssueAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, issue) -> None: ...
