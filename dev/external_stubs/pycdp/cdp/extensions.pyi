import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass as dataclass

class StorageArea(enum.Enum):
    SESSION = 'session'
    LOCAL = 'local'
    SYNC = 'sync'
    MANAGED = 'managed'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StorageArea: ...

def load_unpacked(path: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def uninstall(id_: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_storage_items(id_: str, storage_area: StorageArea, keys: list[str] | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]: ...
def remove_storage_items(id_: str, storage_area: StorageArea, keys: list[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_storage_items(id_: str, storage_area: StorageArea) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_storage_items(id_: str, storage_area: StorageArea, values: dict) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
