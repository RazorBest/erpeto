import enum
import typing
from . import browser as browser, network as network, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class SerializedStorageKey(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SerializedStorageKey: ...

class StorageType(enum.Enum):
    APPCACHE: str
    COOKIES: str
    FILE_SYSTEMS: str
    INDEXEDDB: str
    LOCAL_STORAGE: str
    SHADER_CACHE: str
    WEBSQL: str
    SERVICE_WORKERS: str
    CACHE_STORAGE: str
    INTEREST_GROUPS: str
    SHARED_STORAGE: str
    STORAGE_BUCKETS: str
    ALL_: str
    OTHER: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StorageType: ...

@dataclass
class UsageForType:
    storage_type: StorageType
    usage: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> UsageForType: ...
    def __init__(self, storage_type, usage) -> None: ...

@dataclass
class TrustTokens:
    issuer_origin: str
    count: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TrustTokens: ...
    def __init__(self, issuer_origin, count) -> None: ...

class InterestGroupAccessType(enum.Enum):
    JOIN: str
    LEAVE: str
    UPDATE: str
    LOADED: str
    BID: str
    WIN: str
    ADDITIONAL_BID: str
    ADDITIONAL_BID_WIN: str
    CLEAR: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> InterestGroupAccessType: ...

@dataclass
class InterestGroupAd:
    render_url: str
    metadata: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InterestGroupAd: ...
    def __init__(self, render_url, metadata) -> None: ...

@dataclass
class InterestGroupDetails:
    owner_origin: str
    name: str
    expiration_time: network.TimeSinceEpoch
    joining_origin: str
    trusted_bidding_signals_keys: typing.List[str]
    ads: typing.List[InterestGroupAd]
    ad_components: typing.List[InterestGroupAd]
    bidding_logic_url: typing.Optional[str] = ...
    bidding_wasm_helper_url: typing.Optional[str] = ...
    update_url: typing.Optional[str] = ...
    trusted_bidding_signals_url: typing.Optional[str] = ...
    user_bidding_signals: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InterestGroupDetails: ...
    def __init__(self, owner_origin, name, expiration_time, joining_origin, trusted_bidding_signals_keys, ads, ad_components, bidding_logic_url, bidding_wasm_helper_url, update_url, trusted_bidding_signals_url, user_bidding_signals) -> None: ...

class SharedStorageAccessType(enum.Enum):
    DOCUMENT_ADD_MODULE: str
    DOCUMENT_SELECT_URL: str
    DOCUMENT_RUN: str
    DOCUMENT_SET: str
    DOCUMENT_APPEND: str
    DOCUMENT_DELETE: str
    DOCUMENT_CLEAR: str
    WORKLET_SET: str
    WORKLET_APPEND: str
    WORKLET_DELETE: str
    WORKLET_CLEAR: str
    WORKLET_GET: str
    WORKLET_KEYS: str
    WORKLET_ENTRIES: str
    WORKLET_LENGTH: str
    WORKLET_REMAINING_BUDGET: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SharedStorageAccessType: ...

@dataclass
class SharedStorageEntry:
    key: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SharedStorageEntry: ...
    def __init__(self, key, value) -> None: ...

@dataclass
class SharedStorageMetadata:
    creation_time: network.TimeSinceEpoch
    length: int
    remaining_budget: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SharedStorageMetadata: ...
    def __init__(self, creation_time, length, remaining_budget) -> None: ...

@dataclass
class SharedStorageReportingMetadata:
    event_type: str
    reporting_url: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SharedStorageReportingMetadata: ...
    def __init__(self, event_type, reporting_url) -> None: ...

@dataclass
class SharedStorageUrlWithMetadata:
    url: str
    reporting_metadata: typing.List[SharedStorageReportingMetadata]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SharedStorageUrlWithMetadata: ...
    def __init__(self, url, reporting_metadata) -> None: ...

@dataclass
class SharedStorageAccessParams:
    script_source_url: typing.Optional[str] = ...
    operation_name: typing.Optional[str] = ...
    serialized_data: typing.Optional[str] = ...
    urls_with_metadata: typing.Optional[typing.List[SharedStorageUrlWithMetadata]] = ...
    key: typing.Optional[str] = ...
    value: typing.Optional[str] = ...
    ignore_if_present: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SharedStorageAccessParams: ...
    def __init__(self, script_source_url, operation_name, serialized_data, urls_with_metadata, key, value, ignore_if_present) -> None: ...

class StorageBucketsDurability(enum.Enum):
    RELAXED: str
    STRICT: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StorageBucketsDurability: ...

@dataclass
class StorageBucket:
    storage_key: SerializedStorageKey
    name: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StorageBucket: ...
    def __init__(self, storage_key, name) -> None: ...

@dataclass
class StorageBucketInfo:
    bucket: StorageBucket
    id_: str
    expiration: network.TimeSinceEpoch
    quota: float
    persistent: bool
    durability: StorageBucketsDurability
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StorageBucketInfo: ...
    def __init__(self, bucket, id_, expiration, quota, persistent, durability) -> None: ...

class AttributionReportingSourceType(enum.Enum):
    NAVIGATION: str
    EVENT: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AttributionReportingSourceType: ...

class UnsignedInt64AsBase10(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> UnsignedInt64AsBase10: ...

class UnsignedInt128AsBase16(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> UnsignedInt128AsBase16: ...

class SignedInt64AsBase10(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SignedInt64AsBase10: ...

@dataclass
class AttributionReportingFilterDataEntry:
    key: str
    values: typing.List[str]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingFilterDataEntry: ...
    def __init__(self, key, values) -> None: ...

@dataclass
class AttributionReportingFilterConfig:
    filter_values: typing.List[AttributionReportingFilterDataEntry]
    lookback_window: typing.Optional[int] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingFilterConfig: ...
    def __init__(self, filter_values, lookback_window) -> None: ...

@dataclass
class AttributionReportingFilterPair:
    filters: typing.List[AttributionReportingFilterConfig]
    not_filters: typing.List[AttributionReportingFilterConfig]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingFilterPair: ...
    def __init__(self, filters, not_filters) -> None: ...

@dataclass
class AttributionReportingAggregationKeysEntry:
    key: str
    value: UnsignedInt128AsBase16
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingAggregationKeysEntry: ...
    def __init__(self, key, value) -> None: ...

@dataclass
class AttributionReportingEventReportWindows:
    start: int
    ends: typing.List[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingEventReportWindows: ...
    def __init__(self, start, ends) -> None: ...

@dataclass
class AttributionReportingTriggerSpec:
    trigger_data: typing.List[float]
    event_report_windows: AttributionReportingEventReportWindows
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingTriggerSpec: ...
    def __init__(self, trigger_data, event_report_windows) -> None: ...

class AttributionReportingTriggerDataMatching(enum.Enum):
    EXACT: str
    MODULUS: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AttributionReportingTriggerDataMatching: ...

@dataclass
class AttributionReportingSourceRegistration:
    time: network.TimeSinceEpoch
    expiry: int
    trigger_specs: typing.List[AttributionReportingTriggerSpec]
    aggregatable_report_window: int
    type_: AttributionReportingSourceType
    source_origin: str
    reporting_origin: str
    destination_sites: typing.List[str]
    event_id: UnsignedInt64AsBase10
    priority: SignedInt64AsBase10
    filter_data: typing.List[AttributionReportingFilterDataEntry]
    aggregation_keys: typing.List[AttributionReportingAggregationKeysEntry]
    trigger_data_matching: AttributionReportingTriggerDataMatching
    debug_key: typing.Optional[UnsignedInt64AsBase10] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingSourceRegistration: ...
    def __init__(self, time, expiry, trigger_specs, aggregatable_report_window, type_, source_origin, reporting_origin, destination_sites, event_id, priority, filter_data, aggregation_keys, trigger_data_matching, debug_key) -> None: ...

class AttributionReportingSourceRegistrationResult(enum.Enum):
    SUCCESS: str
    INTERNAL_ERROR: str
    INSUFFICIENT_SOURCE_CAPACITY: str
    INSUFFICIENT_UNIQUE_DESTINATION_CAPACITY: str
    EXCESSIVE_REPORTING_ORIGINS: str
    PROHIBITED_BY_BROWSER_POLICY: str
    SUCCESS_NOISED: str
    DESTINATION_REPORTING_LIMIT_REACHED: str
    DESTINATION_GLOBAL_LIMIT_REACHED: str
    DESTINATION_BOTH_LIMITS_REACHED: str
    REPORTING_ORIGINS_PER_SITE_LIMIT_REACHED: str
    EXCEEDS_MAX_CHANNEL_CAPACITY: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AttributionReportingSourceRegistrationResult: ...

class AttributionReportingSourceRegistrationTimeConfig(enum.Enum):
    INCLUDE: str
    EXCLUDE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AttributionReportingSourceRegistrationTimeConfig: ...

@dataclass
class AttributionReportingAggregatableValueEntry:
    key: str
    value: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingAggregatableValueEntry: ...
    def __init__(self, key, value) -> None: ...

@dataclass
class AttributionReportingEventTriggerData:
    data: UnsignedInt64AsBase10
    priority: SignedInt64AsBase10
    filters: AttributionReportingFilterPair
    dedup_key: typing.Optional[UnsignedInt64AsBase10] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingEventTriggerData: ...
    def __init__(self, data, priority, filters, dedup_key) -> None: ...

@dataclass
class AttributionReportingAggregatableTriggerData:
    key_piece: UnsignedInt128AsBase16
    source_keys: typing.List[str]
    filters: AttributionReportingFilterPair
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingAggregatableTriggerData: ...
    def __init__(self, key_piece, source_keys, filters) -> None: ...

@dataclass
class AttributionReportingAggregatableDedupKey:
    filters: AttributionReportingFilterPair
    dedup_key: typing.Optional[UnsignedInt64AsBase10] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingAggregatableDedupKey: ...
    def __init__(self, filters, dedup_key) -> None: ...

@dataclass
class AttributionReportingTriggerRegistration:
    filters: AttributionReportingFilterPair
    aggregatable_dedup_keys: typing.List[AttributionReportingAggregatableDedupKey]
    event_trigger_data: typing.List[AttributionReportingEventTriggerData]
    aggregatable_trigger_data: typing.List[AttributionReportingAggregatableTriggerData]
    aggregatable_values: typing.List[AttributionReportingAggregatableValueEntry]
    debug_reporting: bool
    source_registration_time_config: AttributionReportingSourceRegistrationTimeConfig
    debug_key: typing.Optional[UnsignedInt64AsBase10] = ...
    aggregation_coordinator_origin: typing.Optional[str] = ...
    trigger_context_id: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingTriggerRegistration: ...
    def __init__(self, filters, aggregatable_dedup_keys, event_trigger_data, aggregatable_trigger_data, aggregatable_values, debug_reporting, source_registration_time_config, debug_key, aggregation_coordinator_origin, trigger_context_id) -> None: ...

class AttributionReportingEventLevelResult(enum.Enum):
    SUCCESS: str
    SUCCESS_DROPPED_LOWER_PRIORITY: str
    INTERNAL_ERROR: str
    NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION: str
    NO_MATCHING_SOURCES: str
    DEDUPLICATED: str
    EXCESSIVE_ATTRIBUTIONS: str
    PRIORITY_TOO_LOW: str
    NEVER_ATTRIBUTED_SOURCE: str
    EXCESSIVE_REPORTING_ORIGINS: str
    NO_MATCHING_SOURCE_FILTER_DATA: str
    PROHIBITED_BY_BROWSER_POLICY: str
    NO_MATCHING_CONFIGURATIONS: str
    EXCESSIVE_REPORTS: str
    FALSELY_ATTRIBUTED_SOURCE: str
    REPORT_WINDOW_PASSED: str
    NOT_REGISTERED: str
    REPORT_WINDOW_NOT_STARTED: str
    NO_MATCHING_TRIGGER_DATA: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AttributionReportingEventLevelResult: ...

class AttributionReportingAggregatableResult(enum.Enum):
    SUCCESS: str
    INTERNAL_ERROR: str
    NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION: str
    NO_MATCHING_SOURCES: str
    EXCESSIVE_ATTRIBUTIONS: str
    EXCESSIVE_REPORTING_ORIGINS: str
    NO_HISTOGRAMS: str
    INSUFFICIENT_BUDGET: str
    NO_MATCHING_SOURCE_FILTER_DATA: str
    NOT_REGISTERED: str
    PROHIBITED_BY_BROWSER_POLICY: str
    DEDUPLICATED: str
    REPORT_WINDOW_PASSED: str
    EXCESSIVE_REPORTS: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AttributionReportingAggregatableResult: ...

def get_storage_key_for_frame(frame_id: page.FrameId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SerializedStorageKey]: ...
def clear_data_for_origin(origin: str, storage_types: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_data_for_storage_key(storage_key: str, storage_types: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_cookies(browser_context_id: typing.Optional[browser.BrowserContextID] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[network.Cookie]]: ...
def set_cookies(cookies: typing.List[network.CookieParam], browser_context_id: typing.Optional[browser.BrowserContextID] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_cookies(browser_context_id: typing.Optional[browser.BrowserContextID] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_usage_and_quota(origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[float, float, bool, typing.List[UsageForType]]]: ...
def override_quota_for_origin(origin: str, quota_size: typing.Optional[float] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def track_cache_storage_for_origin(origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def track_cache_storage_for_storage_key(storage_key: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def track_indexed_db_for_origin(origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def track_indexed_db_for_storage_key(storage_key: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def untrack_cache_storage_for_origin(origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def untrack_cache_storage_for_storage_key(storage_key: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def untrack_indexed_db_for_origin(origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def untrack_indexed_db_for_storage_key(storage_key: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_trust_tokens() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[TrustTokens]]: ...
def clear_trust_tokens(issuer_origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def get_interest_group_details(owner_origin: str, name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, InterestGroupDetails]: ...
def set_interest_group_tracking(enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_shared_storage_metadata(owner_origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SharedStorageMetadata]: ...
def get_shared_storage_entries(owner_origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[SharedStorageEntry]]: ...
def set_shared_storage_entry(owner_origin: str, key: str, value: str, ignore_if_present: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def delete_shared_storage_entry(owner_origin: str, key: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_shared_storage_entries(owner_origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def reset_shared_storage_budget(owner_origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_shared_storage_tracking(enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_storage_bucket_tracking(storage_key: str, enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def delete_storage_bucket(bucket: StorageBucket) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def run_bounce_tracking_mitigations() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]: ...
def set_attribution_reporting_local_testing_mode(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_attribution_reporting_tracking(enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class CacheStorageContentUpdated:
    origin: str
    storage_key: str
    bucket_id: str
    cache_name: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CacheStorageContentUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, origin, storage_key, bucket_id, cache_name) -> None: ...

@dataclass
class CacheStorageListUpdated:
    origin: str
    storage_key: str
    bucket_id: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CacheStorageListUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, origin, storage_key, bucket_id) -> None: ...

@dataclass
class IndexedDBContentUpdated:
    origin: str
    storage_key: str
    bucket_id: str
    database_name: str
    object_store_name: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> IndexedDBContentUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, origin, storage_key, bucket_id, database_name, object_store_name) -> None: ...

@dataclass
class IndexedDBListUpdated:
    origin: str
    storage_key: str
    bucket_id: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> IndexedDBListUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, origin, storage_key, bucket_id) -> None: ...

@dataclass
class InterestGroupAccessed:
    access_time: network.TimeSinceEpoch
    type_: InterestGroupAccessType
    owner_origin: str
    name: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InterestGroupAccessed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, access_time, type_, owner_origin, name) -> None: ...

@dataclass
class SharedStorageAccessed:
    access_time: network.TimeSinceEpoch
    type_: SharedStorageAccessType
    main_frame_id: page.FrameId
    owner_origin: str
    params: SharedStorageAccessParams
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SharedStorageAccessed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, access_time, type_, main_frame_id, owner_origin, params) -> None: ...

@dataclass
class StorageBucketCreatedOrUpdated:
    bucket_info: StorageBucketInfo
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StorageBucketCreatedOrUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, bucket_info) -> None: ...

@dataclass
class StorageBucketDeleted:
    bucket_id: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StorageBucketDeleted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, bucket_id) -> None: ...

@dataclass
class AttributionReportingSourceRegistered:
    registration: AttributionReportingSourceRegistration
    result: AttributionReportingSourceRegistrationResult
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingSourceRegistered: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, registration, result) -> None: ...

@dataclass
class AttributionReportingTriggerRegistered:
    registration: AttributionReportingTriggerRegistration
    event_level: AttributionReportingEventLevelResult
    aggregatable: AttributionReportingAggregatableResult
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributionReportingTriggerRegistered: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, registration, event_level, aggregatable) -> None: ...
