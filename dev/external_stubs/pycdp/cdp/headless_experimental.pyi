import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class ScreenshotParams:
    format_: typing.Optional[str] = ...
    quality: typing.Optional[int] = ...
    optimize_for_speed: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScreenshotParams: ...
    def __init__(self, format_, quality, optimize_for_speed) -> None: ...

def begin_frame(frame_time_ticks: typing.Optional[float] = None, interval: typing.Optional[float] = None, no_display_updates: typing.Optional[bool] = None, screenshot: typing.Optional[ScreenshotParams] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[bool, typing.Optional[str]]]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
