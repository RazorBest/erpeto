import typing
from . import dom as dom, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class Animation:
    id_: str
    name: str
    paused_state: bool
    play_state: str
    playback_rate: float
    start_time: float
    current_time: float
    type_: str
    source: typing.Optional[AnimationEffect] = ...
    css_id: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Animation: ...
    def __init__(self, id_, name, paused_state, play_state, playback_rate, start_time, current_time, type_, source, css_id) -> None: ...

@dataclass
class AnimationEffect:
    delay: float
    end_delay: float
    iteration_start: float
    iterations: float
    duration: float
    direction: str
    fill: str
    easing: str
    backend_node_id: typing.Optional[dom.BackendNodeId] = ...
    keyframes_rule: typing.Optional[KeyframesRule] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AnimationEffect: ...
    def __init__(self, delay, end_delay, iteration_start, iterations, duration, direction, fill, easing, backend_node_id, keyframes_rule) -> None: ...

@dataclass
class KeyframesRule:
    keyframes: typing.List[KeyframeStyle]
    name: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> KeyframesRule: ...
    def __init__(self, keyframes, name) -> None: ...

@dataclass
class KeyframeStyle:
    offset: str
    easing: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> KeyframeStyle: ...
    def __init__(self, offset, easing) -> None: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_current_time(id_: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, float]: ...
def get_playback_rate() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, float]: ...
def release_animations(animations: typing.List[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def resolve_animation(animation_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.RemoteObject]: ...
def seek_animations(animations: typing.List[str], current_time: float) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_paused(animations: typing.List[str], paused: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_playback_rate(playback_rate: float) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_timing(animation_id: str, duration: float, delay: float) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class AnimationCanceled:
    id_: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AnimationCanceled: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, id_) -> None: ...

@dataclass
class AnimationCreated:
    id_: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AnimationCreated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, id_) -> None: ...

@dataclass
class AnimationStarted:
    animation: Animation
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AnimationStarted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, animation) -> None: ...
