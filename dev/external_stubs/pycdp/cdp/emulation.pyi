import enum
import typing
from . import dom as dom, network as network, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class SafeAreaInsets:
    top: int | None = ...
    top_max: int | None = ...
    left: int | None = ...
    left_max: int | None = ...
    bottom: int | None = ...
    bottom_max: int | None = ...
    right: int | None = ...
    right_max: int | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SafeAreaInsets: ...

@dataclass
class ScreenOrientation:
    type_: str
    angle: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScreenOrientation: ...

@dataclass
class DisplayFeature:
    orientation: str
    offset: int
    mask_length: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DisplayFeature: ...

@dataclass
class DevicePosture:
    type_: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DevicePosture: ...

@dataclass
class MediaFeature:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaFeature: ...

class VirtualTimePolicy(enum.Enum):
    ADVANCE = 'advance'
    PAUSE = 'pause'
    PAUSE_IF_NETWORK_FETCHES_PENDING = 'pauseIfNetworkFetchesPending'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> VirtualTimePolicy: ...

@dataclass
class UserAgentBrandVersion:
    brand: str
    version: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> UserAgentBrandVersion: ...

@dataclass
class UserAgentMetadata:
    platform: str
    platform_version: str
    architecture: str
    model: str
    mobile: bool
    brands: list[UserAgentBrandVersion] | None = ...
    full_version_list: list[UserAgentBrandVersion] | None = ...
    full_version: str | None = ...
    bitness: str | None = ...
    wow64: bool | None = ...
    form_factors: list[str] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> UserAgentMetadata: ...

class SensorType(enum.Enum):
    ABSOLUTE_ORIENTATION = 'absolute-orientation'
    ACCELEROMETER = 'accelerometer'
    AMBIENT_LIGHT = 'ambient-light'
    GRAVITY = 'gravity'
    GYROSCOPE = 'gyroscope'
    LINEAR_ACCELERATION = 'linear-acceleration'
    MAGNETOMETER = 'magnetometer'
    RELATIVE_ORIENTATION = 'relative-orientation'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SensorType: ...

@dataclass
class SensorMetadata:
    available: bool | None = ...
    minimum_frequency: float | None = ...
    maximum_frequency: float | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorMetadata: ...

@dataclass
class SensorReadingSingle:
    value: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingSingle: ...

@dataclass
class SensorReadingXYZ:
    x: float
    y: float
    z: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingXYZ: ...

@dataclass
class SensorReadingQuaternion:
    x: float
    y: float
    z: float
    w: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingQuaternion: ...

@dataclass
class SensorReading:
    single: SensorReadingSingle | None = ...
    xyz: SensorReadingXYZ | None = ...
    quaternion: SensorReadingQuaternion | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReading: ...

class PressureSource(enum.Enum):
    CPU = 'cpu'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PressureSource: ...

class PressureState(enum.Enum):
    NOMINAL = 'nominal'
    FAIR = 'fair'
    SERIOUS = 'serious'
    CRITICAL = 'critical'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PressureState: ...

@dataclass
class PressureMetadata:
    available: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PressureMetadata: ...

class DisabledImageType(enum.Enum):
    AVIF = 'avif'
    WEBP = 'webp'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> DisabledImageType: ...

def can_emulate() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def clear_device_metrics_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_geolocation_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def reset_page_scale_factor() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_focus_emulation_enabled(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_auto_dark_mode_override(enabled: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_cpu_throttling_rate(rate: float) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_default_background_color_override(color: dom.RGBA | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_safe_area_insets_override(insets: SafeAreaInsets) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_device_metrics_override(width: int, height: int, device_scale_factor: float, mobile: bool, scale: float | None = None, screen_width: int | None = None, screen_height: int | None = None, position_x: int | None = None, position_y: int | None = None, dont_set_visible_size: bool | None = None, screen_orientation: ScreenOrientation | None = None, viewport: page.Viewport | None = None, display_feature: DisplayFeature | None = None, device_posture: DevicePosture | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_device_posture_override(posture: DevicePosture) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_device_posture_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_display_features_override(features: list[DisplayFeature]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_display_features_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_scrollbars_hidden(hidden: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_document_cookie_disabled(disabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_emit_touch_events_for_mouse(enabled: bool, configuration: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_emulated_media(media: str | None = None, features: list[MediaFeature] | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_emulated_vision_deficiency(type_: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_emulated_os_text_scale(scale: float | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_geolocation_override(latitude: float | None = None, longitude: float | None = None, accuracy: float | None = None, altitude: float | None = None, altitude_accuracy: float | None = None, heading: float | None = None, speed: float | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_overridden_sensor_information(type_: SensorType) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, float]: ...
def set_sensor_override_enabled(enabled: bool, type_: SensorType, metadata: SensorMetadata | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_sensor_override_readings(type_: SensorType, reading: SensorReading) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_pressure_source_override_enabled(enabled: bool, source: PressureSource, metadata: PressureMetadata | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_pressure_state_override(source: PressureSource, state: PressureState) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_pressure_data_override(source: PressureSource, state: PressureState, own_contribution_estimate: float | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_idle_override(is_user_active: bool, is_screen_unlocked: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_idle_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_navigator_overrides(platform: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_page_scale_factor(page_scale_factor: float) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_script_execution_disabled(value: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_touch_emulation_enabled(enabled: bool, max_touch_points: int | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_virtual_time_policy(policy: VirtualTimePolicy, budget: float | None = None, max_virtual_time_task_starvation_count: int | None = None, initial_virtual_time: network.TimeSinceEpoch | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, float]: ...
def set_locale_override(locale: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_timezone_override(timezone_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_visible_size(width: int, height: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_disabled_image_types(image_types: list[DisabledImageType]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_data_saver_override(data_saver_enabled: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_hardware_concurrency_override(hardware_concurrency: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_user_agent_override(user_agent: str, accept_language: str | None = None, platform: str | None = None, user_agent_metadata: UserAgentMetadata | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_automation_override(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_small_viewport_height_difference_override(difference: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class VirtualTimeBudgetExpired:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VirtualTimeBudgetExpired: ...
