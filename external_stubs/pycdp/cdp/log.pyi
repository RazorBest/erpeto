import typing
from . import network as network, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class LogEntry:
    source: str
    level: str
    text: str
    timestamp: runtime.Timestamp
    category: typing.Optional[str] = ...
    url: typing.Optional[str] = ...
    line_number: typing.Optional[int] = ...
    stack_trace: typing.Optional[runtime.StackTrace] = ...
    network_request_id: typing.Optional[network.RequestId] = ...
    worker_id: typing.Optional[str] = ...
    args: typing.Optional[typing.List[runtime.RemoteObject]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LogEntry: ...
    def __init__(self, source, level, text, timestamp, category, url, line_number, stack_trace, network_request_id, worker_id, args) -> None: ...

@dataclass
class ViolationSetting:
    name: str
    threshold: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ViolationSetting: ...
    def __init__(self, name, threshold) -> None: ...

def clear() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def start_violations_report(config: typing.List[ViolationSetting]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def stop_violations_report() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class EntryAdded:
    entry: LogEntry
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> EntryAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, entry) -> None: ...
