import enum
import typing
from . import page as page, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class NodeId(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> NodeId: ...

class BackendNodeId(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> BackendNodeId: ...

@dataclass
class BackendNode:
    node_type: int
    node_name: str
    backend_node_id: BackendNodeId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BackendNode: ...

class PseudoType(enum.Enum):
    FIRST_LINE = 'first-line'
    FIRST_LETTER = 'first-letter'
    CHECKMARK = 'checkmark'
    BEFORE = 'before'
    AFTER = 'after'
    PICKER_ICON = 'picker-icon'
    MARKER = 'marker'
    BACKDROP = 'backdrop'
    COLUMN = 'column'
    SELECTION = 'selection'
    SEARCH_TEXT = 'search-text'
    TARGET_TEXT = 'target-text'
    SPELLING_ERROR = 'spelling-error'
    GRAMMAR_ERROR = 'grammar-error'
    HIGHLIGHT = 'highlight'
    FIRST_LINE_INHERITED = 'first-line-inherited'
    SCROLL_MARKER = 'scroll-marker'
    SCROLL_MARKER_GROUP = 'scroll-marker-group'
    SCROLL_BUTTON = 'scroll-button'
    SCROLLBAR = 'scrollbar'
    SCROLLBAR_THUMB = 'scrollbar-thumb'
    SCROLLBAR_BUTTON = 'scrollbar-button'
    SCROLLBAR_TRACK = 'scrollbar-track'
    SCROLLBAR_TRACK_PIECE = 'scrollbar-track-piece'
    SCROLLBAR_CORNER = 'scrollbar-corner'
    RESIZER = 'resizer'
    INPUT_LIST_BUTTON = 'input-list-button'
    VIEW_TRANSITION = 'view-transition'
    VIEW_TRANSITION_GROUP = 'view-transition-group'
    VIEW_TRANSITION_IMAGE_PAIR = 'view-transition-image-pair'
    VIEW_TRANSITION_GROUP_CHILDREN = 'view-transition-group-children'
    VIEW_TRANSITION_OLD = 'view-transition-old'
    VIEW_TRANSITION_NEW = 'view-transition-new'
    PLACEHOLDER = 'placeholder'
    FILE_SELECTOR_BUTTON = 'file-selector-button'
    DETAILS_CONTENT = 'details-content'
    PICKER = 'picker'
    PERMISSION_ICON = 'permission-icon'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PseudoType: ...

class ShadowRootType(enum.Enum):
    USER_AGENT = 'user-agent'
    OPEN_ = 'open'
    CLOSED = 'closed'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ShadowRootType: ...

class CompatibilityMode(enum.Enum):
    QUIRKS_MODE = 'QuirksMode'
    LIMITED_QUIRKS_MODE = 'LimitedQuirksMode'
    NO_QUIRKS_MODE = 'NoQuirksMode'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CompatibilityMode: ...

class PhysicalAxes(enum.Enum):
    HORIZONTAL = 'Horizontal'
    VERTICAL = 'Vertical'
    BOTH = 'Both'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PhysicalAxes: ...

class LogicalAxes(enum.Enum):
    INLINE = 'Inline'
    BLOCK = 'Block'
    BOTH = 'Both'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> LogicalAxes: ...

class ScrollOrientation(enum.Enum):
    HORIZONTAL = 'horizontal'
    VERTICAL = 'vertical'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ScrollOrientation: ...

@dataclass
class Node:
    node_id: NodeId
    backend_node_id: BackendNodeId
    node_type: int
    node_name: str
    local_name: str
    node_value: str
    parent_id: NodeId | None = ...
    child_node_count: int | None = ...
    children: list[Node] | None = ...
    attributes: list[str] | None = ...
    document_url: str | None = ...
    base_url: str | None = ...
    public_id: str | None = ...
    system_id: str | None = ...
    internal_subset: str | None = ...
    xml_version: str | None = ...
    name: str | None = ...
    value: str | None = ...
    pseudo_type: PseudoType | None = ...
    pseudo_identifier: str | None = ...
    shadow_root_type: ShadowRootType | None = ...
    frame_id: page.FrameId | None = ...
    content_document: Node | None = ...
    shadow_roots: list[Node] | None = ...
    template_content: Node | None = ...
    pseudo_elements: list[Node] | None = ...
    imported_document: Node | None = ...
    distributed_nodes: list[BackendNode] | None = ...
    is_svg: bool | None = ...
    compatibility_mode: CompatibilityMode | None = ...
    assigned_slot: BackendNode | None = ...
    is_scrollable: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Node: ...

@dataclass
class DetachedElementInfo:
    tree_node: Node
    retained_node_ids: list[NodeId]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DetachedElementInfo: ...

@dataclass
class RGBA:
    r: int
    g: int
    b: int
    a: float | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RGBA: ...

class Quad(list):
    def to_json(self) -> list[float]: ...
    @classmethod
    def from_json(cls, json: list[float]) -> Quad: ...

@dataclass
class BoxModel:
    content: Quad
    padding: Quad
    border: Quad
    margin: Quad
    width: int
    height: int
    shape_outside: ShapeOutsideInfo | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BoxModel: ...

@dataclass
class ShapeOutsideInfo:
    bounds: Quad
    shape: list[typing.Any]
    margin_shape: list[typing.Any]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShapeOutsideInfo: ...

@dataclass
class Rect:
    x: float
    y: float
    width: float
    height: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Rect: ...

@dataclass
class CSSComputedStyleProperty:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSComputedStyleProperty: ...

def collect_class_names_from_subtree(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[str]]: ...
def copy_to(node_id: NodeId, target_node_id: NodeId, insert_before_node_id: NodeId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def describe_node(node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_id: runtime.RemoteObjectId | None = None, depth: int | None = None, pierce: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Node]: ...
def scroll_into_view_if_needed(node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_id: runtime.RemoteObjectId | None = None, rect: Rect | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def discard_search_results(search_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable(include_whitespace: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def focus(node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_id: runtime.RemoteObjectId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_attributes(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[str]]: ...
def get_box_model(node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_id: runtime.RemoteObjectId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, BoxModel]: ...
def get_content_quads(node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_id: runtime.RemoteObjectId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[Quad]]: ...
def get_document(depth: int | None = None, pierce: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Node]: ...
def get_flattened_document(depth: int | None = None, pierce: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[Node]]: ...
def get_nodes_for_subtree_by_style(node_id: NodeId, computed_styles: list[CSSComputedStyleProperty], pierce: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[NodeId]]: ...
def get_node_for_location(x: int, y: int, include_user_agent_shadow_dom: bool | None = None, ignore_pointer_events_none: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[BackendNodeId, page.FrameId, NodeId | None]]: ...
def get_outer_html(node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_id: runtime.RemoteObjectId | None = None, include_shadow_dom: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_relayout_boundary(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def get_search_results(search_id: str, from_index: int, to_index: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[NodeId]]: ...
def hide_highlight() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_node() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_rect() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def mark_undoable_state() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def move_to(node_id: NodeId, target_node_id: NodeId, insert_before_node_id: NodeId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def perform_search(query: str, include_user_agent_shadow_dom: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, int]]: ...
def push_node_by_path_to_frontend(path: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def push_nodes_by_backend_ids_to_frontend(backend_node_ids: list[BackendNodeId]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[NodeId]]: ...
def query_selector(node_id: NodeId, selector: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def query_selector_all(node_id: NodeId, selector: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[NodeId]]: ...
def get_top_layer_elements() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[NodeId]]: ...
def get_element_by_relation(node_id: NodeId, relation: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def redo() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_attribute(node_id: NodeId, name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_node(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def request_child_nodes(node_id: NodeId, depth: int | None = None, pierce: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def request_node(object_id: runtime.RemoteObjectId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def resolve_node(node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_group: str | None = None, execution_context_id: runtime.ExecutionContextId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.RemoteObject]: ...
def set_attribute_value(node_id: NodeId, name: str, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_attributes_as_text(node_id: NodeId, text: str, name: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_file_input_files(files: list[str], node_id: NodeId | None = None, backend_node_id: BackendNodeId | None = None, object_id: runtime.RemoteObjectId | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_node_stack_traces_enabled(enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_node_stack_traces(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.StackTrace | None]: ...
def get_file_info(object_id: runtime.RemoteObjectId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_detached_dom_nodes() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[DetachedElementInfo]]: ...
def set_inspected_node(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_node_name(node_id: NodeId, name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def set_node_value(node_id: NodeId, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_outer_html(node_id: NodeId, outer_html: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def undo() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_frame_owner(frame_id: page.FrameId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[BackendNodeId, NodeId | None]]: ...
def get_container_for_node(node_id: NodeId, container_name: str | None = None, physical_axes: PhysicalAxes | None = None, logical_axes: LogicalAxes | None = None, queries_scroll_state: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId | None]: ...
def get_querying_descendants_for_container(node_id: NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[NodeId]]: ...
def get_anchor_element(node_id: NodeId, anchor_specifier: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]: ...
def force_show_popover(node_id: NodeId, enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[NodeId]]: ...

@dataclass
class AttributeModified:
    node_id: NodeId
    name: str
    value: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributeModified: ...

@dataclass
class AttributeRemoved:
    node_id: NodeId
    name: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AttributeRemoved: ...

@dataclass
class CharacterDataModified:
    node_id: NodeId
    character_data: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CharacterDataModified: ...

@dataclass
class ChildNodeCountUpdated:
    node_id: NodeId
    child_node_count: int
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ChildNodeCountUpdated: ...

@dataclass
class ChildNodeInserted:
    parent_node_id: NodeId
    previous_node_id: NodeId
    node: Node
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ChildNodeInserted: ...

@dataclass
class ChildNodeRemoved:
    parent_node_id: NodeId
    node_id: NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ChildNodeRemoved: ...

@dataclass
class DistributedNodesUpdated:
    insertion_point_id: NodeId
    distributed_nodes: list[BackendNode]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DistributedNodesUpdated: ...

@dataclass
class DocumentUpdated:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DocumentUpdated: ...

@dataclass
class InlineStyleInvalidated:
    node_ids: list[NodeId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InlineStyleInvalidated: ...

@dataclass
class PseudoElementAdded:
    parent_id: NodeId
    pseudo_element: Node
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PseudoElementAdded: ...

@dataclass
class TopLayerElementsUpdated:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TopLayerElementsUpdated: ...

@dataclass
class ScrollableFlagUpdated:
    node_id: NodeId
    is_scrollable: bool
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScrollableFlagUpdated: ...

@dataclass
class PseudoElementRemoved:
    parent_id: NodeId
    pseudo_element_id: NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PseudoElementRemoved: ...

@dataclass
class SetChildNodes:
    parent_id: NodeId
    nodes: list[Node]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SetChildNodes: ...

@dataclass
class ShadowRootPopped:
    host_id: NodeId
    root_id: NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShadowRootPopped: ...

@dataclass
class ShadowRootPushed:
    host_id: NodeId
    root: Node
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShadowRootPushed: ...
