import enum
import typing
from . import dom as dom, page as page, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class SourceOrderConfig:
    parent_outline_color: dom.RGBA
    child_outline_color: dom.RGBA
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SourceOrderConfig: ...
    def __init__(self, parent_outline_color, child_outline_color) -> None: ...

@dataclass
class GridHighlightConfig:
    show_grid_extension_lines: typing.Optional[bool] = ...
    show_positive_line_numbers: typing.Optional[bool] = ...
    show_negative_line_numbers: typing.Optional[bool] = ...
    show_area_names: typing.Optional[bool] = ...
    show_line_names: typing.Optional[bool] = ...
    show_track_sizes: typing.Optional[bool] = ...
    grid_border_color: typing.Optional[dom.RGBA] = ...
    cell_border_color: typing.Optional[dom.RGBA] = ...
    row_line_color: typing.Optional[dom.RGBA] = ...
    column_line_color: typing.Optional[dom.RGBA] = ...
    grid_border_dash: typing.Optional[bool] = ...
    cell_border_dash: typing.Optional[bool] = ...
    row_line_dash: typing.Optional[bool] = ...
    column_line_dash: typing.Optional[bool] = ...
    row_gap_color: typing.Optional[dom.RGBA] = ...
    row_hatch_color: typing.Optional[dom.RGBA] = ...
    column_gap_color: typing.Optional[dom.RGBA] = ...
    column_hatch_color: typing.Optional[dom.RGBA] = ...
    area_border_color: typing.Optional[dom.RGBA] = ...
    grid_background_color: typing.Optional[dom.RGBA] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> GridHighlightConfig: ...
    def __init__(self, show_grid_extension_lines, show_positive_line_numbers, show_negative_line_numbers, show_area_names, show_line_names, show_track_sizes, grid_border_color, cell_border_color, row_line_color, column_line_color, grid_border_dash, cell_border_dash, row_line_dash, column_line_dash, row_gap_color, row_hatch_color, column_gap_color, column_hatch_color, area_border_color, grid_background_color) -> None: ...

@dataclass
class FlexContainerHighlightConfig:
    container_border: typing.Optional[LineStyle] = ...
    line_separator: typing.Optional[LineStyle] = ...
    item_separator: typing.Optional[LineStyle] = ...
    main_distributed_space: typing.Optional[BoxStyle] = ...
    cross_distributed_space: typing.Optional[BoxStyle] = ...
    row_gap_space: typing.Optional[BoxStyle] = ...
    column_gap_space: typing.Optional[BoxStyle] = ...
    cross_alignment: typing.Optional[LineStyle] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FlexContainerHighlightConfig: ...
    def __init__(self, container_border, line_separator, item_separator, main_distributed_space, cross_distributed_space, row_gap_space, column_gap_space, cross_alignment) -> None: ...

@dataclass
class FlexItemHighlightConfig:
    base_size_box: typing.Optional[BoxStyle] = ...
    base_size_border: typing.Optional[LineStyle] = ...
    flexibility_arrow: typing.Optional[LineStyle] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FlexItemHighlightConfig: ...
    def __init__(self, base_size_box, base_size_border, flexibility_arrow) -> None: ...

@dataclass
class LineStyle:
    color: typing.Optional[dom.RGBA] = ...
    pattern: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LineStyle: ...
    def __init__(self, color, pattern) -> None: ...

@dataclass
class BoxStyle:
    fill_color: typing.Optional[dom.RGBA] = ...
    hatch_color: typing.Optional[dom.RGBA] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BoxStyle: ...
    def __init__(self, fill_color, hatch_color) -> None: ...

class ContrastAlgorithm(enum.Enum):
    AA: str
    AAA: str
    APCA: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ContrastAlgorithm: ...

@dataclass
class HighlightConfig:
    show_info: typing.Optional[bool] = ...
    show_styles: typing.Optional[bool] = ...
    show_rulers: typing.Optional[bool] = ...
    show_accessibility_info: typing.Optional[bool] = ...
    show_extension_lines: typing.Optional[bool] = ...
    content_color: typing.Optional[dom.RGBA] = ...
    padding_color: typing.Optional[dom.RGBA] = ...
    border_color: typing.Optional[dom.RGBA] = ...
    margin_color: typing.Optional[dom.RGBA] = ...
    event_target_color: typing.Optional[dom.RGBA] = ...
    shape_color: typing.Optional[dom.RGBA] = ...
    shape_margin_color: typing.Optional[dom.RGBA] = ...
    css_grid_color: typing.Optional[dom.RGBA] = ...
    color_format: typing.Optional[ColorFormat] = ...
    grid_highlight_config: typing.Optional[GridHighlightConfig] = ...
    flex_container_highlight_config: typing.Optional[FlexContainerHighlightConfig] = ...
    flex_item_highlight_config: typing.Optional[FlexItemHighlightConfig] = ...
    contrast_algorithm: typing.Optional[ContrastAlgorithm] = ...
    container_query_container_highlight_config: typing.Optional[ContainerQueryContainerHighlightConfig] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> HighlightConfig: ...
    def __init__(self, show_info, show_styles, show_rulers, show_accessibility_info, show_extension_lines, content_color, padding_color, border_color, margin_color, event_target_color, shape_color, shape_margin_color, css_grid_color, color_format, grid_highlight_config, flex_container_highlight_config, flex_item_highlight_config, contrast_algorithm, container_query_container_highlight_config) -> None: ...

class ColorFormat(enum.Enum):
    RGB: str
    HSL: str
    HWB: str
    HEX_: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ColorFormat: ...

@dataclass
class GridNodeHighlightConfig:
    grid_highlight_config: GridHighlightConfig
    node_id: dom.NodeId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> GridNodeHighlightConfig: ...
    def __init__(self, grid_highlight_config, node_id) -> None: ...

@dataclass
class FlexNodeHighlightConfig:
    flex_container_highlight_config: FlexContainerHighlightConfig
    node_id: dom.NodeId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FlexNodeHighlightConfig: ...
    def __init__(self, flex_container_highlight_config, node_id) -> None: ...

@dataclass
class ScrollSnapContainerHighlightConfig:
    snapport_border: typing.Optional[LineStyle] = ...
    snap_area_border: typing.Optional[LineStyle] = ...
    scroll_margin_color: typing.Optional[dom.RGBA] = ...
    scroll_padding_color: typing.Optional[dom.RGBA] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScrollSnapContainerHighlightConfig: ...
    def __init__(self, snapport_border, snap_area_border, scroll_margin_color, scroll_padding_color) -> None: ...

@dataclass
class ScrollSnapHighlightConfig:
    scroll_snap_container_highlight_config: ScrollSnapContainerHighlightConfig
    node_id: dom.NodeId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScrollSnapHighlightConfig: ...
    def __init__(self, scroll_snap_container_highlight_config, node_id) -> None: ...

@dataclass
class HingeConfig:
    rect: dom.Rect
    content_color: typing.Optional[dom.RGBA] = ...
    outline_color: typing.Optional[dom.RGBA] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> HingeConfig: ...
    def __init__(self, rect, content_color, outline_color) -> None: ...

@dataclass
class WindowControlsOverlayConfig:
    show_css: bool
    selected_platform: str
    theme_color: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WindowControlsOverlayConfig: ...
    def __init__(self, show_css, selected_platform, theme_color) -> None: ...

@dataclass
class ContainerQueryHighlightConfig:
    container_query_container_highlight_config: ContainerQueryContainerHighlightConfig
    node_id: dom.NodeId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ContainerQueryHighlightConfig: ...
    def __init__(self, container_query_container_highlight_config, node_id) -> None: ...

@dataclass
class ContainerQueryContainerHighlightConfig:
    container_border: typing.Optional[LineStyle] = ...
    descendant_border: typing.Optional[LineStyle] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ContainerQueryContainerHighlightConfig: ...
    def __init__(self, container_border, descendant_border) -> None: ...

@dataclass
class IsolatedElementHighlightConfig:
    isolation_mode_highlight_config: IsolationModeHighlightConfig
    node_id: dom.NodeId
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> IsolatedElementHighlightConfig: ...
    def __init__(self, isolation_mode_highlight_config, node_id) -> None: ...

@dataclass
class IsolationModeHighlightConfig:
    resizer_color: typing.Optional[dom.RGBA] = ...
    resizer_handle_color: typing.Optional[dom.RGBA] = ...
    mask_color: typing.Optional[dom.RGBA] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> IsolationModeHighlightConfig: ...
    def __init__(self, resizer_color, resizer_handle_color, mask_color) -> None: ...

class InspectMode(enum.Enum):
    SEARCH_FOR_NODE: str
    SEARCH_FOR_UA_SHADOW_DOM: str
    CAPTURE_AREA_SCREENSHOT: str
    SHOW_DISTANCES: str
    NONE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> InspectMode: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_highlight_object_for_test(node_id: dom.NodeId, include_distance: typing.Optional[bool] = None, include_style: typing.Optional[bool] = None, color_format: typing.Optional[ColorFormat] = None, show_accessibility_info: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]: ...
def get_grid_highlight_objects_for_test(node_ids: typing.List[dom.NodeId]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]: ...
def get_source_order_highlight_object_for_test(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]: ...
def hide_highlight() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_frame(frame_id: page.FrameId, content_color: typing.Optional[dom.RGBA] = None, content_outline_color: typing.Optional[dom.RGBA] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_node(highlight_config: HighlightConfig, node_id: typing.Optional[dom.NodeId] = None, backend_node_id: typing.Optional[dom.BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None, selector: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_quad(quad: dom.Quad, color: typing.Optional[dom.RGBA] = None, outline_color: typing.Optional[dom.RGBA] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_rect(x: int, y: int, width: int, height: int, color: typing.Optional[dom.RGBA] = None, outline_color: typing.Optional[dom.RGBA] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def highlight_source_order(source_order_config: SourceOrderConfig, node_id: typing.Optional[dom.NodeId] = None, backend_node_id: typing.Optional[dom.BackendNodeId] = None, object_id: typing.Optional[runtime.RemoteObjectId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_inspect_mode(mode: InspectMode, highlight_config: typing.Optional[HighlightConfig] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_ad_highlights(show: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_paused_in_debugger_message(message: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_debug_borders(show: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_fps_counter(show: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_grid_overlays(grid_node_highlight_configs: typing.List[GridNodeHighlightConfig]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_flex_overlays(flex_node_highlight_configs: typing.List[FlexNodeHighlightConfig]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_scroll_snap_overlays(scroll_snap_highlight_configs: typing.List[ScrollSnapHighlightConfig]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_container_query_overlays(container_query_highlight_configs: typing.List[ContainerQueryHighlightConfig]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_paint_rects(result: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_layout_shift_regions(result: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_scroll_bottleneck_rects(show: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_hit_test_borders(show: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_web_vitals(show: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_viewport_size_on_resize(show: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_hinge(hinge_config: typing.Optional[HingeConfig] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_isolated_elements(isolated_element_highlight_configs: typing.List[IsolatedElementHighlightConfig]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_show_window_controls_overlay(window_controls_overlay_config: typing.Optional[WindowControlsOverlayConfig] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class InspectNodeRequested:
    backend_node_id: dom.BackendNodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InspectNodeRequested: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, backend_node_id) -> None: ...

@dataclass
class NodeHighlightRequested:
    node_id: dom.NodeId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> NodeHighlightRequested: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, node_id) -> None: ...

@dataclass
class ScreenshotRequested:
    viewport: page.Viewport
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScreenshotRequested: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, viewport) -> None: ...

@dataclass
class InspectModeCanceled:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InspectModeCanceled: ...
    def to_json(self) -> T_JSON_DICT: ...
