import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class AuthenticatorId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AuthenticatorId: ...

class AuthenticatorProtocol(enum.Enum):
    U2F = 'u2f'
    CTAP2 = 'ctap2'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AuthenticatorProtocol: ...

class Ctap2Version(enum.Enum):
    CTAP2_0 = 'ctap2_0'
    CTAP2_1 = 'ctap2_1'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> Ctap2Version: ...

class AuthenticatorTransport(enum.Enum):
    USB = 'usb'
    NFC = 'nfc'
    BLE = 'ble'
    CABLE = 'cable'
    INTERNAL = 'internal'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AuthenticatorTransport: ...

@dataclass
class VirtualAuthenticatorOptions:
    protocol: AuthenticatorProtocol
    transport: AuthenticatorTransport
    ctap2_version: Ctap2Version | None = ...
    has_resident_key: bool | None = ...
    has_user_verification: bool | None = ...
    has_large_blob: bool | None = ...
    has_cred_blob: bool | None = ...
    has_min_pin_length: bool | None = ...
    has_prf: bool | None = ...
    automatic_presence_simulation: bool | None = ...
    is_user_verified: bool | None = ...
    default_backup_eligibility: bool | None = ...
    default_backup_state: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VirtualAuthenticatorOptions: ...

@dataclass
class Credential:
    credential_id: str
    is_resident_credential: bool
    private_key: str
    sign_count: int
    rp_id: str | None = ...
    user_handle: str | None = ...
    large_blob: str | None = ...
    backup_eligibility: bool | None = ...
    backup_state: bool | None = ...
    user_name: str | None = ...
    user_display_name: str | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Credential: ...

def enable(enable_ui: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_virtual_authenticator(options: VirtualAuthenticatorOptions) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, AuthenticatorId]: ...
def set_response_override_bits(authenticator_id: AuthenticatorId, is_bogus_signature: bool | None = None, is_bad_uv: bool | None = None, is_bad_up: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_virtual_authenticator(authenticator_id: AuthenticatorId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_credential(authenticator_id: AuthenticatorId, credential: Credential) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_credential(authenticator_id: AuthenticatorId, credential_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Credential]: ...
def get_credentials(authenticator_id: AuthenticatorId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[Credential]]: ...
def remove_credential(authenticator_id: AuthenticatorId, credential_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_credentials(authenticator_id: AuthenticatorId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_user_verified(authenticator_id: AuthenticatorId, is_user_verified: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_automatic_presence_simulation(authenticator_id: AuthenticatorId, enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_credential_properties(authenticator_id: AuthenticatorId, credential_id: str, backup_eligibility: bool | None = None, backup_state: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class CredentialAdded:
    authenticator_id: AuthenticatorId
    credential: Credential
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CredentialAdded: ...

@dataclass
class CredentialDeleted:
    authenticator_id: AuthenticatorId
    credential_id: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CredentialDeleted: ...

@dataclass
class CredentialUpdated:
    authenticator_id: AuthenticatorId
    credential: Credential
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CredentialUpdated: ...

@dataclass
class CredentialAsserted:
    authenticator_id: AuthenticatorId
    credential: Credential
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CredentialAsserted: ...
