from _typeshed import Incomplete
from collections import OrderedDict
from typing import Optional

__all__ = ['public', 'encode_truncate', 'xor', 'utcnow', 'utcstr', 'id', 'rid', 'newid', 'rtime', 'Stopwatch', 'Tracker', 'EqualityMixin', 'ObservableMixin', 'IdGenerator', 'generate_token', 'generate_activation_code', 'generate_serial_number', 'generate_user_password', 'machine_id', 'parse_keyfile', 'write_keyfile', 'hl', 'hltype', 'hlid', 'hluserid', 'hlval', 'hlcontract', 'with_0x', 'without_0x']

def public(obj): ...
def encode_truncate(text, limit, encoding: str = 'utf8', return_encoded: bool = True): ...
def xor(d1: bytes, d2: bytes) -> bytes: ...
def utcstr(ts: Incomplete | None = None): ...
def utcnow(): ...

class IdGenerator:
    def __init__(self) -> None: ...
    def next(self): ...
    def __next__(self): ...

def rid(): ...
def id(): ...
def newid(length: int = 16): ...
def generate_token(char_groups: int, chars_per_group: int, chars: Optional[str] = None, sep: Optional[str] = None, lower_case: Optional[bool] = False) -> str: ...
def generate_activation_code(): ...
def generate_user_password(): ...
def generate_serial_number(): ...
def rtime(): ...

class Stopwatch:
    def __init__(self, start: bool = True) -> None: ...
    def elapsed(self): ...
    def pause(self): ...
    def resume(self): ...
    def stop(self): ...

class Tracker:
    tracker: Incomplete
    tracked: Incomplete
    def __init__(self, tracker, tracked) -> None: ...
    def track(self, key) -> None: ...
    def diff(self, start_key, end_key, formatted: bool = True): ...
    def absolute(self, key): ...
    def __getitem__(self, key): ...
    def __iter__(self): ...

class EqualityMixin:
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class ObservableMixin:
    def set_valid_events(self, valid_events: Incomplete | None = None) -> None: ...
    def on(self, event, handler) -> None: ...
    def off(self, event: Incomplete | None = None, handler: Incomplete | None = None) -> None: ...
    def fire(self, event, *args, **kwargs): ...

class _LazyHexFormatter:
    obj: Incomplete
    def __init__(self, obj) -> None: ...

def machine_id() -> str: ...
def hl(text, bold: bool = False, color: str = 'yellow'): ...
def hltype(obj): ...
def hlid(oid): ...
def hluserid(oid): ...
def hlval(val, color: str = 'white', bold: bool = True): ...
def hlcontract(oid): ...
def with_0x(address): ...
def without_0x(address): ...
def write_keyfile(filepath, tags, msg) -> None: ...
def parse_keyfile(key_path: str, private: bool = True) -> OrderedDict: ...
