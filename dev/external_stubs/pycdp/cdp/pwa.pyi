import enum
import typing
from . import target as target
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class FileHandlerAccept:
    media_type: str
    file_extensions: list[str]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FileHandlerAccept: ...

@dataclass
class FileHandler:
    action: str
    accepts: list[FileHandlerAccept]
    display_name: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FileHandler: ...

class DisplayMode(enum.Enum):
    STANDALONE = 'standalone'
    BROWSER = 'browser'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> DisplayMode: ...

def get_os_app_state(manifest_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[int, list[FileHandler]]]: ...
def install(manifest_id: str, install_url_or_bundle_url: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def uninstall(manifest_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def launch(manifest_id: str, url: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, target.TargetID]: ...
def launch_files_in_app(manifest_id: str, files: list[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[target.TargetID]]: ...
def open_current_page_in_app(manifest_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def change_app_user_settings(manifest_id: str, link_capturing: bool | None = None, display_mode: DisplayMode | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
