import twisted.internet.protocol
from _typeshed import Incomplete
from autobahn.wamp import websocket
from autobahn.websocket import protocol
from autobahn.websocket.interfaces import IWebSocketClientAgent
from twisted.python.failure import Failure
from typing import Optional

__all__ = ['create_client_agent', 'WebSocketAdapterProtocol', 'WebSocketServerProtocol', 'WebSocketClientProtocol', 'WebSocketAdapterFactory', 'WebSocketServerFactory', 'WebSocketClientFactory', 'WrappingWebSocketAdapter', 'WrappingWebSocketServerProtocol', 'WrappingWebSocketClientProtocol', 'WrappingWebSocketServerFactory', 'WrappingWebSocketClientFactory', 'listenWS', 'connectWS', 'WampWebSocketServerProtocol', 'WampWebSocketServerFactory', 'WampWebSocketClientProtocol', 'WampWebSocketClientFactory']

def create_client_agent(reactor): ...

class _TwistedWebSocketClientAgent(IWebSocketClientAgent):
    def __init__(self, reactor) -> None: ...
    def open(self, transport_config, options, protocol_class: Incomplete | None = None): ...

class WebSocketAdapterProtocol(twisted.internet.protocol.Protocol):
    log: Incomplete
    peer: Optional[str]
    is_server: Optional[bool]
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Failure = ...): ...
    def dataReceived(self, data: bytes): ...
    def registerProducer(self, producer, streaming) -> None: ...
    def unregisterProducer(self) -> None: ...

class WebSocketServerProtocol(WebSocketAdapterProtocol, protocol.WebSocketServerProtocol):
    log: Incomplete
    is_server: bool

class WebSocketClientProtocol(WebSocketAdapterProtocol, protocol.WebSocketClientProtocol):
    log: Incomplete
    is_server: bool
    def startTLS(self) -> None: ...

class WebSocketAdapterFactory: ...

class WebSocketServerFactory(WebSocketAdapterFactory, protocol.WebSocketServerFactory, twisted.internet.protocol.ServerFactory):
    log: Incomplete
    reactor: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class WebSocketClientFactory(WebSocketAdapterFactory, protocol.WebSocketClientFactory, twisted.internet.protocol.ClientFactory):
    log: Incomplete
    reactor: Incomplete
    contextFactory: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class WrappingWebSocketAdapter:
    def onConnect(self, requestOrResponse): ...
    def onOpen(self) -> None: ...
    def onMessage(self, payload, isBinary) -> None: ...
    def onClose(self, wasClean, code, reason) -> None: ...
    def write(self, data) -> None: ...
    def writeSequence(self, data) -> None: ...
    def loseConnection(self) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...

class WrappingWebSocketServerProtocol(WrappingWebSocketAdapter, WebSocketServerProtocol): ...
class WrappingWebSocketClientProtocol(WrappingWebSocketAdapter, WebSocketClientProtocol): ...

class WrappingWebSocketServerFactory(WebSocketServerFactory):
    def __init__(self, factory, url, reactor: Incomplete | None = None, enableCompression: bool = True, autoFragmentSize: int = 0, subprotocol: Incomplete | None = None) -> None: ...
    def buildProtocol(self, addr): ...
    def startFactory(self) -> None: ...
    def stopFactory(self) -> None: ...

class WrappingWebSocketClientFactory(WebSocketClientFactory):
    def __init__(self, factory, url, reactor: Incomplete | None = None, enableCompression: bool = True, autoFragmentSize: int = 0, subprotocol: Incomplete | None = None) -> None: ...
    def buildProtocol(self, addr): ...

def connectWS(factory, contextFactory: Incomplete | None = None, timeout: int = 30, bindAddress: Incomplete | None = None): ...
def listenWS(factory, contextFactory: Incomplete | None = None, backlog: int = 50, interface: str = ''): ...

class WampWebSocketServerProtocol(websocket.WampWebSocketServerProtocol, WebSocketServerProtocol): ...

class WampWebSocketServerFactory(websocket.WampWebSocketServerFactory, WebSocketServerFactory):
    protocol = WampWebSocketServerProtocol
    def __init__(self, factory, *args, **kwargs) -> None: ...

class WampWebSocketClientProtocol(websocket.WampWebSocketClientProtocol, WebSocketClientProtocol): ...

class WampWebSocketClientFactory(websocket.WampWebSocketClientFactory, WebSocketClientFactory):
    protocol = WampWebSocketClientProtocol
    noisy: bool
    def __init__(self, factory, *args, **kwargs) -> None: ...
