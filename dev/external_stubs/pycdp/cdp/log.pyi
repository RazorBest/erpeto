import typing
from . import network as network, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class LogEntry:
    source: str
    level: str
    text: str
    timestamp: runtime.Timestamp
    category: str | None = ...
    url: str | None = ...
    line_number: int | None = ...
    stack_trace: runtime.StackTrace | None = ...
    network_request_id: network.RequestId | None = ...
    worker_id: str | None = ...
    args: list[runtime.RemoteObject] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LogEntry: ...

@dataclass
class ViolationSetting:
    name: str
    threshold: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ViolationSetting: ...

def clear() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def start_violations_report(config: list[ViolationSetting]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def stop_violations_report() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class EntryAdded:
    entry: LogEntry
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> EntryAdded: ...
