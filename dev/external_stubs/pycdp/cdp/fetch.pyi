import enum
import typing
from . import io as io, network as network, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class RequestId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> RequestId: ...

class RequestStage(enum.Enum):
    REQUEST: str
    RESPONSE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> RequestStage: ...

@dataclass
class RequestPattern:
    url_pattern: typing.Optional[str] = ...
    resource_type: typing.Optional[network.ResourceType] = ...
    request_stage: typing.Optional[RequestStage] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestPattern: ...
    def __init__(self, url_pattern, resource_type, request_stage) -> None: ...

@dataclass
class HeaderEntry:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> HeaderEntry: ...
    def __init__(self, name, value) -> None: ...

@dataclass
class AuthChallenge:
    origin: str
    scheme: str
    realm: str
    source: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthChallenge: ...
    def __init__(self, origin, scheme, realm, source) -> None: ...

@dataclass
class AuthChallengeResponse:
    response: str
    username: typing.Optional[str] = ...
    password: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthChallengeResponse: ...
    def __init__(self, response, username, password) -> None: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable(patterns: typing.Optional[typing.List[RequestPattern]] = None, handle_auth_requests: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def fail_request(request_id: RequestId, error_reason: network.ErrorReason) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def fulfill_request(request_id: RequestId, response_code: int, response_headers: typing.Optional[typing.List[HeaderEntry]] = None, binary_response_headers: typing.Optional[str] = None, body: typing.Optional[str] = None, response_phrase: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def continue_request(request_id: RequestId, url: typing.Optional[str] = None, method: typing.Optional[str] = None, post_data: typing.Optional[str] = None, headers: typing.Optional[typing.List[HeaderEntry]] = None, intercept_response: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def continue_with_auth(request_id: RequestId, auth_challenge_response: AuthChallengeResponse) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def continue_response(request_id: RequestId, response_code: typing.Optional[int] = None, response_phrase: typing.Optional[str] = None, response_headers: typing.Optional[typing.List[HeaderEntry]] = None, binary_response_headers: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_response_body(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]: ...
def take_response_body_as_stream(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, io.StreamHandle]: ...

@dataclass
class RequestPaused:
    request_id: RequestId
    request: network.Request
    frame_id: page.FrameId
    resource_type: network.ResourceType
    response_error_reason: typing.Optional[network.ErrorReason]
    response_status_code: typing.Optional[int]
    response_status_text: typing.Optional[str]
    response_headers: typing.Optional[typing.List[HeaderEntry]]
    network_id: typing.Optional[network.RequestId]
    redirected_request_id: typing.Optional[RequestId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestPaused: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, request, frame_id, resource_type, response_error_reason, response_status_code, response_status_text, response_headers, network_id, redirected_request_id) -> None: ...

@dataclass
class AuthRequired:
    request_id: RequestId
    request: network.Request
    frame_id: page.FrameId
    resource_type: network.ResourceType
    auth_challenge: AuthChallenge
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthRequired: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, request, frame_id, resource_type, auth_challenge) -> None: ...
