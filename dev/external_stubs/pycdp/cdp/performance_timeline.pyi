import typing
from . import dom as dom, network as network, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class LargestContentfulPaint:
    render_time: network.TimeSinceEpoch
    load_time: network.TimeSinceEpoch
    size: float
    element_id: typing.Optional[str] = ...
    url: typing.Optional[str] = ...
    node_id: typing.Optional[dom.BackendNodeId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LargestContentfulPaint: ...
    def __init__(self, render_time, load_time, size, element_id, url, node_id) -> None: ...

@dataclass
class LayoutShiftAttribution:
    previous_rect: dom.Rect
    current_rect: dom.Rect
    node_id: typing.Optional[dom.BackendNodeId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LayoutShiftAttribution: ...
    def __init__(self, previous_rect, current_rect, node_id) -> None: ...

@dataclass
class LayoutShift:
    value: float
    had_recent_input: bool
    last_input_time: network.TimeSinceEpoch
    sources: typing.List[LayoutShiftAttribution]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LayoutShift: ...
    def __init__(self, value, had_recent_input, last_input_time, sources) -> None: ...

@dataclass
class TimelineEvent:
    frame_id: page.FrameId
    type_: str
    name: str
    time: network.TimeSinceEpoch
    duration: typing.Optional[float] = ...
    lcp_details: typing.Optional[LargestContentfulPaint] = ...
    layout_shift_details: typing.Optional[LayoutShift] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TimelineEvent: ...
    def __init__(self, frame_id, type_, name, time, duration, lcp_details, layout_shift_details) -> None: ...

def enable(event_types: typing.List[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class TimelineEventAdded:
    event: TimelineEvent
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TimelineEventAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, event) -> None: ...
