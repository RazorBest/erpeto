import typing
from . import dom as dom, dom_debugger as dom_debugger, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class DOMNode:
    node_type: int
    node_name: str
    node_value: str
    backend_node_id: dom.BackendNodeId
    text_value: str | None = ...
    input_value: str | None = ...
    input_checked: bool | None = ...
    option_selected: bool | None = ...
    child_node_indexes: list[int] | None = ...
    attributes: list[NameValue] | None = ...
    pseudo_element_indexes: list[int] | None = ...
    layout_node_index: int | None = ...
    document_url: str | None = ...
    base_url: str | None = ...
    content_language: str | None = ...
    document_encoding: str | None = ...
    public_id: str | None = ...
    system_id: str | None = ...
    frame_id: page.FrameId | None = ...
    content_document_index: int | None = ...
    pseudo_type: dom.PseudoType | None = ...
    shadow_root_type: dom.ShadowRootType | None = ...
    is_clickable: bool | None = ...
    event_listeners: list[dom_debugger.EventListener] | None = ...
    current_source_url: str | None = ...
    origin_url: str | None = ...
    scroll_offset_x: float | None = ...
    scroll_offset_y: float | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DOMNode: ...

@dataclass
class InlineTextBox:
    bounding_box: dom.Rect
    start_character_index: int
    num_characters: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InlineTextBox: ...

@dataclass
class LayoutTreeNode:
    dom_node_index: int
    bounding_box: dom.Rect
    layout_text: str | None = ...
    inline_text_nodes: list[InlineTextBox] | None = ...
    style_index: int | None = ...
    paint_order: int | None = ...
    is_stacking_context: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LayoutTreeNode: ...

@dataclass
class ComputedStyle:
    properties: list[NameValue]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ComputedStyle: ...

@dataclass
class NameValue:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> NameValue: ...

class StringIndex(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> StringIndex: ...

class ArrayOfStrings(list):
    def to_json(self) -> list[StringIndex]: ...
    @classmethod
    def from_json(cls, json: list[StringIndex]) -> ArrayOfStrings: ...

@dataclass
class RareStringData:
    index: list[int]
    value: list[StringIndex]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RareStringData: ...

@dataclass
class RareBooleanData:
    index: list[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RareBooleanData: ...

@dataclass
class RareIntegerData:
    index: list[int]
    value: list[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RareIntegerData: ...

class Rectangle(list):
    def to_json(self) -> list[float]: ...
    @classmethod
    def from_json(cls, json: list[float]) -> Rectangle: ...

@dataclass
class DocumentSnapshot:
    document_url: StringIndex
    title: StringIndex
    base_url: StringIndex
    content_language: StringIndex
    encoding_name: StringIndex
    public_id: StringIndex
    system_id: StringIndex
    frame_id: StringIndex
    nodes: NodeTreeSnapshot
    layout: LayoutTreeSnapshot
    text_boxes: TextBoxSnapshot
    scroll_offset_x: float | None = ...
    scroll_offset_y: float | None = ...
    content_width: float | None = ...
    content_height: float | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DocumentSnapshot: ...

@dataclass
class NodeTreeSnapshot:
    parent_index: list[int] | None = ...
    node_type: list[int] | None = ...
    shadow_root_type: RareStringData | None = ...
    node_name: list[StringIndex] | None = ...
    node_value: list[StringIndex] | None = ...
    backend_node_id: list[dom.BackendNodeId] | None = ...
    attributes: list[ArrayOfStrings] | None = ...
    text_value: RareStringData | None = ...
    input_value: RareStringData | None = ...
    input_checked: RareBooleanData | None = ...
    option_selected: RareBooleanData | None = ...
    content_document_index: RareIntegerData | None = ...
    pseudo_type: RareStringData | None = ...
    pseudo_identifier: RareStringData | None = ...
    is_clickable: RareBooleanData | None = ...
    current_source_url: RareStringData | None = ...
    origin_url: RareStringData | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> NodeTreeSnapshot: ...

@dataclass
class LayoutTreeSnapshot:
    node_index: list[int]
    styles: list[ArrayOfStrings]
    bounds: list[Rectangle]
    text: list[StringIndex]
    stacking_contexts: RareBooleanData
    paint_orders: list[int] | None = ...
    offset_rects: list[Rectangle] | None = ...
    scroll_rects: list[Rectangle] | None = ...
    client_rects: list[Rectangle] | None = ...
    blended_background_colors: list[StringIndex] | None = ...
    text_color_opacities: list[float] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LayoutTreeSnapshot: ...

@dataclass
class TextBoxSnapshot:
    layout_index: list[int]
    bounds: list[Rectangle]
    start: list[int]
    length: list[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TextBoxSnapshot: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_snapshot(computed_style_whitelist: list[str], include_event_listeners: bool | None = None, include_paint_order: bool | None = None, include_user_agent_shadow_tree: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[list[DOMNode], list[LayoutTreeNode], list[ComputedStyle]]]: ...
def capture_snapshot(computed_styles: list[str], include_paint_order: bool | None = None, include_dom_rects: bool | None = None, include_blended_background_colors: bool | None = None, include_text_color_opacities: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[list[DocumentSnapshot], list[str]]]: ...
