import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class Sink:
    name: str
    id_: str
    session: str | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Sink: ...

def enable(presentation_url: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_sink_to_use(sink_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def start_desktop_mirroring(sink_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def start_tab_mirroring(sink_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def stop_casting(sink_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class SinksUpdated:
    sinks: list[Sink]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SinksUpdated: ...

@dataclass
class IssueUpdated:
    issue_message: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> IssueUpdated: ...
