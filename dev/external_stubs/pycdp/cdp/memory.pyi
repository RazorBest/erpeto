import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class PressureLevel(enum.Enum):
    MODERATE: str
    CRITICAL: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PressureLevel: ...

@dataclass
class SamplingProfileNode:
    size: float
    total: float
    stack: typing.List[str]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SamplingProfileNode: ...
    def __init__(self, size, total, stack) -> None: ...

@dataclass
class SamplingProfile:
    samples: typing.List[SamplingProfileNode]
    modules: typing.List[Module]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SamplingProfile: ...
    def __init__(self, samples, modules) -> None: ...

@dataclass
class Module:
    name: str
    uuid: str
    base_address: str
    size: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Module: ...
    def __init__(self, name, uuid, base_address, size) -> None: ...

def get_dom_counters() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[int, int, int]]: ...
def prepare_for_leak_detection() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def forcibly_purge_java_script_memory() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_pressure_notifications_suppressed(suppressed: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_pressure_notification(level: PressureLevel) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def start_sampling(sampling_interval: typing.Optional[int] = None, suppress_randomness: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def stop_sampling() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_all_time_sampling_profile() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]: ...
def get_browser_sampling_profile() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]: ...
def get_sampling_profile() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]: ...
