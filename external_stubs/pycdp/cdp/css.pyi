import enum
import typing
from . import dom as dom, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class StyleSheetId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StyleSheetId: ...

class StyleSheetOrigin(enum.Enum):
    INJECTED: str
    USER_AGENT: str
    INSPECTOR: str
    REGULAR: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StyleSheetOrigin: ...

@dataclass
class PseudoElementMatches:
    pseudo_type: dom.PseudoType
    matches: typing.List[RuleMatch]
    pseudo_identifier: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PseudoElementMatches: ...
    def __init__(self, pseudo_type, matches, pseudo_identifier) -> None: ...

@dataclass
class InheritedStyleEntry:
    matched_css_rules: typing.List[RuleMatch]
    inline_style: typing.Optional[CSSStyle] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InheritedStyleEntry: ...
    def __init__(self, matched_css_rules, inline_style) -> None: ...

@dataclass
class InheritedPseudoElementMatches:
    pseudo_elements: typing.List[PseudoElementMatches]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InheritedPseudoElementMatches: ...
    def __init__(self, pseudo_elements) -> None: ...

@dataclass
class RuleMatch:
    rule: CSSRule
    matching_selectors: typing.List[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RuleMatch: ...
    def __init__(self, rule, matching_selectors) -> None: ...

@dataclass
class Value:
    text: str
    range_: typing.Optional[SourceRange] = ...
    specificity: typing.Optional[Specificity] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Value: ...
    def __init__(self, text, range_, specificity) -> None: ...

@dataclass
class Specificity:
    a: int
    b: int
    c: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Specificity: ...
    def __init__(self, a, b, c) -> None: ...

@dataclass
class SelectorList:
    selectors: typing.List[Value]
    text: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SelectorList: ...
    def __init__(self, selectors, text) -> None: ...

@dataclass
class CSSStyleSheetHeader:
    style_sheet_id: StyleSheetId
    frame_id: page.FrameId
    source_url: str
    origin: StyleSheetOrigin
    title: str
    disabled: bool
    is_inline: bool
    is_mutable: bool
    is_constructed: bool
    start_line: float
    start_column: float
    length: float
    end_line: float
    end_column: float
    source_map_url: typing.Optional[str] = ...
    owner_node: typing.Optional[dom.BackendNodeId] = ...
    has_source_url: typing.Optional[bool] = ...
    loading_failed: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSStyleSheetHeader: ...
    def __init__(self, style_sheet_id, frame_id, source_url, origin, title, disabled, is_inline, is_mutable, is_constructed, start_line, start_column, length, end_line, end_column, source_map_url, owner_node, has_source_url, loading_failed) -> None: ...

@dataclass
class CSSRule:
    selector_list: SelectorList
    origin: StyleSheetOrigin
    style: CSSStyle
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    nesting_selectors: typing.Optional[typing.List[str]] = ...
    media: typing.Optional[typing.List[CSSMedia]] = ...
    container_queries: typing.Optional[typing.List[CSSContainerQuery]] = ...
    supports: typing.Optional[typing.List[CSSSupports]] = ...
    layers: typing.Optional[typing.List[CSSLayer]] = ...
    scopes: typing.Optional[typing.List[CSSScope]] = ...
    rule_types: typing.Optional[typing.List[CSSRuleType]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSRule: ...
    def __init__(self, selector_list, origin, style, style_sheet_id, nesting_selectors, media, container_queries, supports, layers, scopes, rule_types) -> None: ...

class CSSRuleType(enum.Enum):
    MEDIA_RULE: str
    SUPPORTS_RULE: str
    CONTAINER_RULE: str
    LAYER_RULE: str
    SCOPE_RULE: str
    STYLE_RULE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CSSRuleType: ...

@dataclass
class RuleUsage:
    style_sheet_id: StyleSheetId
    start_offset: float
    end_offset: float
    used: bool
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RuleUsage: ...
    def __init__(self, style_sheet_id, start_offset, end_offset, used) -> None: ...

@dataclass
class SourceRange:
    start_line: int
    start_column: int
    end_line: int
    end_column: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SourceRange: ...
    def __init__(self, start_line, start_column, end_line, end_column) -> None: ...

@dataclass
class ShorthandEntry:
    name: str
    value: str
    important: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ShorthandEntry: ...
    def __init__(self, name, value, important) -> None: ...

@dataclass
class CSSComputedStyleProperty:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSComputedStyleProperty: ...
    def __init__(self, name, value) -> None: ...

@dataclass
class CSSStyle:
    css_properties: typing.List[CSSProperty]
    shorthand_entries: typing.List[ShorthandEntry]
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    css_text: typing.Optional[str] = ...
    range_: typing.Optional[SourceRange] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSStyle: ...
    def __init__(self, css_properties, shorthand_entries, style_sheet_id, css_text, range_) -> None: ...

@dataclass
class CSSProperty:
    name: str
    value: str
    important: typing.Optional[bool] = ...
    implicit: typing.Optional[bool] = ...
    text: typing.Optional[str] = ...
    parsed_ok: typing.Optional[bool] = ...
    disabled: typing.Optional[bool] = ...
    range_: typing.Optional[SourceRange] = ...
    longhand_properties: typing.Optional[typing.List[CSSProperty]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSProperty: ...
    def __init__(self, name, value, important, implicit, text, parsed_ok, disabled, range_, longhand_properties) -> None: ...

@dataclass
class CSSMedia:
    text: str
    source: str
    source_url: typing.Optional[str] = ...
    range_: typing.Optional[SourceRange] = ...
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    media_list: typing.Optional[typing.List[MediaQuery]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSMedia: ...
    def __init__(self, text, source, source_url, range_, style_sheet_id, media_list) -> None: ...

@dataclass
class MediaQuery:
    expressions: typing.List[MediaQueryExpression]
    active: bool
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaQuery: ...
    def __init__(self, expressions, active) -> None: ...

@dataclass
class MediaQueryExpression:
    value: float
    unit: str
    feature: str
    value_range: typing.Optional[SourceRange] = ...
    computed_length: typing.Optional[float] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaQueryExpression: ...
    def __init__(self, value, unit, feature, value_range, computed_length) -> None: ...

@dataclass
class CSSContainerQuery:
    text: str
    range_: typing.Optional[SourceRange] = ...
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    name: typing.Optional[str] = ...
    physical_axes: typing.Optional[dom.PhysicalAxes] = ...
    logical_axes: typing.Optional[dom.LogicalAxes] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSContainerQuery: ...
    def __init__(self, text, range_, style_sheet_id, name, physical_axes, logical_axes) -> None: ...

@dataclass
class CSSSupports:
    text: str
    active: bool
    range_: typing.Optional[SourceRange] = ...
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSSupports: ...
    def __init__(self, text, active, range_, style_sheet_id) -> None: ...

@dataclass
class CSSScope:
    text: str
    range_: typing.Optional[SourceRange] = ...
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSScope: ...
    def __init__(self, text, range_, style_sheet_id) -> None: ...

@dataclass
class CSSLayer:
    text: str
    range_: typing.Optional[SourceRange] = ...
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSLayer: ...
    def __init__(self, text, range_, style_sheet_id) -> None: ...

@dataclass
class CSSLayerData:
    name: str
    order: float
    sub_layers: typing.Optional[typing.List[CSSLayerData]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSLayerData: ...
    def __init__(self, name, order, sub_layers) -> None: ...

@dataclass
class PlatformFontUsage:
    family_name: str
    post_script_name: str
    is_custom_font: bool
    glyph_count: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlatformFontUsage: ...
    def __init__(self, family_name, post_script_name, is_custom_font, glyph_count) -> None: ...

@dataclass
class FontVariationAxis:
    tag: str
    name: str
    min_value: float
    max_value: float
    default_value: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FontVariationAxis: ...
    def __init__(self, tag, name, min_value, max_value, default_value) -> None: ...

@dataclass
class FontFace:
    font_family: str
    font_style: str
    font_variant: str
    font_weight: str
    font_stretch: str
    font_display: str
    unicode_range: str
    src: str
    platform_font_family: str
    font_variation_axes: typing.Optional[typing.List[FontVariationAxis]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FontFace: ...
    def __init__(self, font_family, font_style, font_variant, font_weight, font_stretch, font_display, unicode_range, src, platform_font_family, font_variation_axes) -> None: ...

@dataclass
class CSSTryRule:
    origin: StyleSheetOrigin
    style: CSSStyle
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSTryRule: ...
    def __init__(self, origin, style, style_sheet_id) -> None: ...

@dataclass
class CSSPositionFallbackRule:
    name: Value
    try_rules: typing.List[CSSTryRule]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSPositionFallbackRule: ...
    def __init__(self, name, try_rules) -> None: ...

@dataclass
class CSSKeyframesRule:
    animation_name: Value
    keyframes: typing.List[CSSKeyframeRule]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSKeyframesRule: ...
    def __init__(self, animation_name, keyframes) -> None: ...

@dataclass
class CSSPropertyRegistration:
    property_name: str
    inherits: bool
    syntax: str
    initial_value: typing.Optional[Value] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSPropertyRegistration: ...
    def __init__(self, property_name, inherits, syntax, initial_value) -> None: ...

@dataclass
class CSSFontPaletteValuesRule:
    origin: StyleSheetOrigin
    font_palette_name: Value
    style: CSSStyle
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSFontPaletteValuesRule: ...
    def __init__(self, origin, font_palette_name, style, style_sheet_id) -> None: ...

@dataclass
class CSSPropertyRule:
    origin: StyleSheetOrigin
    property_name: Value
    style: CSSStyle
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSPropertyRule: ...
    def __init__(self, origin, property_name, style, style_sheet_id) -> None: ...

@dataclass
class CSSKeyframeRule:
    origin: StyleSheetOrigin
    key_text: Value
    style: CSSStyle
    style_sheet_id: typing.Optional[StyleSheetId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CSSKeyframeRule: ...
    def __init__(self, origin, key_text, style, style_sheet_id) -> None: ...

@dataclass
class StyleDeclarationEdit:
    style_sheet_id: StyleSheetId
    range_: SourceRange
    text: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleDeclarationEdit: ...
    def __init__(self, style_sheet_id, range_, text) -> None: ...

def add_rule(style_sheet_id: StyleSheetId, rule_text: str, location: SourceRange, node_for_property_syntax_validation: typing.Optional[dom.NodeId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSRule]: ...
def collect_class_names(style_sheet_id: StyleSheetId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]: ...
def create_style_sheet(frame_id: page.FrameId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, StyleSheetId]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def force_pseudo_state(node_id: dom.NodeId, forced_pseudo_classes: typing.List[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_background_colors(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[typing.List[str]], typing.Optional[str], typing.Optional[str]]]: ...
def get_computed_style_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[CSSComputedStyleProperty]]: ...
def get_inline_styles_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[CSSStyle], typing.Optional[CSSStyle]]]: ...
def get_matched_styles_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[CSSStyle], typing.Optional[CSSStyle], typing.Optional[typing.List[RuleMatch]], typing.Optional[typing.List[PseudoElementMatches]], typing.Optional[typing.List[InheritedStyleEntry]], typing.Optional[typing.List[InheritedPseudoElementMatches]], typing.Optional[typing.List[CSSKeyframesRule]], typing.Optional[typing.List[CSSPositionFallbackRule]], typing.Optional[typing.List[CSSPropertyRule]], typing.Optional[typing.List[CSSPropertyRegistration]], typing.Optional[CSSFontPaletteValuesRule], typing.Optional[dom.NodeId]]]: ...
def get_media_queries() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[CSSMedia]]: ...
def get_platform_fonts_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[PlatformFontUsage]]: ...
def get_style_sheet_text(style_sheet_id: StyleSheetId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_layers_for_node(node_id: dom.NodeId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSLayerData]: ...
def track_computed_style_updates(properties_to_track: typing.List[CSSComputedStyleProperty]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def take_computed_style_updates() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[dom.NodeId]]: ...
def set_effective_property_value_for_node(node_id: dom.NodeId, property_name: str, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_property_rule_property_name(style_sheet_id: StyleSheetId, range_: SourceRange, property_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Value]: ...
def set_keyframe_key(style_sheet_id: StyleSheetId, range_: SourceRange, key_text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Value]: ...
def set_media_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSMedia]: ...
def set_container_query_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSContainerQuery]: ...
def set_supports_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSSupports]: ...
def set_scope_text(style_sheet_id: StyleSheetId, range_: SourceRange, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSScope]: ...
def set_rule_selector(style_sheet_id: StyleSheetId, range_: SourceRange, selector: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SelectorList]: ...
def set_style_sheet_text(style_sheet_id: StyleSheetId, text: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[str]]: ...
def set_style_texts(edits: typing.List[StyleDeclarationEdit], node_for_property_syntax_validation: typing.Optional[dom.NodeId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[CSSStyle]]: ...
def start_rule_usage_tracking() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def stop_rule_usage_tracking() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[RuleUsage]]: ...
def take_coverage_delta() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[RuleUsage], float]]: ...
def set_local_fonts_enabled(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class FontsUpdated:
    font: typing.Optional[FontFace]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FontsUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, font) -> None: ...

@dataclass
class MediaQueryResultChanged:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaQueryResultChanged: ...
    def to_json(self) -> T_JSON_DICT: ...

@dataclass
class StyleSheetAdded:
    header: CSSStyleSheetHeader
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleSheetAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, header) -> None: ...

@dataclass
class StyleSheetChanged:
    style_sheet_id: StyleSheetId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleSheetChanged: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, style_sheet_id) -> None: ...

@dataclass
class StyleSheetRemoved:
    style_sheet_id: StyleSheetId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StyleSheetRemoved: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, style_sheet_id) -> None: ...
