import typing
from . import dom as dom, dom_debugger as dom_debugger, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class DOMNode:
    node_type: int
    node_name: str
    node_value: str
    backend_node_id: dom.BackendNodeId
    text_value: typing.Optional[str] = ...
    input_value: typing.Optional[str] = ...
    input_checked: typing.Optional[bool] = ...
    option_selected: typing.Optional[bool] = ...
    child_node_indexes: typing.Optional[typing.List[int]] = ...
    attributes: typing.Optional[typing.List[NameValue]] = ...
    pseudo_element_indexes: typing.Optional[typing.List[int]] = ...
    layout_node_index: typing.Optional[int] = ...
    document_url: typing.Optional[str] = ...
    base_url: typing.Optional[str] = ...
    content_language: typing.Optional[str] = ...
    document_encoding: typing.Optional[str] = ...
    public_id: typing.Optional[str] = ...
    system_id: typing.Optional[str] = ...
    frame_id: typing.Optional[page.FrameId] = ...
    content_document_index: typing.Optional[int] = ...
    pseudo_type: typing.Optional[dom.PseudoType] = ...
    shadow_root_type: typing.Optional[dom.ShadowRootType] = ...
    is_clickable: typing.Optional[bool] = ...
    event_listeners: typing.Optional[typing.List[dom_debugger.EventListener]] = ...
    current_source_url: typing.Optional[str] = ...
    origin_url: typing.Optional[str] = ...
    scroll_offset_x: typing.Optional[float] = ...
    scroll_offset_y: typing.Optional[float] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DOMNode: ...
    def __init__(self, node_type, node_name, node_value, backend_node_id, text_value, input_value, input_checked, option_selected, child_node_indexes, attributes, pseudo_element_indexes, layout_node_index, document_url, base_url, content_language, document_encoding, public_id, system_id, frame_id, content_document_index, pseudo_type, shadow_root_type, is_clickable, event_listeners, current_source_url, origin_url, scroll_offset_x, scroll_offset_y) -> None: ...

@dataclass
class InlineTextBox:
    bounding_box: dom.Rect
    start_character_index: int
    num_characters: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InlineTextBox: ...
    def __init__(self, bounding_box, start_character_index, num_characters) -> None: ...

@dataclass
class LayoutTreeNode:
    dom_node_index: int
    bounding_box: dom.Rect
    layout_text: typing.Optional[str] = ...
    inline_text_nodes: typing.Optional[typing.List[InlineTextBox]] = ...
    style_index: typing.Optional[int] = ...
    paint_order: typing.Optional[int] = ...
    is_stacking_context: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LayoutTreeNode: ...
    def __init__(self, dom_node_index, bounding_box, layout_text, inline_text_nodes, style_index, paint_order, is_stacking_context) -> None: ...

@dataclass
class ComputedStyle:
    properties: typing.List[NameValue]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ComputedStyle: ...
    def __init__(self, properties) -> None: ...

@dataclass
class NameValue:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> NameValue: ...
    def __init__(self, name, value) -> None: ...

class StringIndex(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> StringIndex: ...

class ArrayOfStrings(list):
    def to_json(self) -> typing.List[StringIndex]: ...
    @classmethod
    def from_json(cls, json: typing.List[StringIndex]) -> ArrayOfStrings: ...

@dataclass
class RareStringData:
    index: typing.List[int]
    value: typing.List[StringIndex]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RareStringData: ...
    def __init__(self, index, value) -> None: ...

@dataclass
class RareBooleanData:
    index: typing.List[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RareBooleanData: ...
    def __init__(self, index) -> None: ...

@dataclass
class RareIntegerData:
    index: typing.List[int]
    value: typing.List[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RareIntegerData: ...
    def __init__(self, index, value) -> None: ...

class Rectangle(list):
    def to_json(self) -> typing.List[float]: ...
    @classmethod
    def from_json(cls, json: typing.List[float]) -> Rectangle: ...

@dataclass
class DocumentSnapshot:
    document_url: StringIndex
    title: StringIndex
    base_url: StringIndex
    content_language: StringIndex
    encoding_name: StringIndex
    public_id: StringIndex
    system_id: StringIndex
    frame_id: StringIndex
    nodes: NodeTreeSnapshot
    layout: LayoutTreeSnapshot
    text_boxes: TextBoxSnapshot
    scroll_offset_x: typing.Optional[float] = ...
    scroll_offset_y: typing.Optional[float] = ...
    content_width: typing.Optional[float] = ...
    content_height: typing.Optional[float] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DocumentSnapshot: ...
    def __init__(self, document_url, title, base_url, content_language, encoding_name, public_id, system_id, frame_id, nodes, layout, text_boxes, scroll_offset_x, scroll_offset_y, content_width, content_height) -> None: ...

@dataclass
class NodeTreeSnapshot:
    parent_index: typing.Optional[typing.List[int]] = ...
    node_type: typing.Optional[typing.List[int]] = ...
    shadow_root_type: typing.Optional[RareStringData] = ...
    node_name: typing.Optional[typing.List[StringIndex]] = ...
    node_value: typing.Optional[typing.List[StringIndex]] = ...
    backend_node_id: typing.Optional[typing.List[dom.BackendNodeId]] = ...
    attributes: typing.Optional[typing.List[ArrayOfStrings]] = ...
    text_value: typing.Optional[RareStringData] = ...
    input_value: typing.Optional[RareStringData] = ...
    input_checked: typing.Optional[RareBooleanData] = ...
    option_selected: typing.Optional[RareBooleanData] = ...
    content_document_index: typing.Optional[RareIntegerData] = ...
    pseudo_type: typing.Optional[RareStringData] = ...
    pseudo_identifier: typing.Optional[RareStringData] = ...
    is_clickable: typing.Optional[RareBooleanData] = ...
    current_source_url: typing.Optional[RareStringData] = ...
    origin_url: typing.Optional[RareStringData] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> NodeTreeSnapshot: ...
    def __init__(self, parent_index, node_type, shadow_root_type, node_name, node_value, backend_node_id, attributes, text_value, input_value, input_checked, option_selected, content_document_index, pseudo_type, pseudo_identifier, is_clickable, current_source_url, origin_url) -> None: ...

@dataclass
class LayoutTreeSnapshot:
    node_index: typing.List[int]
    styles: typing.List[ArrayOfStrings]
    bounds: typing.List[Rectangle]
    text: typing.List[StringIndex]
    stacking_contexts: RareBooleanData
    paint_orders: typing.Optional[typing.List[int]] = ...
    offset_rects: typing.Optional[typing.List[Rectangle]] = ...
    scroll_rects: typing.Optional[typing.List[Rectangle]] = ...
    client_rects: typing.Optional[typing.List[Rectangle]] = ...
    blended_background_colors: typing.Optional[typing.List[StringIndex]] = ...
    text_color_opacities: typing.Optional[typing.List[float]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LayoutTreeSnapshot: ...
    def __init__(self, node_index, styles, bounds, text, stacking_contexts, paint_orders, offset_rects, scroll_rects, client_rects, blended_background_colors, text_color_opacities) -> None: ...

@dataclass
class TextBoxSnapshot:
    layout_index: typing.List[int]
    bounds: typing.List[Rectangle]
    start: typing.List[int]
    length: typing.List[int]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TextBoxSnapshot: ...
    def __init__(self, layout_index, bounds, start, length) -> None: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_snapshot(computed_style_whitelist: typing.List[str], include_event_listeners: typing.Optional[bool] = None, include_paint_order: typing.Optional[bool] = None, include_user_agent_shadow_tree: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[DOMNode], typing.List[LayoutTreeNode], typing.List[ComputedStyle]]]: ...
def capture_snapshot(computed_styles: typing.List[str], include_paint_order: typing.Optional[bool] = None, include_dom_rects: typing.Optional[bool] = None, include_blended_background_colors: typing.Optional[bool] = None, include_text_color_opacities: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[DocumentSnapshot], typing.List[str]]]: ...
