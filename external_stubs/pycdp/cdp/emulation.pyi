import enum
import typing
from . import dom as dom, network as network, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class ScreenOrientation:
    type_: str
    angle: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScreenOrientation: ...
    def __init__(self, type_, angle) -> None: ...

@dataclass
class DisplayFeature:
    orientation: str
    offset: int
    mask_length: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DisplayFeature: ...
    def __init__(self, orientation, offset, mask_length) -> None: ...

@dataclass
class DevicePosture:
    type_: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DevicePosture: ...
    def __init__(self, type_) -> None: ...

@dataclass
class MediaFeature:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaFeature: ...
    def __init__(self, name, value) -> None: ...

class VirtualTimePolicy(enum.Enum):
    ADVANCE: str
    PAUSE: str
    PAUSE_IF_NETWORK_FETCHES_PENDING: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> VirtualTimePolicy: ...

@dataclass
class UserAgentBrandVersion:
    brand: str
    version: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> UserAgentBrandVersion: ...
    def __init__(self, brand, version) -> None: ...

@dataclass
class UserAgentMetadata:
    platform: str
    platform_version: str
    architecture: str
    model: str
    mobile: bool
    brands: typing.Optional[typing.List[UserAgentBrandVersion]] = ...
    full_version_list: typing.Optional[typing.List[UserAgentBrandVersion]] = ...
    full_version: typing.Optional[str] = ...
    bitness: typing.Optional[str] = ...
    wow64: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> UserAgentMetadata: ...
    def __init__(self, platform, platform_version, architecture, model, mobile, brands, full_version_list, full_version, bitness, wow64) -> None: ...

class SensorType(enum.Enum):
    ABSOLUTE_ORIENTATION: str
    ACCELEROMETER: str
    AMBIENT_LIGHT: str
    GRAVITY: str
    GYROSCOPE: str
    LINEAR_ACCELERATION: str
    MAGNETOMETER: str
    PROXIMITY: str
    RELATIVE_ORIENTATION: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SensorType: ...

@dataclass
class SensorMetadata:
    available: typing.Optional[bool] = ...
    minimum_frequency: typing.Optional[float] = ...
    maximum_frequency: typing.Optional[float] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorMetadata: ...
    def __init__(self, available, minimum_frequency, maximum_frequency) -> None: ...

@dataclass
class SensorReadingSingle:
    value: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingSingle: ...
    def __init__(self, value) -> None: ...

@dataclass
class SensorReadingXYZ:
    x: float
    y: float
    z: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingXYZ: ...
    def __init__(self, x, y, z) -> None: ...

@dataclass
class SensorReadingQuaternion:
    x: float
    y: float
    z: float
    w: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingQuaternion: ...
    def __init__(self, x, y, z, w) -> None: ...

@dataclass
class SensorReading:
    single: typing.Optional[SensorReadingSingle] = ...
    xyz: typing.Optional[SensorReadingXYZ] = ...
    quaternion: typing.Optional[SensorReadingQuaternion] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReading: ...
    def __init__(self, single, xyz, quaternion) -> None: ...

class DisabledImageType(enum.Enum):
    AVIF: str
    WEBP: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> DisabledImageType: ...

def can_emulate() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def clear_device_metrics_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_geolocation_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def reset_page_scale_factor() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_focus_emulation_enabled(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_auto_dark_mode_override(enabled: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_cpu_throttling_rate(rate: float) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_default_background_color_override(color: typing.Optional[dom.RGBA] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_device_metrics_override(width: int, height: int, device_scale_factor: float, mobile: bool, scale: typing.Optional[float] = None, screen_width: typing.Optional[int] = None, screen_height: typing.Optional[int] = None, position_x: typing.Optional[int] = None, position_y: typing.Optional[int] = None, dont_set_visible_size: typing.Optional[bool] = None, screen_orientation: typing.Optional[ScreenOrientation] = None, viewport: typing.Optional[page.Viewport] = None, display_feature: typing.Optional[DisplayFeature] = None, device_posture: typing.Optional[DevicePosture] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_scrollbars_hidden(hidden: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_document_cookie_disabled(disabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_emit_touch_events_for_mouse(enabled: bool, configuration: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_emulated_media(media: typing.Optional[str] = None, features: typing.Optional[typing.List[MediaFeature]] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_emulated_vision_deficiency(type_: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_geolocation_override(latitude: typing.Optional[float] = None, longitude: typing.Optional[float] = None, accuracy: typing.Optional[float] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_overridden_sensor_information(type_: SensorType) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, float]: ...
def set_sensor_override_enabled(enabled: bool, type_: SensorType, metadata: typing.Optional[SensorMetadata] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_sensor_override_readings(type_: SensorType, reading: SensorReading) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_idle_override(is_user_active: bool, is_screen_unlocked: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_idle_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_navigator_overrides(platform: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_page_scale_factor(page_scale_factor: float) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_script_execution_disabled(value: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_touch_emulation_enabled(enabled: bool, max_touch_points: typing.Optional[int] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_virtual_time_policy(policy: VirtualTimePolicy, budget: typing.Optional[float] = None, max_virtual_time_task_starvation_count: typing.Optional[int] = None, initial_virtual_time: typing.Optional[network.TimeSinceEpoch] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, float]: ...
def set_locale_override(locale: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_timezone_override(timezone_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_visible_size(width: int, height: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_disabled_image_types(image_types: typing.List[DisabledImageType]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_hardware_concurrency_override(hardware_concurrency: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_user_agent_override(user_agent: str, accept_language: typing.Optional[str] = None, platform: typing.Optional[str] = None, user_agent_metadata: typing.Optional[UserAgentMetadata] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_automation_override(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class VirtualTimeBudgetExpired:
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VirtualTimeBudgetExpired: ...
    def to_json(self) -> T_JSON_DICT: ...
