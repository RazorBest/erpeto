import enum
import typing
from . import dom as dom, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class DOMBreakpointType(enum.Enum):
    SUBTREE_MODIFIED = 'subtree-modified'
    ATTRIBUTE_MODIFIED = 'attribute-modified'
    NODE_REMOVED = 'node-removed'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> DOMBreakpointType: ...

class CSPViolationType(enum.Enum):
    TRUSTEDTYPE_SINK_VIOLATION = 'trustedtype-sink-violation'
    TRUSTEDTYPE_POLICY_VIOLATION = 'trustedtype-policy-violation'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CSPViolationType: ...

@dataclass
class EventListener:
    type_: str
    use_capture: bool
    passive: bool
    once: bool
    script_id: runtime.ScriptId
    line_number: int
    column_number: int
    handler: runtime.RemoteObject | None = ...
    original_handler: runtime.RemoteObject | None = ...
    backend_node_id: dom.BackendNodeId | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> EventListener: ...

def get_event_listeners(object_id: runtime.RemoteObjectId, depth: int | None = None, pierce: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[EventListener]]: ...
def remove_dom_breakpoint(node_id: dom.NodeId, type_: DOMBreakpointType) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_event_listener_breakpoint(event_name: str, target_name: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_instrumentation_breakpoint(event_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def remove_xhr_breakpoint(url: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_break_on_csp_violation(violation_types: list[CSPViolationType]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_dom_breakpoint(node_id: dom.NodeId, type_: DOMBreakpointType) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_event_listener_breakpoint(event_name: str, target_name: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_instrumentation_breakpoint(event_name: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_xhr_breakpoint(url: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
