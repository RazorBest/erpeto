import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class SerializedStorageKey(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SerializedStorageKey: ...

@dataclass
class StorageId:
    is_local_storage: bool
    security_origin: str | None = ...
    storage_key: SerializedStorageKey | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> StorageId: ...

class Item(list):
    def to_json(self) -> list[str]: ...
    @classmethod
    def from_json(cls, json: list[str]) -> Item: ...

def clear(storage_id: StorageId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_dom_storage_items(storage_id: StorageId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[Item]]: ...
def remove_dom_storage_item(storage_id: StorageId, key: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_dom_storage_item(storage_id: StorageId, key: str, value: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class DomStorageItemAdded:
    storage_id: StorageId
    key: str
    new_value: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DomStorageItemAdded: ...

@dataclass
class DomStorageItemRemoved:
    storage_id: StorageId
    key: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DomStorageItemRemoved: ...

@dataclass
class DomStorageItemUpdated:
    storage_id: StorageId
    key: str
    old_value: str
    new_value: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DomStorageItemUpdated: ...

@dataclass
class DomStorageItemsCleared:
    storage_id: StorageId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DomStorageItemsCleared: ...
