import enum
import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class CentralState(enum.Enum):
    ABSENT = 'absent'
    POWERED_OFF = 'powered-off'
    POWERED_ON = 'powered-on'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CentralState: ...

@dataclass
class ManufacturerData:
    key: int
    data: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ManufacturerData: ...

@dataclass
class ScanRecord:
    name: str | None = ...
    uuids: list[str] | None = ...
    appearance: int | None = ...
    tx_power: int | None = ...
    manufacturer_data: list[ManufacturerData] | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScanRecord: ...

@dataclass
class ScanEntry:
    device_address: str
    rssi: int
    scan_record: ScanRecord
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScanEntry: ...

def enable(state: CentralState, le_supported: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_simulated_central_state(state: CentralState) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_preconnected_peripheral(address: str, name: str, manufacturer_data: list[ManufacturerData], known_service_uuids: list[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def simulate_advertisement(entry: ScanEntry) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
