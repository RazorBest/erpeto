import typing
from . import debugger as debugger, runtime as runtime
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

@dataclass
class ProfileNode:
    id_: int
    call_frame: runtime.CallFrame
    hit_count: typing.Optional[int] = ...
    children: typing.Optional[typing.List[int]] = ...
    deopt_reason: typing.Optional[str] = ...
    position_ticks: typing.Optional[typing.List[PositionTickInfo]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ProfileNode: ...
    def __init__(self, id_, call_frame, hit_count, children, deopt_reason, position_ticks) -> None: ...

@dataclass
class Profile:
    nodes: typing.List[ProfileNode]
    start_time: float
    end_time: float
    samples: typing.Optional[typing.List[int]] = ...
    time_deltas: typing.Optional[typing.List[int]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Profile: ...
    def __init__(self, nodes, start_time, end_time, samples, time_deltas) -> None: ...

@dataclass
class PositionTickInfo:
    line: int
    ticks: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PositionTickInfo: ...
    def __init__(self, line, ticks) -> None: ...

@dataclass
class CoverageRange:
    start_offset: int
    end_offset: int
    count: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CoverageRange: ...
    def __init__(self, start_offset, end_offset, count) -> None: ...

@dataclass
class FunctionCoverage:
    function_name: str
    ranges: typing.List[CoverageRange]
    is_block_coverage: bool
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> FunctionCoverage: ...
    def __init__(self, function_name, ranges, is_block_coverage) -> None: ...

@dataclass
class ScriptCoverage:
    script_id: runtime.ScriptId
    url: str
    functions: typing.List[FunctionCoverage]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScriptCoverage: ...
    def __init__(self, script_id, url, functions) -> None: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_best_effort_coverage() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[ScriptCoverage]]: ...
def set_sampling_interval(interval: int) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def start() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def start_precise_coverage(call_count: typing.Optional[bool] = None, detailed: typing.Optional[bool] = None, allow_triggered_updates: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, float]: ...
def stop() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Profile]: ...
def stop_precise_coverage() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def take_precise_coverage() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[ScriptCoverage], float]]: ...

@dataclass
class ConsoleProfileFinished:
    id_: str
    location: debugger.Location
    profile: Profile
    title: typing.Optional[str]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ConsoleProfileFinished: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, id_, location, profile, title) -> None: ...

@dataclass
class ConsoleProfileStarted:
    id_: str
    location: debugger.Location
    title: typing.Optional[str]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ConsoleProfileStarted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, id_, location, title) -> None: ...

@dataclass
class PreciseCoverageDeltaUpdate:
    timestamp: float
    occasion: str
    result: typing.List[ScriptCoverage]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PreciseCoverageDeltaUpdate: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, timestamp, occasion, result) -> None: ...
