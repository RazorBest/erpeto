import enum
import typing
from . import io as io, network as network, page as page
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class RequestId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> RequestId: ...

class RequestStage(enum.Enum):
    REQUEST = 'Request'
    RESPONSE = 'Response'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> RequestStage: ...

@dataclass
class RequestPattern:
    url_pattern: str | None = ...
    resource_type: network.ResourceType | None = ...
    request_stage: RequestStage | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestPattern: ...

@dataclass
class HeaderEntry:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> HeaderEntry: ...

@dataclass
class AuthChallenge:
    origin: str
    scheme: str
    realm: str
    source: str | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthChallenge: ...

@dataclass
class AuthChallengeResponse:
    response: str
    username: str | None = ...
    password: str | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthChallengeResponse: ...

def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable(patterns: list[RequestPattern] | None = None, handle_auth_requests: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def fail_request(request_id: RequestId, error_reason: network.ErrorReason) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def fulfill_request(request_id: RequestId, response_code: int, response_headers: list[HeaderEntry] | None = None, binary_response_headers: str | None = None, body: str | None = None, response_phrase: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def continue_request(request_id: RequestId, url: str | None = None, method: str | None = None, post_data: str | None = None, headers: list[HeaderEntry] | None = None, intercept_response: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def continue_with_auth(request_id: RequestId, auth_challenge_response: AuthChallengeResponse) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def continue_response(request_id: RequestId, response_code: int | None = None, response_phrase: str | None = None, response_headers: list[HeaderEntry] | None = None, binary_response_headers: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_response_body(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, bool]]: ...
def take_response_body_as_stream(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, io.StreamHandle]: ...

@dataclass
class RequestPaused:
    request_id: RequestId
    request: network.Request
    frame_id: page.FrameId
    resource_type: network.ResourceType
    response_error_reason: network.ErrorReason | None
    response_status_code: int | None
    response_status_text: str | None
    response_headers: list[HeaderEntry] | None
    network_id: network.RequestId | None
    redirected_request_id: RequestId | None
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestPaused: ...

@dataclass
class AuthRequired:
    request_id: RequestId
    request: network.Request
    frame_id: page.FrameId
    resource_type: network.ResourceType
    auth_challenge: AuthChallenge
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthRequired: ...
