import enum
import typing
from . import page as page, target as target
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class BrowserContextID(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> BrowserContextID: ...

class WindowID(int):
    def to_json(self) -> int: ...
    @classmethod
    def from_json(cls, json: int) -> WindowID: ...

class WindowState(enum.Enum):
    NORMAL = 'normal'
    MINIMIZED = 'minimized'
    MAXIMIZED = 'maximized'
    FULLSCREEN = 'fullscreen'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> WindowState: ...

@dataclass
class Bounds:
    left: int | None = ...
    top: int | None = ...
    width: int | None = ...
    height: int | None = ...
    window_state: WindowState | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Bounds: ...

class PermissionType(enum.Enum):
    AR = 'ar'
    AUDIO_CAPTURE = 'audioCapture'
    AUTOMATIC_FULLSCREEN = 'automaticFullscreen'
    BACKGROUND_FETCH = 'backgroundFetch'
    BACKGROUND_SYNC = 'backgroundSync'
    CAMERA_PAN_TILT_ZOOM = 'cameraPanTiltZoom'
    CAPTURED_SURFACE_CONTROL = 'capturedSurfaceControl'
    CLIPBOARD_READ_WRITE = 'clipboardReadWrite'
    CLIPBOARD_SANITIZED_WRITE = 'clipboardSanitizedWrite'
    DISPLAY_CAPTURE = 'displayCapture'
    DURABLE_STORAGE = 'durableStorage'
    GEOLOCATION = 'geolocation'
    HAND_TRACKING = 'handTracking'
    IDLE_DETECTION = 'idleDetection'
    KEYBOARD_LOCK = 'keyboardLock'
    LOCAL_FONTS = 'localFonts'
    MIDI = 'midi'
    MIDI_SYSEX = 'midiSysex'
    NFC = 'nfc'
    NOTIFICATIONS = 'notifications'
    PAYMENT_HANDLER = 'paymentHandler'
    PERIODIC_BACKGROUND_SYNC = 'periodicBackgroundSync'
    POINTER_LOCK = 'pointerLock'
    PROTECTED_MEDIA_IDENTIFIER = 'protectedMediaIdentifier'
    SENSORS = 'sensors'
    SMART_CARD = 'smartCard'
    SPEAKER_SELECTION = 'speakerSelection'
    STORAGE_ACCESS = 'storageAccess'
    TOP_LEVEL_STORAGE_ACCESS = 'topLevelStorageAccess'
    VIDEO_CAPTURE = 'videoCapture'
    VR = 'vr'
    WAKE_LOCK_SCREEN = 'wakeLockScreen'
    WAKE_LOCK_SYSTEM = 'wakeLockSystem'
    WEB_APP_INSTALLATION = 'webAppInstallation'
    WEB_PRINTING = 'webPrinting'
    WINDOW_MANAGEMENT = 'windowManagement'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PermissionType: ...

class PermissionSetting(enum.Enum):
    GRANTED = 'granted'
    DENIED = 'denied'
    PROMPT = 'prompt'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PermissionSetting: ...

@dataclass
class PermissionDescriptor:
    name: str
    sysex: bool | None = ...
    user_visible_only: bool | None = ...
    allow_without_sanitization: bool | None = ...
    allow_without_gesture: bool | None = ...
    pan_tilt_zoom: bool | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PermissionDescriptor: ...

class BrowserCommandId(enum.Enum):
    OPEN_TAB_SEARCH = 'openTabSearch'
    CLOSE_TAB_SEARCH = 'closeTabSearch'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> BrowserCommandId: ...

@dataclass
class Bucket:
    low: int
    high: int
    count: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Bucket: ...

@dataclass
class Histogram:
    name: str
    sum_: int
    count: int
    buckets: list[Bucket]
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Histogram: ...

def set_permission(permission: PermissionDescriptor, setting: PermissionSetting, origin: str | None = None, browser_context_id: BrowserContextID | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def grant_permissions(permissions: list[PermissionType], origin: str | None = None, browser_context_id: BrowserContextID | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def reset_permissions(browser_context_id: BrowserContextID | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_download_behavior(behavior: str, browser_context_id: BrowserContextID | None = None, download_path: str | None = None, events_enabled: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def cancel_download(guid: str, browser_context_id: BrowserContextID | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def close() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def crash() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def crash_gpu_process() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_version() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]: ...
def get_browser_command_line() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[str]]: ...
def get_histograms(query: str | None = None, delta: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]: ...
def get_histogram(name: str, delta: bool | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Histogram]: ...
def get_window_bounds(window_id: WindowID) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, Bounds]: ...
def get_window_for_target(target_id: target.TargetID | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]: ...
def set_window_bounds(window_id: WindowID, bounds: Bounds) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_dock_tile(badge_label: str | None = None, image: str | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def execute_browser_command(command_id: BrowserCommandId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def add_privacy_sandbox_enrollment_override(url: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class DownloadWillBegin:
    frame_id: page.FrameId
    guid: str
    url: str
    suggested_filename: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DownloadWillBegin: ...

@dataclass
class DownloadProgress:
    guid: str
    total_bytes: float
    received_bytes: float
    state: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DownloadProgress: ...
