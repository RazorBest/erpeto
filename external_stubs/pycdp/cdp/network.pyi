import enum
import typing
from . import debugger as debugger, emulation as emulation, io as io, page as page, runtime as runtime, security as security
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class ResourceType(enum.Enum):
    DOCUMENT: str
    STYLESHEET: str
    IMAGE: str
    MEDIA: str
    FONT: str
    SCRIPT: str
    TEXT_TRACK: str
    XHR: str
    FETCH: str
    PREFETCH: str
    EVENT_SOURCE: str
    WEB_SOCKET: str
    MANIFEST: str
    SIGNED_EXCHANGE: str
    PING: str
    CSP_VIOLATION_REPORT: str
    PREFLIGHT: str
    OTHER: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ResourceType: ...

class LoaderId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> LoaderId: ...

class RequestId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> RequestId: ...

class InterceptionId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> InterceptionId: ...

class ErrorReason(enum.Enum):
    FAILED: str
    ABORTED: str
    TIMED_OUT: str
    ACCESS_DENIED: str
    CONNECTION_CLOSED: str
    CONNECTION_RESET: str
    CONNECTION_REFUSED: str
    CONNECTION_ABORTED: str
    CONNECTION_FAILED: str
    NAME_NOT_RESOLVED: str
    INTERNET_DISCONNECTED: str
    ADDRESS_UNREACHABLE: str
    BLOCKED_BY_CLIENT: str
    BLOCKED_BY_RESPONSE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ErrorReason: ...

class TimeSinceEpoch(float):
    def to_json(self) -> float: ...
    @classmethod
    def from_json(cls, json: float) -> TimeSinceEpoch: ...

class MonotonicTime(float):
    def to_json(self) -> float: ...
    @classmethod
    def from_json(cls, json: float) -> MonotonicTime: ...

class Headers(dict):
    def to_json(self) -> dict: ...
    @classmethod
    def from_json(cls, json: dict) -> Headers: ...

class ConnectionType(enum.Enum):
    NONE: str
    CELLULAR2G: str
    CELLULAR3G: str
    CELLULAR4G: str
    BLUETOOTH: str
    ETHERNET: str
    WIFI: str
    WIMAX: str
    OTHER: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ConnectionType: ...

class CookieSameSite(enum.Enum):
    STRICT: str
    LAX: str
    NONE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CookieSameSite: ...

class CookiePriority(enum.Enum):
    LOW: str
    MEDIUM: str
    HIGH: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CookiePriority: ...

class CookieSourceScheme(enum.Enum):
    UNSET: str
    NON_SECURE: str
    SECURE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CookieSourceScheme: ...

@dataclass
class ResourceTiming:
    request_time: float
    proxy_start: float
    proxy_end: float
    dns_start: float
    dns_end: float
    connect_start: float
    connect_end: float
    ssl_start: float
    ssl_end: float
    worker_start: float
    worker_ready: float
    worker_fetch_start: float
    worker_respond_with_settled: float
    send_start: float
    send_end: float
    push_start: float
    push_end: float
    receive_headers_start: float
    receive_headers_end: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ResourceTiming: ...
    def __init__(self, request_time, proxy_start, proxy_end, dns_start, dns_end, connect_start, connect_end, ssl_start, ssl_end, worker_start, worker_ready, worker_fetch_start, worker_respond_with_settled, send_start, send_end, push_start, push_end, receive_headers_start, receive_headers_end) -> None: ...

class ResourcePriority(enum.Enum):
    VERY_LOW: str
    LOW: str
    MEDIUM: str
    HIGH: str
    VERY_HIGH: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ResourcePriority: ...

@dataclass
class PostDataEntry:
    bytes_: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PostDataEntry: ...
    def __init__(self, bytes_) -> None: ...

@dataclass
class Request:
    url: str
    method: str
    headers: Headers
    initial_priority: ResourcePriority
    referrer_policy: str
    url_fragment: typing.Optional[str] = ...
    post_data: typing.Optional[str] = ...
    has_post_data: typing.Optional[bool] = ...
    post_data_entries: typing.Optional[typing.List[PostDataEntry]] = ...
    mixed_content_type: typing.Optional[security.MixedContentType] = ...
    is_link_preload: typing.Optional[bool] = ...
    trust_token_params: typing.Optional[TrustTokenParams] = ...
    is_same_site: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Request: ...
    def __init__(self, url, method, headers, initial_priority, referrer_policy, url_fragment, post_data, has_post_data, post_data_entries, mixed_content_type, is_link_preload, trust_token_params, is_same_site) -> None: ...

@dataclass
class SignedCertificateTimestamp:
    status: str
    origin: str
    log_description: str
    log_id: str
    timestamp: float
    hash_algorithm: str
    signature_algorithm: str
    signature_data: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SignedCertificateTimestamp: ...
    def __init__(self, status, origin, log_description, log_id, timestamp, hash_algorithm, signature_algorithm, signature_data) -> None: ...

@dataclass
class SecurityDetails:
    protocol: str
    key_exchange: str
    cipher: str
    certificate_id: security.CertificateId
    subject_name: str
    san_list: typing.List[str]
    issuer: str
    valid_from: TimeSinceEpoch
    valid_to: TimeSinceEpoch
    signed_certificate_timestamp_list: typing.List[SignedCertificateTimestamp]
    certificate_transparency_compliance: CertificateTransparencyCompliance
    encrypted_client_hello: bool
    key_exchange_group: typing.Optional[str] = ...
    mac: typing.Optional[str] = ...
    server_signature_algorithm: typing.Optional[int] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SecurityDetails: ...
    def __init__(self, protocol, key_exchange, cipher, certificate_id, subject_name, san_list, issuer, valid_from, valid_to, signed_certificate_timestamp_list, certificate_transparency_compliance, encrypted_client_hello, key_exchange_group, mac, server_signature_algorithm) -> None: ...

class CertificateTransparencyCompliance(enum.Enum):
    UNKNOWN: str
    NOT_COMPLIANT: str
    COMPLIANT: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CertificateTransparencyCompliance: ...

class BlockedReason(enum.Enum):
    OTHER: str
    CSP: str
    MIXED_CONTENT: str
    ORIGIN: str
    INSPECTOR: str
    SUBRESOURCE_FILTER: str
    CONTENT_TYPE: str
    COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER: str
    COOP_SANDBOXED_IFRAME_CANNOT_NAVIGATE_TO_COOP_PAGE: str
    CORP_NOT_SAME_ORIGIN: str
    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP: str
    CORP_NOT_SAME_SITE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> BlockedReason: ...

class CorsError(enum.Enum):
    DISALLOWED_BY_MODE: str
    INVALID_RESPONSE: str
    WILDCARD_ORIGIN_NOT_ALLOWED: str
    MISSING_ALLOW_ORIGIN_HEADER: str
    MULTIPLE_ALLOW_ORIGIN_VALUES: str
    INVALID_ALLOW_ORIGIN_VALUE: str
    ALLOW_ORIGIN_MISMATCH: str
    INVALID_ALLOW_CREDENTIALS: str
    CORS_DISABLED_SCHEME: str
    PREFLIGHT_INVALID_STATUS: str
    PREFLIGHT_DISALLOWED_REDIRECT: str
    PREFLIGHT_WILDCARD_ORIGIN_NOT_ALLOWED: str
    PREFLIGHT_MISSING_ALLOW_ORIGIN_HEADER: str
    PREFLIGHT_MULTIPLE_ALLOW_ORIGIN_VALUES: str
    PREFLIGHT_INVALID_ALLOW_ORIGIN_VALUE: str
    PREFLIGHT_ALLOW_ORIGIN_MISMATCH: str
    PREFLIGHT_INVALID_ALLOW_CREDENTIALS: str
    PREFLIGHT_MISSING_ALLOW_EXTERNAL: str
    PREFLIGHT_INVALID_ALLOW_EXTERNAL: str
    PREFLIGHT_MISSING_ALLOW_PRIVATE_NETWORK: str
    PREFLIGHT_INVALID_ALLOW_PRIVATE_NETWORK: str
    INVALID_ALLOW_METHODS_PREFLIGHT_RESPONSE: str
    INVALID_ALLOW_HEADERS_PREFLIGHT_RESPONSE: str
    METHOD_DISALLOWED_BY_PREFLIGHT_RESPONSE: str
    HEADER_DISALLOWED_BY_PREFLIGHT_RESPONSE: str
    REDIRECT_CONTAINS_CREDENTIALS: str
    INSECURE_PRIVATE_NETWORK: str
    INVALID_PRIVATE_NETWORK_ACCESS: str
    UNEXPECTED_PRIVATE_NETWORK_ACCESS: str
    NO_CORS_REDIRECT_MODE_NOT_FOLLOW: str
    PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_ID: str
    PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_NAME: str
    PRIVATE_NETWORK_ACCESS_PERMISSION_UNAVAILABLE: str
    PRIVATE_NETWORK_ACCESS_PERMISSION_DENIED: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CorsError: ...

@dataclass
class CorsErrorStatus:
    cors_error: CorsError
    failed_parameter: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CorsErrorStatus: ...
    def __init__(self, cors_error, failed_parameter) -> None: ...

class ServiceWorkerResponseSource(enum.Enum):
    CACHE_STORAGE: str
    HTTP_CACHE: str
    FALLBACK_CODE: str
    NETWORK: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ServiceWorkerResponseSource: ...

@dataclass
class TrustTokenParams:
    operation: TrustTokenOperationType
    refresh_policy: str
    issuers: typing.Optional[typing.List[str]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TrustTokenParams: ...
    def __init__(self, operation, refresh_policy, issuers) -> None: ...

class TrustTokenOperationType(enum.Enum):
    ISSUANCE: str
    REDEMPTION: str
    SIGNING: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> TrustTokenOperationType: ...

class AlternateProtocolUsage(enum.Enum):
    ALTERNATIVE_JOB_WON_WITHOUT_RACE: str
    ALTERNATIVE_JOB_WON_RACE: str
    MAIN_JOB_WON_RACE: str
    MAPPING_MISSING: str
    BROKEN: str
    DNS_ALPN_H3_JOB_WON_WITHOUT_RACE: str
    DNS_ALPN_H3_JOB_WON_RACE: str
    UNSPECIFIED_REASON: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> AlternateProtocolUsage: ...

@dataclass
class ServiceWorkerRouterInfo:
    rule_id_matched: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ServiceWorkerRouterInfo: ...
    def __init__(self, rule_id_matched) -> None: ...

@dataclass
class Response:
    url: str
    status: int
    status_text: str
    headers: Headers
    mime_type: str
    connection_reused: bool
    connection_id: float
    encoded_data_length: float
    security_state: security.SecurityState
    headers_text: typing.Optional[str] = ...
    request_headers: typing.Optional[Headers] = ...
    request_headers_text: typing.Optional[str] = ...
    remote_ip_address: typing.Optional[str] = ...
    remote_port: typing.Optional[int] = ...
    from_disk_cache: typing.Optional[bool] = ...
    from_service_worker: typing.Optional[bool] = ...
    from_prefetch_cache: typing.Optional[bool] = ...
    service_worker_router_info: typing.Optional[ServiceWorkerRouterInfo] = ...
    timing: typing.Optional[ResourceTiming] = ...
    service_worker_response_source: typing.Optional[ServiceWorkerResponseSource] = ...
    response_time: typing.Optional[TimeSinceEpoch] = ...
    cache_storage_cache_name: typing.Optional[str] = ...
    protocol: typing.Optional[str] = ...
    alternate_protocol_usage: typing.Optional[AlternateProtocolUsage] = ...
    security_details: typing.Optional[SecurityDetails] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Response: ...
    def __init__(self, url, status, status_text, headers, mime_type, connection_reused, connection_id, encoded_data_length, security_state, headers_text, request_headers, request_headers_text, remote_ip_address, remote_port, from_disk_cache, from_service_worker, from_prefetch_cache, service_worker_router_info, timing, service_worker_response_source, response_time, cache_storage_cache_name, protocol, alternate_protocol_usage, security_details) -> None: ...

@dataclass
class WebSocketRequest:
    headers: Headers
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketRequest: ...
    def __init__(self, headers) -> None: ...

@dataclass
class WebSocketResponse:
    status: int
    status_text: str
    headers: Headers
    headers_text: typing.Optional[str] = ...
    request_headers: typing.Optional[Headers] = ...
    request_headers_text: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketResponse: ...
    def __init__(self, status, status_text, headers, headers_text, request_headers, request_headers_text) -> None: ...

@dataclass
class WebSocketFrame:
    opcode: float
    mask: bool
    payload_data: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketFrame: ...
    def __init__(self, opcode, mask, payload_data) -> None: ...

@dataclass
class CachedResource:
    url: str
    type_: ResourceType
    body_size: float
    response: typing.Optional[Response] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CachedResource: ...
    def __init__(self, url, type_, body_size, response) -> None: ...

@dataclass
class Initiator:
    type_: str
    stack: typing.Optional[runtime.StackTrace] = ...
    url: typing.Optional[str] = ...
    line_number: typing.Optional[float] = ...
    column_number: typing.Optional[float] = ...
    request_id: typing.Optional[RequestId] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Initiator: ...
    def __init__(self, type_, stack, url, line_number, column_number, request_id) -> None: ...

@dataclass
class Cookie:
    name: str
    value: str
    domain: str
    path: str
    size: int
    http_only: bool
    secure: bool
    session: bool
    priority: CookiePriority
    same_party: bool
    source_scheme: CookieSourceScheme
    source_port: int
    expires: typing.Optional[float] = ...
    same_site: typing.Optional[CookieSameSite] = ...
    partition_key: typing.Optional[str] = ...
    partition_key_opaque: typing.Optional[bool] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Cookie: ...
    def __init__(self, name, value, domain, path, size, http_only, secure, session, priority, same_party, source_scheme, source_port, expires, same_site, partition_key, partition_key_opaque) -> None: ...

class SetCookieBlockedReason(enum.Enum):
    SECURE_ONLY: str
    SAME_SITE_STRICT: str
    SAME_SITE_LAX: str
    SAME_SITE_UNSPECIFIED_TREATED_AS_LAX: str
    SAME_SITE_NONE_INSECURE: str
    USER_PREFERENCES: str
    THIRD_PARTY_PHASEOUT: str
    THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET: str
    SYNTAX_ERROR: str
    SCHEME_NOT_SUPPORTED: str
    OVERWRITE_SECURE: str
    INVALID_DOMAIN: str
    INVALID_PREFIX: str
    UNKNOWN_ERROR: str
    SCHEMEFUL_SAME_SITE_STRICT: str
    SCHEMEFUL_SAME_SITE_LAX: str
    SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX: str
    SAME_PARTY_FROM_CROSS_PARTY_CONTEXT: str
    SAME_PARTY_CONFLICTS_WITH_OTHER_ATTRIBUTES: str
    NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE: str
    DISALLOWED_CHARACTER: str
    NO_COOKIE_CONTENT: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SetCookieBlockedReason: ...

class CookieBlockedReason(enum.Enum):
    SECURE_ONLY: str
    NOT_ON_PATH: str
    DOMAIN_MISMATCH: str
    SAME_SITE_STRICT: str
    SAME_SITE_LAX: str
    SAME_SITE_UNSPECIFIED_TREATED_AS_LAX: str
    SAME_SITE_NONE_INSECURE: str
    USER_PREFERENCES: str
    THIRD_PARTY_PHASEOUT: str
    THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET: str
    UNKNOWN_ERROR: str
    SCHEMEFUL_SAME_SITE_STRICT: str
    SCHEMEFUL_SAME_SITE_LAX: str
    SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX: str
    SAME_PARTY_FROM_CROSS_PARTY_CONTEXT: str
    NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CookieBlockedReason: ...

@dataclass
class BlockedSetCookieWithReason:
    blocked_reasons: typing.List[SetCookieBlockedReason]
    cookie_line: str
    cookie: typing.Optional[Cookie] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BlockedSetCookieWithReason: ...
    def __init__(self, blocked_reasons, cookie_line, cookie) -> None: ...

@dataclass
class BlockedCookieWithReason:
    blocked_reasons: typing.List[CookieBlockedReason]
    cookie: Cookie
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BlockedCookieWithReason: ...
    def __init__(self, blocked_reasons, cookie) -> None: ...

@dataclass
class CookieParam:
    name: str
    value: str
    url: typing.Optional[str] = ...
    domain: typing.Optional[str] = ...
    path: typing.Optional[str] = ...
    secure: typing.Optional[bool] = ...
    http_only: typing.Optional[bool] = ...
    same_site: typing.Optional[CookieSameSite] = ...
    expires: typing.Optional[TimeSinceEpoch] = ...
    priority: typing.Optional[CookiePriority] = ...
    same_party: typing.Optional[bool] = ...
    source_scheme: typing.Optional[CookieSourceScheme] = ...
    source_port: typing.Optional[int] = ...
    partition_key: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CookieParam: ...
    def __init__(self, name, value, url, domain, path, secure, http_only, same_site, expires, priority, same_party, source_scheme, source_port, partition_key) -> None: ...

@dataclass
class AuthChallenge:
    origin: str
    scheme: str
    realm: str
    source: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthChallenge: ...
    def __init__(self, origin, scheme, realm, source) -> None: ...

@dataclass
class AuthChallengeResponse:
    response: str
    username: typing.Optional[str] = ...
    password: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> AuthChallengeResponse: ...
    def __init__(self, response, username, password) -> None: ...

class InterceptionStage(enum.Enum):
    REQUEST: str
    HEADERS_RECEIVED: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> InterceptionStage: ...

@dataclass
class RequestPattern:
    url_pattern: typing.Optional[str] = ...
    resource_type: typing.Optional[ResourceType] = ...
    interception_stage: typing.Optional[InterceptionStage] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestPattern: ...
    def __init__(self, url_pattern, resource_type, interception_stage) -> None: ...

@dataclass
class SignedExchangeSignature:
    label: str
    signature: str
    integrity: str
    validity_url: str
    date: int
    expires: int
    cert_url: typing.Optional[str] = ...
    cert_sha256: typing.Optional[str] = ...
    certificates: typing.Optional[typing.List[str]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SignedExchangeSignature: ...
    def __init__(self, label, signature, integrity, validity_url, date, expires, cert_url, cert_sha256, certificates) -> None: ...

@dataclass
class SignedExchangeHeader:
    request_url: str
    response_code: int
    response_headers: Headers
    signatures: typing.List[SignedExchangeSignature]
    header_integrity: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SignedExchangeHeader: ...
    def __init__(self, request_url, response_code, response_headers, signatures, header_integrity) -> None: ...

class SignedExchangeErrorField(enum.Enum):
    SIGNATURE_SIG: str
    SIGNATURE_INTEGRITY: str
    SIGNATURE_CERT_URL: str
    SIGNATURE_CERT_SHA256: str
    SIGNATURE_VALIDITY_URL: str
    SIGNATURE_TIMESTAMPS: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> SignedExchangeErrorField: ...

@dataclass
class SignedExchangeError:
    message: str
    signature_index: typing.Optional[int] = ...
    error_field: typing.Optional[SignedExchangeErrorField] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SignedExchangeError: ...
    def __init__(self, message, signature_index, error_field) -> None: ...

@dataclass
class SignedExchangeInfo:
    outer_response: Response
    header: typing.Optional[SignedExchangeHeader] = ...
    security_details: typing.Optional[SecurityDetails] = ...
    errors: typing.Optional[typing.List[SignedExchangeError]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SignedExchangeInfo: ...
    def __init__(self, outer_response, header, security_details, errors) -> None: ...

class ContentEncoding(enum.Enum):
    DEFLATE: str
    GZIP: str
    BR: str
    ZSTD: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ContentEncoding: ...

class PrivateNetworkRequestPolicy(enum.Enum):
    ALLOW: str
    BLOCK_FROM_INSECURE_TO_MORE_PRIVATE: str
    WARN_FROM_INSECURE_TO_MORE_PRIVATE: str
    PREFLIGHT_BLOCK: str
    PREFLIGHT_WARN: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PrivateNetworkRequestPolicy: ...

class IPAddressSpace(enum.Enum):
    LOCAL: str
    PRIVATE: str
    PUBLIC: str
    UNKNOWN: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> IPAddressSpace: ...

@dataclass
class ConnectTiming:
    request_time: float
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ConnectTiming: ...
    def __init__(self, request_time) -> None: ...

@dataclass
class ClientSecurityState:
    initiator_is_secure_context: bool
    initiator_ip_address_space: IPAddressSpace
    private_network_request_policy: PrivateNetworkRequestPolicy
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ClientSecurityState: ...
    def __init__(self, initiator_is_secure_context, initiator_ip_address_space, private_network_request_policy) -> None: ...

class CrossOriginOpenerPolicyValue(enum.Enum):
    SAME_ORIGIN: str
    SAME_ORIGIN_ALLOW_POPUPS: str
    RESTRICT_PROPERTIES: str
    UNSAFE_NONE: str
    SAME_ORIGIN_PLUS_COEP: str
    RESTRICT_PROPERTIES_PLUS_COEP: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CrossOriginOpenerPolicyValue: ...

@dataclass
class CrossOriginOpenerPolicyStatus:
    value: CrossOriginOpenerPolicyValue
    report_only_value: CrossOriginOpenerPolicyValue
    reporting_endpoint: typing.Optional[str] = ...
    report_only_reporting_endpoint: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CrossOriginOpenerPolicyStatus: ...
    def __init__(self, value, report_only_value, reporting_endpoint, report_only_reporting_endpoint) -> None: ...

class CrossOriginEmbedderPolicyValue(enum.Enum):
    NONE: str
    CREDENTIALLESS: str
    REQUIRE_CORP: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> CrossOriginEmbedderPolicyValue: ...

@dataclass
class CrossOriginEmbedderPolicyStatus:
    value: CrossOriginEmbedderPolicyValue
    report_only_value: CrossOriginEmbedderPolicyValue
    reporting_endpoint: typing.Optional[str] = ...
    report_only_reporting_endpoint: typing.Optional[str] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CrossOriginEmbedderPolicyStatus: ...
    def __init__(self, value, report_only_value, reporting_endpoint, report_only_reporting_endpoint) -> None: ...

class ContentSecurityPolicySource(enum.Enum):
    HTTP: str
    META: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ContentSecurityPolicySource: ...

@dataclass
class ContentSecurityPolicyStatus:
    effective_directives: str
    is_enforced: bool
    source: ContentSecurityPolicySource
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ContentSecurityPolicyStatus: ...
    def __init__(self, effective_directives, is_enforced, source) -> None: ...

@dataclass
class SecurityIsolationStatus:
    coop: typing.Optional[CrossOriginOpenerPolicyStatus] = ...
    coep: typing.Optional[CrossOriginEmbedderPolicyStatus] = ...
    csp: typing.Optional[typing.List[ContentSecurityPolicyStatus]] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SecurityIsolationStatus: ...
    def __init__(self, coop, coep, csp) -> None: ...

class ReportStatus(enum.Enum):
    QUEUED: str
    PENDING: str
    MARKED_FOR_REMOVAL: str
    SUCCESS: str
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ReportStatus: ...

class ReportId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> ReportId: ...

@dataclass
class ReportingApiReport:
    id_: ReportId
    initiator_url: str
    destination: str
    type_: str
    timestamp: TimeSinceEpoch
    depth: int
    completed_attempts: int
    body: dict
    status: ReportStatus
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ReportingApiReport: ...
    def __init__(self, id_, initiator_url, destination, type_, timestamp, depth, completed_attempts, body, status) -> None: ...

@dataclass
class ReportingApiEndpoint:
    url: str
    group_name: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ReportingApiEndpoint: ...
    def __init__(self, url, group_name) -> None: ...

@dataclass
class LoadNetworkResourcePageResult:
    success: bool
    net_error: typing.Optional[float] = ...
    net_error_name: typing.Optional[str] = ...
    http_status_code: typing.Optional[float] = ...
    stream: typing.Optional[io.StreamHandle] = ...
    headers: typing.Optional[Headers] = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LoadNetworkResourcePageResult: ...
    def __init__(self, success, net_error, net_error_name, http_status_code, stream, headers) -> None: ...

@dataclass
class LoadNetworkResourceOptions:
    disable_cache: bool
    include_credentials: bool
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LoadNetworkResourceOptions: ...
    def __init__(self, disable_cache, include_credentials) -> None: ...

def set_accepted_encodings(encodings: typing.List[ContentEncoding]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_accepted_encodings_override() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def can_clear_browser_cache() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def can_clear_browser_cookies() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def can_emulate_network_conditions() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def clear_browser_cache() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def clear_browser_cookies() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def continue_intercepted_request(interception_id: InterceptionId, error_reason: typing.Optional[ErrorReason] = None, raw_response: typing.Optional[str] = None, url: typing.Optional[str] = None, method: typing.Optional[str] = None, post_data: typing.Optional[str] = None, headers: typing.Optional[Headers] = None, auth_challenge_response: typing.Optional[AuthChallengeResponse] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def delete_cookies(name: str, url: typing.Optional[str] = None, domain: typing.Optional[str] = None, path: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def emulate_network_conditions(offline: bool, latency: float, download_throughput: float, upload_throughput: float, connection_type: typing.Optional[ConnectionType] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def enable(max_total_buffer_size: typing.Optional[int] = None, max_resource_buffer_size: typing.Optional[int] = None, max_post_data_size: typing.Optional[int] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_all_cookies() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Cookie]]: ...
def get_certificate(origin: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]: ...
def get_cookies(urls: typing.Optional[typing.List[str]] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Cookie]]: ...
def get_response_body(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]: ...
def get_request_post_data(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_response_body_for_interception(interception_id: InterceptionId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]: ...
def take_response_body_for_interception_as_stream(interception_id: InterceptionId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, io.StreamHandle]: ...
def replay_xhr(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def search_in_response_body(request_id: RequestId, query: str, case_sensitive: typing.Optional[bool] = None, is_regex: typing.Optional[bool] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[debugger.SearchMatch]]: ...
def set_blocked_ur_ls(urls: typing.List[str]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_bypass_service_worker(bypass: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_cache_disabled(cache_disabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_cookie(name: str, value: str, url: typing.Optional[str] = None, domain: typing.Optional[str] = None, path: typing.Optional[str] = None, secure: typing.Optional[bool] = None, http_only: typing.Optional[bool] = None, same_site: typing.Optional[CookieSameSite] = None, expires: typing.Optional[TimeSinceEpoch] = None, priority: typing.Optional[CookiePriority] = None, same_party: typing.Optional[bool] = None, source_scheme: typing.Optional[CookieSourceScheme] = None, source_port: typing.Optional[int] = None, partition_key: typing.Optional[str] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]: ...
def set_cookies(cookies: typing.List[CookieParam]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_extra_http_headers(headers: Headers) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_attach_debug_stack(enabled: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_request_interception(patterns: typing.List[RequestPattern]) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def set_user_agent_override(user_agent: str, accept_language: typing.Optional[str] = None, platform: typing.Optional[str] = None, user_agent_metadata: typing.Optional[emulation.UserAgentMetadata] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def stream_resource_content(request_id: RequestId) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, str]: ...
def get_security_isolation_status(frame_id: typing.Optional[page.FrameId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, SecurityIsolationStatus]: ...
def enable_reporting_api(enable: bool) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def load_network_resource(url: str, options: LoadNetworkResourceOptions, frame_id: typing.Optional[page.FrameId] = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, LoadNetworkResourcePageResult]: ...

@dataclass
class DataReceived:
    request_id: RequestId
    timestamp: MonotonicTime
    data_length: int
    encoded_data_length: int
    data: typing.Optional[str]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DataReceived: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, data_length, encoded_data_length, data) -> None: ...

@dataclass
class EventSourceMessageReceived:
    request_id: RequestId
    timestamp: MonotonicTime
    event_name: str
    event_id: str
    data: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> EventSourceMessageReceived: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, event_name, event_id, data) -> None: ...

@dataclass
class LoadingFailed:
    request_id: RequestId
    timestamp: MonotonicTime
    type_: ResourceType
    error_text: str
    canceled: typing.Optional[bool]
    blocked_reason: typing.Optional[BlockedReason]
    cors_error_status: typing.Optional[CorsErrorStatus]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LoadingFailed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, type_, error_text, canceled, blocked_reason, cors_error_status) -> None: ...

@dataclass
class LoadingFinished:
    request_id: RequestId
    timestamp: MonotonicTime
    encoded_data_length: float
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> LoadingFinished: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, encoded_data_length) -> None: ...

@dataclass
class RequestIntercepted:
    interception_id: InterceptionId
    request: Request
    frame_id: page.FrameId
    resource_type: ResourceType
    is_navigation_request: bool
    is_download: typing.Optional[bool]
    redirect_url: typing.Optional[str]
    auth_challenge: typing.Optional[AuthChallenge]
    response_error_reason: typing.Optional[ErrorReason]
    response_status_code: typing.Optional[int]
    response_headers: typing.Optional[Headers]
    request_id: typing.Optional[RequestId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestIntercepted: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, interception_id, request, frame_id, resource_type, is_navigation_request, is_download, redirect_url, auth_challenge, response_error_reason, response_status_code, response_headers, request_id) -> None: ...

@dataclass
class RequestServedFromCache:
    request_id: RequestId
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestServedFromCache: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id) -> None: ...

@dataclass
class RequestWillBeSent:
    request_id: RequestId
    loader_id: LoaderId
    document_url: str
    request: Request
    timestamp: MonotonicTime
    wall_time: TimeSinceEpoch
    initiator: Initiator
    redirect_has_extra_info: bool
    redirect_response: typing.Optional[Response]
    type_: typing.Optional[ResourceType]
    frame_id: typing.Optional[page.FrameId]
    has_user_gesture: typing.Optional[bool]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestWillBeSent: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, loader_id, document_url, request, timestamp, wall_time, initiator, redirect_has_extra_info, redirect_response, type_, frame_id, has_user_gesture) -> None: ...

@dataclass
class ResourceChangedPriority:
    request_id: RequestId
    new_priority: ResourcePriority
    timestamp: MonotonicTime
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ResourceChangedPriority: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, new_priority, timestamp) -> None: ...

@dataclass
class SignedExchangeReceived:
    request_id: RequestId
    info: SignedExchangeInfo
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SignedExchangeReceived: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, info) -> None: ...

@dataclass
class ResponseReceived:
    request_id: RequestId
    loader_id: LoaderId
    timestamp: MonotonicTime
    type_: ResourceType
    response: Response
    has_extra_info: bool
    frame_id: typing.Optional[page.FrameId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ResponseReceived: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, loader_id, timestamp, type_, response, has_extra_info, frame_id) -> None: ...

@dataclass
class WebSocketClosed:
    request_id: RequestId
    timestamp: MonotonicTime
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketClosed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp) -> None: ...

@dataclass
class WebSocketCreated:
    request_id: RequestId
    url: str
    initiator: typing.Optional[Initiator]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketCreated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, url, initiator) -> None: ...

@dataclass
class WebSocketFrameError:
    request_id: RequestId
    timestamp: MonotonicTime
    error_message: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketFrameError: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, error_message) -> None: ...

@dataclass
class WebSocketFrameReceived:
    request_id: RequestId
    timestamp: MonotonicTime
    response: WebSocketFrame
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketFrameReceived: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, response) -> None: ...

@dataclass
class WebSocketFrameSent:
    request_id: RequestId
    timestamp: MonotonicTime
    response: WebSocketFrame
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketFrameSent: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, response) -> None: ...

@dataclass
class WebSocketHandshakeResponseReceived:
    request_id: RequestId
    timestamp: MonotonicTime
    response: WebSocketResponse
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketHandshakeResponseReceived: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, response) -> None: ...

@dataclass
class WebSocketWillSendHandshakeRequest:
    request_id: RequestId
    timestamp: MonotonicTime
    wall_time: TimeSinceEpoch
    request: WebSocketRequest
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebSocketWillSendHandshakeRequest: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, timestamp, wall_time, request) -> None: ...

@dataclass
class WebTransportCreated:
    transport_id: RequestId
    url: str
    timestamp: MonotonicTime
    initiator: typing.Optional[Initiator]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebTransportCreated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, transport_id, url, timestamp, initiator) -> None: ...

@dataclass
class WebTransportConnectionEstablished:
    transport_id: RequestId
    timestamp: MonotonicTime
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebTransportConnectionEstablished: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, transport_id, timestamp) -> None: ...

@dataclass
class WebTransportClosed:
    transport_id: RequestId
    timestamp: MonotonicTime
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> WebTransportClosed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, transport_id, timestamp) -> None: ...

@dataclass
class RequestWillBeSentExtraInfo:
    request_id: RequestId
    associated_cookies: typing.List[BlockedCookieWithReason]
    headers: Headers
    connect_timing: ConnectTiming
    client_security_state: typing.Optional[ClientSecurityState]
    site_has_cookie_in_other_partition: typing.Optional[bool]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> RequestWillBeSentExtraInfo: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, associated_cookies, headers, connect_timing, client_security_state, site_has_cookie_in_other_partition) -> None: ...

@dataclass
class ResponseReceivedExtraInfo:
    request_id: RequestId
    blocked_cookies: typing.List[BlockedSetCookieWithReason]
    headers: Headers
    resource_ip_address_space: IPAddressSpace
    status_code: int
    headers_text: typing.Optional[str]
    cookie_partition_key: typing.Optional[str]
    cookie_partition_key_opaque: typing.Optional[bool]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ResponseReceivedExtraInfo: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, blocked_cookies, headers, resource_ip_address_space, status_code, headers_text, cookie_partition_key, cookie_partition_key_opaque) -> None: ...

@dataclass
class TrustTokenOperationDone:
    status: str
    type_: TrustTokenOperationType
    request_id: RequestId
    top_level_origin: typing.Optional[str]
    issuer_origin: typing.Optional[str]
    issued_token_count: typing.Optional[int]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TrustTokenOperationDone: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, status, type_, request_id, top_level_origin, issuer_origin, issued_token_count) -> None: ...

@dataclass
class SubresourceWebBundleMetadataReceived:
    request_id: RequestId
    urls: typing.List[str]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SubresourceWebBundleMetadataReceived: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, urls) -> None: ...

@dataclass
class SubresourceWebBundleMetadataError:
    request_id: RequestId
    error_message: str
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SubresourceWebBundleMetadataError: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, request_id, error_message) -> None: ...

@dataclass
class SubresourceWebBundleInnerResponseParsed:
    inner_request_id: RequestId
    inner_request_url: str
    bundle_request_id: typing.Optional[RequestId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SubresourceWebBundleInnerResponseParsed: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, inner_request_id, inner_request_url, bundle_request_id) -> None: ...

@dataclass
class SubresourceWebBundleInnerResponseError:
    inner_request_id: RequestId
    inner_request_url: str
    error_message: str
    bundle_request_id: typing.Optional[RequestId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SubresourceWebBundleInnerResponseError: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, inner_request_id, inner_request_url, error_message, bundle_request_id) -> None: ...

@dataclass
class ReportingApiReportAdded:
    report: ReportingApiReport
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ReportingApiReportAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, report) -> None: ...

@dataclass
class ReportingApiReportUpdated:
    report: ReportingApiReport
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ReportingApiReportUpdated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, report) -> None: ...

@dataclass
class ReportingApiEndpointsChangedForOrigin:
    origin: str
    endpoints: typing.List[ReportingApiEndpoint]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ReportingApiEndpointsChangedForOrigin: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, origin, endpoints) -> None: ...
