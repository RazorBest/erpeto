from _typeshed import Incomplete
from autobahn.twisted.websocket import WampWebSocketClientFactory
from autobahn.wamp import protocol
from autobahn.wamp.interfaces import ISerializer
from collections.abc import Generator
from twisted.application import service
from twisted.internet.defer import Deferred
from twisted.internet.interfaces import IReactorCore, IStreamClientEndpoint
from twisted.internet.ssl import CertificateOptions
from typing import Any, Dict, List, Optional, Union

__all__ = ['ApplicationSession', 'ApplicationSessionFactory', 'ApplicationRunner', 'Application', 'Service', 'Session']

class ApplicationSession(protocol.ApplicationSession):
    log: Incomplete

class ApplicationSessionFactory(protocol.ApplicationSessionFactory):
    session: type[ApplicationSession]
    log: Incomplete

class ApplicationRunner:
    log: Incomplete
    url: Incomplete
    realm: Incomplete
    extra: Incomplete
    serializers: Incomplete
    ssl: Incomplete
    proxy: Incomplete
    headers: Incomplete
    websocket_options: Incomplete
    max_retries: Incomplete
    initial_retry_delay: Incomplete
    max_retry_delay: Incomplete
    retry_delay_growth: Incomplete
    retry_delay_jitter: Incomplete
    def __init__(self, url: str, realm: Optional[str] = None, extra: Optional[Dict[str, Any]] = None, serializers: Optional[List[ISerializer]] = None, ssl: Optional[CertificateOptions] = None, proxy: Optional[Dict[str, Any]] = None, headers: Optional[Dict[str, Any]] = None, websocket_options: Optional[Dict[str, Any]] = None, max_retries: Optional[int] = None, initial_retry_delay: Optional[float] = None, max_retry_delay: Optional[float] = None, retry_delay_growth: Optional[float] = None, retry_delay_jitter: Optional[float] = None) -> None: ...
    def stop(self): ...
    exception: Incomplete
    def run(self, make, start_reactor: bool = True, auto_reconnect: bool = False, log_level: str = 'info', endpoint: Optional[IStreamClientEndpoint] = None, reactor: Optional[IReactorCore] = None) -> Union[None, Deferred]: ...

class _ApplicationSession(ApplicationSession):
    app: Incomplete
    def __init__(self, config, app) -> None: ...
    def onConnect(self) -> Generator[Incomplete, None, None]: ...
    def onJoin(self, details) -> Generator[Incomplete, None, None]: ...
    def onLeave(self, details) -> Generator[Incomplete, None, None]: ...
    def onDisconnect(self) -> Generator[Incomplete, None, None]: ...

class Application:
    log: Incomplete
    session: Incomplete
    def __init__(self, prefix: Incomplete | None = None) -> None: ...
    def __call__(self, config): ...
    def run(self, url: str = 'ws://localhost:8080/ws', realm: str = 'realm1', start_reactor: bool = True): ...
    def register(self, uri: Incomplete | None = None): ...
    def subscribe(self, uri: Incomplete | None = None): ...
    def signal(self, name): ...

class Service(service.MultiService):
    factory = WampWebSocketClientFactory
    url: Incomplete
    realm: Incomplete
    extra: Incomplete
    make: Incomplete
    context_factory: Incomplete
    def __init__(self, url, realm, make, extra: Incomplete | None = None, context_factory: Incomplete | None = None) -> None: ...
    def setupService(self): ...

class Session(protocol._SessionShim):
    def on_welcome(self, welcome_msg) -> None: ...
    def on_join(self, details) -> None: ...
    def on_leave(self, details) -> None: ...
    def on_connect(self) -> None: ...
    def on_disconnect(self) -> None: ...

class AuthCryptoSign:
    def __init__(self, **kw) -> None: ...
    def on_challenge(self, session, challenge): ...

class AuthWampCra:
    def __init__(self, **kw) -> None: ...
    def on_challenge(self, session, challenge): ...
