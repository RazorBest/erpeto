import enum
import typing
from . import io as io
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class MemoryDumpConfig(dict):
    def to_json(self) -> dict: ...
    @classmethod
    def from_json(cls, json: dict) -> MemoryDumpConfig: ...

@dataclass
class TraceConfig:
    record_mode: str | None = ...
    trace_buffer_size_in_kb: float | None = ...
    enable_sampling: bool | None = ...
    enable_systrace: bool | None = ...
    enable_argument_filter: bool | None = ...
    included_categories: list[str] | None = ...
    excluded_categories: list[str] | None = ...
    synthetic_delays: list[str] | None = ...
    memory_dump_config: MemoryDumpConfig | None = ...
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TraceConfig: ...

class StreamFormat(enum.Enum):
    JSON = 'json'
    PROTO = 'proto'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StreamFormat: ...

class StreamCompression(enum.Enum):
    NONE = 'none'
    GZIP = 'gzip'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> StreamCompression: ...

class MemoryDumpLevelOfDetail(enum.Enum):
    BACKGROUND = 'background'
    LIGHT = 'light'
    DETAILED = 'detailed'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> MemoryDumpLevelOfDetail: ...

class TracingBackend(enum.Enum):
    AUTO = 'auto'
    CHROME = 'chrome'
    SYSTEM = 'system'
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> TracingBackend: ...

def end() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def get_categories() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, list[str]]: ...
def record_clock_sync_marker(sync_id: str) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def request_memory_dump(deterministic: bool | None = None, level_of_detail: MemoryDumpLevelOfDetail | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, bool]]: ...
def start(categories: str | None = None, options: str | None = None, buffer_usage_reporting_interval: float | None = None, transfer_mode: str | None = None, stream_format: StreamFormat | None = None, stream_compression: StreamCompression | None = None, trace_config: TraceConfig | None = None, perfetto_config: str | None = None, tracing_backend: TracingBackend | None = None) -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class BufferUsage:
    percent_full: float | None
    event_count: float | None
    value: float | None
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> BufferUsage: ...

@dataclass
class DataCollected:
    value: list[dict]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DataCollected: ...

@dataclass
class TracingComplete:
    data_loss_occurred: bool
    stream: io.StreamHandle | None
    trace_format: StreamFormat | None
    stream_compression: StreamCompression | None
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> TracingComplete: ...
