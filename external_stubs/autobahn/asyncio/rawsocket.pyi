import asyncio
from _typeshed import Incomplete
from autobahn.wamp.types import TransportDetails
from typing import Optional

__all__ = ['WampRawSocketServerProtocol', 'WampRawSocketClientProtocol', 'WampRawSocketServerFactory', 'WampRawSocketClientFactory']

class PrefixProtocol(asyncio.Protocol):
    prefix_format: str
    prefix_length: Incomplete
    max_length: Incomplete
    max_length_send = max_length
    log: Incomplete
    peer: Optional[str]
    is_server: Optional[bool]
    @property
    def transport_details(self) -> Optional[TransportDetails]: ...
    transport: Incomplete
    def connection_made(self, transport) -> None: ...
    @property
    def is_closed(self): ...
    def connection_lost(self, exc) -> None: ...
    def protocol_error(self, msg) -> None: ...
    def sendString(self, data) -> None: ...
    def ping(self, data) -> None: ...
    def pong(self, data) -> None: ...
    def data_received(self, data) -> None: ...
    def stringReceived(self, data) -> None: ...

class RawSocketProtocol(PrefixProtocol):
    max_length: Incomplete
    def __init__(self) -> None: ...
    def connection_made(self, transport) -> None: ...
    max_length_send: Incomplete
    def parse_handshake(self): ...
    def process_handshake(self) -> None: ...
    def data_received(self, data): ...

class HandshakeError(Exception):
    def __init__(self, msg, code: int = 0) -> None: ...

class RawSocketClientProtocol(RawSocketProtocol):
    is_server: bool
    def check_serializer(self, ser_id): ...
    def process_handshake(self) -> None: ...
    @property
    def serializer_id(self) -> None: ...
    def connection_made(self, transport) -> None: ...

class RawSocketServerProtocol(RawSocketProtocol):
    is_server: bool
    def supports_serializer(self, ser_id) -> None: ...
    def process_handshake(self) -> None: ...

class WampRawSocketMixinGeneral:
    def stringReceived(self, payload) -> None: ...
    def send(self, msg) -> None: ...
    def isOpen(self): ...

class WampRawSocketMixinAsyncio:
    def close(self) -> None: ...
    def abort(self) -> None: ...

class WampRawSocketServerProtocol(WampRawSocketMixinGeneral, WampRawSocketMixinAsyncio, RawSocketServerProtocol):
    def supports_serializer(self, ser_id): ...

class WampRawSocketClientProtocol(WampRawSocketMixinGeneral, WampRawSocketMixinAsyncio, RawSocketClientProtocol):
    @property
    def serializer_id(self): ...

class WampRawSocketFactory:
    log: Incomplete
    def __call__(self): ...

class WampRawSocketServerFactory(WampRawSocketFactory):
    protocol = WampRawSocketServerProtocol
    def __init__(self, factory, serializers: Incomplete | None = None) -> None: ...

class WampRawSocketClientFactory(WampRawSocketFactory):
    protocol = WampRawSocketClientProtocol
    def __init__(self, factory, serializer: Incomplete | None = None) -> None: ...
