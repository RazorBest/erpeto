import typing
from .util import T_JSON_DICT as T_JSON_DICT, event_class as event_class
from dataclasses import dataclass

class PlayerId(str):
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json: str) -> PlayerId: ...

class Timestamp(float):
    def to_json(self) -> float: ...
    @classmethod
    def from_json(cls, json: float) -> Timestamp: ...

@dataclass
class PlayerMessage:
    level: str
    message: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerMessage: ...
    def __init__(self, level, message) -> None: ...

@dataclass
class PlayerProperty:
    name: str
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerProperty: ...
    def __init__(self, name, value) -> None: ...

@dataclass
class PlayerEvent:
    timestamp: Timestamp
    value: str
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerEvent: ...
    def __init__(self, timestamp, value) -> None: ...

@dataclass
class PlayerErrorSourceLocation:
    file: str
    line: int
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerErrorSourceLocation: ...
    def __init__(self, file, line) -> None: ...

@dataclass
class PlayerError:
    error_type: str
    code: int
    stack: typing.List[PlayerErrorSourceLocation]
    cause: typing.List[PlayerError]
    data: dict
    def to_json(self) -> T_JSON_DICT: ...
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerError: ...
    def __init__(self, error_type, code, stack, cause, data) -> None: ...

def enable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...
def disable() -> typing.Generator[T_JSON_DICT, T_JSON_DICT, None]: ...

@dataclass
class PlayerPropertiesChanged:
    player_id: PlayerId
    properties: typing.List[PlayerProperty]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerPropertiesChanged: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, player_id, properties) -> None: ...

@dataclass
class PlayerEventsAdded:
    player_id: PlayerId
    events: typing.List[PlayerEvent]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerEventsAdded: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, player_id, events) -> None: ...

@dataclass
class PlayerMessagesLogged:
    player_id: PlayerId
    messages: typing.List[PlayerMessage]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerMessagesLogged: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, player_id, messages) -> None: ...

@dataclass
class PlayerErrorsRaised:
    player_id: PlayerId
    errors: typing.List[PlayerError]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayerErrorsRaised: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, player_id, errors) -> None: ...

@dataclass
class PlayersCreated:
    players: typing.List[PlayerId]
    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PlayersCreated: ...
    def to_json(self) -> T_JSON_DICT: ...
    def __init__(self, players) -> None: ...
