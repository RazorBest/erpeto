from _typeshed import Incomplete
from autobahn import wamp as wamp
from autobahn.exception import PayloadExceededError as PayloadExceededError
from autobahn.util import IdGenerator as IdGenerator, ObservableMixin as ObservableMixin, public as public
from autobahn.wamp import exception as exception, message as message, role as role, types as types, uri as uri
from autobahn.wamp.exception import ApplicationError as ApplicationError, ProtocolError as ProtocolError, SerializationError as SerializationError, TypeCheckError as TypeCheckError
from autobahn.wamp.interfaces import IAuthenticator as IAuthenticator, IMessage as IMessage, IPayloadCodec as IPayloadCodec, ISession as ISession, ITransport as ITransport
from autobahn.wamp.request import CallRequest as CallRequest, Endpoint as Endpoint, Handler as Handler, InvocationRequest as InvocationRequest, Publication as Publication, PublishRequest as PublishRequest, RegisterRequest as RegisterRequest, Registration as Registration, SubscribeRequest as SubscribeRequest, Subscription as Subscription, UnregisterRequest as UnregisterRequest, UnsubscribeRequest as UnsubscribeRequest
from autobahn.wamp.types import CallResult as CallResult, Challenge as Challenge, CloseDetails as CloseDetails, EncodedPayload as EncodedPayload, RegisterOptions as RegisterOptions, SessionDetails as SessionDetails, SubscribeOptions as SubscribeOptions
from typing import Any, Callable, Dict, List, Optional, Union

def is_method_or_function(f): ...

class BaseSession(ObservableMixin):
    log: Incomplete
    traceback_app: bool
    def __init__(self) -> None: ...
    @property
    def transport(self) -> Optional[ITransport]: ...
    def is_connected(self) -> bool: ...
    def is_attached(self) -> bool: ...
    @property
    def session_details(self) -> Optional[SessionDetails]: ...
    @property
    def realm(self) -> Optional[str]: ...
    @property
    def session_id(self) -> Optional[int]: ...
    @property
    def authid(self) -> Optional[str]: ...
    @property
    def authrole(self) -> Optional[str]: ...
    @property
    def authmethod(self) -> Optional[str]: ...
    @property
    def authprovider(self) -> Optional[str]: ...
    @property
    def authextra(self) -> Optional[Dict[str, Any]]: ...
    def define(self, exception: Exception, error: Optional[str] = None): ...

class ApplicationSession(BaseSession):
    def __init__(self, config: Optional[types.ComponentConfig] = None) -> None: ...
    @property
    def config(self) -> types.ComponentConfig: ...
    def set_payload_codec(self, payload_codec: Optional[IPayloadCodec]): ...
    def get_payload_codec(self) -> Optional[IPayloadCodec]: ...
    def onOpen(self, transport: ITransport): ...
    def onConnect(self) -> Incomplete: ...
    def join(self, realm: str, authmethods: Optional[List[str]] = None, authid: Optional[str] = None, authrole: Optional[str] = None, authextra: Optional[Dict[str, Any]] = None, resumable: Optional[bool] = None, resume_session: Optional[int] = None, resume_token: Optional[str] = None): ...
    def disconnect(self) -> None: ...
    def onUserError(self, fail, msg) -> None: ...
    def type_check(self, func): ...
    def onMessage(self, msg: IMessage): ...
    def onClose(self, wasClean): ...
    def onChallenge(self, challenge: Challenge) -> str: ...
    def onJoin(self, details: SessionDetails): ...
    def onWelcome(self, welcome: message.Welcome) -> Optional[str]: ...
    def onLeave(self, details: CloseDetails): ...
    def leave(self, reason: Optional[str] = None, message: Optional[str] = None): ...
    def onDisconnect(self) -> Incomplete: ...
    def publish(self, topic: str, *args, **kwargs) -> Optional[Publication]: ...
    def subscribe(self, handler: Union[Callable, Any], topic: Optional[str] = None, options: Optional[SubscribeOptions] = None, check_types: Optional[bool] = None) -> Union[Subscription, List[Subscription]]: ...
    def call(self, procedure: str, *args, **kwargs) -> Union[Any, CallResult]: ...
    def register(self, endpoint: Union[Callable, Any], procedure: Optional[str] = None, options: Optional[RegisterOptions] = None, prefix: Optional[str] = None, check_types: Optional[bool] = None) -> Union[Registration, List[Registration]]: ...

class _SessionShim(ApplicationSession):
    def onJoin(self, details): ...
    def onConnect(self) -> None: ...
    def onChallenge(self, challenge): ...
    def onWelcome(self, msg): ...
    def onLeave(self, details): ...
    def onDisconnect(self): ...
    def add_authenticator(self, authenticator) -> None: ...
    def on_join(self, details) -> None: ...
    def on_leave(self, details) -> None: ...
    def on_connect(self) -> None: ...
    def on_disconnect(self) -> None: ...

class ApplicationSessionFactory:
    session = ApplicationSession
    config: Incomplete
    def __init__(self, config: Incomplete | None = None) -> None: ...
    def __call__(self): ...
